<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Seorenn</title>
    <link>https://seorenn.github.io</link>
    <description>Seorenn Notes and Logs</description>
    <atom:link href="https://seorenn.github.io" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>https://seorenn.github.io</generator>
    <image>
      <url>https://seorenn.github.io/static/seorenn-symbol.png</url>
      <title>Seorenn</title>
      <link>https://seorenn.github.io</link>
    </image>
    <language>ko</language>
    <lastBuildDate>Mon, 05 Aug 2024 23:18:20 +0900</lastBuildDate>
    <item>
      <title>서비스업 PMI는 시장을 살려줄 수 있을까?</title>
      <link>https://seorenn.github.io/log/20240805-01.html</link>
      <description>&lt;p&gt;미장 연속 폭락에 이어 국장에도 파란색 피바다가 펼쳐진 후, 반등의 기미를 보여줄 만한 이벤트가 바로 다가왔다. 서비스업 PMI가 발표되기 때문이다. 실제 결과는 아래와 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;미국 7월 서비스 PMI: 55.0 (-0.3)
미국 7월 ISM 비제조업 PMI: 51.4 (+2.6)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;S&amp;amp;P의 PMI는 예상치를 조금 하회하긴 했지만 일단 50 이상으로 나타나며 다행이라면 다행인 지표를 볼 수 있었다.&lt;/p&gt;
&lt;p&gt;물론 핵심은 ISM의 지표다. ISM의 서비스업 PMI는 예상에 정확히 비트하며 지난 위축세를 오히려 엎어버리며 다시 확장으로 돌아선 모양이다.&lt;/p&gt;
&lt;p&gt;한 달 전만 해도 이런 수치가 나왔으면 "서비스 경기 X나 안 죽네"라며 울상인 증시를 볼 수 있었을 텐데 오늘 만은 다르다. 리세션 공포감에 팽배하던 시장에 오히려 "휴우~ 기우였네" 라는 안도감을 줄 수 있을 지도 모른다. 덕분인지 아니면 그저 저가매수인지 모르겠지만 갭 하락으로 시작한 미장에 빨간색 캔들이 많이 보인다. 마치 회복하려고 힘을 내는 듯한 느낌이다. 물론 이제 시작이라 이대로 이어질 지는 알 수 없다.&lt;/p&gt;
&lt;p&gt;어제 오늘 연준이 긴급 회의를 열어 금리를 바로 내려야 한다는 이야기도 많이 보였는데 오늘 만큼은 없던 이야기가 될 것 같다. 애초에 연준은 데이터를 확인하고 행동하겠다고 분명히 밝혔으니 긴급 회의 가능성도 별로 없었을 것 같다.&lt;/p&gt;
&lt;p&gt;어쨌든 힘을 내서 폭락 만큼은 더는 없었으면 좋겠다. 파란색 피바다는 정신건강에 매우 안 좋은 것 같으니 말이다. 내가 무슨 투구게도 아니고....&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;미장 연속 폭락에 이어 국장에도 파란색 피바다가 펼쳐진 후, 반등의 기미를 보여줄 만한 이벤트가 바로 다가왔다. 서비스업 PMI가 발표되기 때문이다. 실제 결과는 아래와 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;미국 7월 서비스 PMI: 55.0 (-0.3)
미국 7월 ISM 비제조업 PMI: 51.4 (+2.6)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;S&amp;amp;P의 PMI는 예상치를 조금 하회하긴 했지만 일단 50 이상으로 나타나며 다행이라면 다행인 지표를 볼 수 있었다.&lt;/p&gt;
&lt;p&gt;물론 핵심은 ISM의 지표다. ISM의 서비스업 PMI는 예상에 정확히 비트하며 지난 위축세를 오히려 엎어버리며 다시 확장으로 돌아선 모양이다.&lt;/p&gt;
&lt;p&gt;한 달 전만 해도 이런 수치가 나왔으면 "서비스 경기 X나 안 죽네"라며 울상인 증시를 볼 수 있었을 텐데 오늘 만은 다르다. 리세션 공포감에 팽배하던 시장에 오히려 "휴우~ 기우였네" 라는 안도감을 줄 수 있을 지도 모른다. 덕분인지 아니면 그저 저가매수인지 모르겠지만 갭 하락으로 시작한 미장에 빨간색 캔들이 많이 보인다. 마치 회복하려고 힘을 내는 듯한 느낌이다. 물론 이제 시작이라 이대로 이어질 지는 알 수 없다.&lt;/p&gt;
&lt;p&gt;어제 오늘 연준이 긴급 회의를 열어 금리를 바로 내려야 한다는 이야기도 많이 보였는데 오늘 만큼은 없던 이야기가 될 것 같다. 애초에 연준은 데이터를 확인하고 행동하겠다고 분명히 밝혔으니 긴급 회의 가능성도 별로 없었을 것 같다.&lt;/p&gt;
&lt;p&gt;어쨌든 힘을 내서 폭락 만큼은 더는 없었으면 좋겠다. 파란색 피바다는 정신건강에 매우 안 좋은 것 같으니 말이다. 내가 무슨 투구게도 아니고....&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240805-01.html</guid>
      <pubDate>Mon, 05 Aug 2024 23:18:00 +0900</pubDate>
    </item>
    <item>
      <title>Python-Markdown의 테이블 렌더링 지원</title>
      <link>https://seorenn.github.io/article/python-markdown-table.html</link>
      <description>&lt;p&gt;&lt;a href="../article/python-markdown.html"&gt;Python-Markdown&lt;/a&gt;으로 마크다운 문서를 HTML로 렌더링 할 때는 뭔가 고급(?) 기능이 빠진 것 같이 렌더링이 된다. 예를 들어 테이블의 경우가 그렇다.&lt;/p&gt;
&lt;p&gt;다행히도 테이블 렌더링이 지원되지 않는 것은 아니다. 사실 아주 간단하다.&lt;/p&gt;
&lt;h2&gt;Python-Markdown에서 테이벌 렌더링 지원하기&lt;/h2&gt;
&lt;p&gt;테이블 렌더링을 지원하려면 간단히 &lt;code&gt;tables&lt;/code&gt; 확장을 추가해 주면 된다. 예를 들자면 아래와 같은 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;html = markdown.markdown(markdown_text, extensions=['tables'])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 경우 테이블 문법으로 작성한 마크다운이 테이블 태그로 렌더링 된다.&lt;/p&gt;
&lt;h2&gt;정렬 속성 사용하기&lt;/h2&gt;
&lt;p&gt;위의 방식으로 테이블 확장을 사용할 경우 각 셀의 정렬(alignment)을 style 속성에 CSS를 적용하는 방식으로 적용된다. 만약 style이 아닌 align 속성을 쓰고 싶다면 별도의 옵션을 줄 수 있다. 이 경우 해당 확장 클래스 자체를 가져와서 매개변수를 전달해서 설정할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from markdown.extensions.tables import TableExtension

...

html = markdown.markdown(
    markdown_text, 
    extensions=[TableExtension(use_align_attribute=True)]
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같은 식으로 확장을 추가할 경우 마크다운 문서에 정렬 방식을 설정할 경우 각 셀에 &lt;code&gt;align&lt;/code&gt; 속성이 적용되는 것을 볼 수 있다.&lt;/p&gt;
&lt;h2&gt;실제 렌더링 결과물&lt;/h2&gt;
&lt;p&gt;이 렌더링 예시는 별도의 설정 없는 기본적인 확장을 사용한 경우다. 실제 HTML 태그는 소스보기로 확인해 보자.&lt;/p&gt;
&lt;p&gt;입력 마크다운 문서는 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| 좌측 정렬 항목      | 기본 항목                          |      우측 정렬 항목 |
|:--------------------|------------------------------------|--------------------:|
| 왼쪽                | 기본                               |              오른쪽 |
| 그냥 약간 긴 문자열 | 그냥 약간 아주 조금만 더 긴 문자열 | 그냥 약간 긴 문자열 |
| **당연히**          | `다양한` *텍스트* 스타일을         |     쓸 수 있습니다. |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;출력으로 렌더링 되는 결과는 아래와 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;좌측 정렬 항목&lt;/th&gt;
&lt;th&gt;기본 항목&lt;/th&gt;
&lt;th style="text-align: right;"&gt;우측 정렬 항목&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;왼쪽&lt;/td&gt;
&lt;td&gt;기본&lt;/td&gt;
&lt;td style="text-align: right;"&gt;오른쪽&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;그냥 약간 긴 문자열&lt;/td&gt;
&lt;td&gt;그냥 약간 아주 조금만 더 긴 문자열&lt;/td&gt;
&lt;td style="text-align: right;"&gt;그냥 약간 긴 문자열&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;strong&gt;당연히&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;다양한&lt;/code&gt; &lt;em&gt;텍스트&lt;/em&gt; 스타일을&lt;/td&gt;
&lt;td style="text-align: right;"&gt;쓸 수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;위 테이블이 잘 보인다면 별 문제는 없는 것이다.&lt;/p&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../article/python-markdown.html"&gt;파이썬으로 마크다운 문서를 HTML로 변환하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;p&gt;&lt;a href="../article/python-markdown.html"&gt;Python-Markdown&lt;/a&gt;으로 마크다운 문서를 HTML로 렌더링 할 때는 뭔가 고급(?) 기능이 빠진 것 같이 렌더링이 된다. 예를 들어 테이블의 경우가 그렇다.&lt;/p&gt;
&lt;p&gt;다행히도 테이블 렌더링이 지원되지 않는 것은 아니다. 사실 아주 간단하다.&lt;/p&gt;
&lt;h2&gt;Python-Markdown에서 테이벌 렌더링 지원하기&lt;/h2&gt;
&lt;p&gt;테이블 렌더링을 지원하려면 간단히 &lt;code&gt;tables&lt;/code&gt; 확장을 추가해 주면 된다. 예를 들자면 아래와 같은 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;html = markdown.markdown(markdown_text, extensions=['tables'])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 경우 테이블 문법으로 작성한 마크다운이 테이블 태그로 렌더링 된다.&lt;/p&gt;
&lt;h2&gt;정렬 속성 사용하기&lt;/h2&gt;
&lt;p&gt;위의 방식으로 테이블 확장을 사용할 경우 각 셀의 정렬(alignment)을 style 속성에 CSS를 적용하는 방식으로 적용된다. 만약 style이 아닌 align 속성을 쓰고 싶다면 별도의 옵션을 줄 수 있다. 이 경우 해당 확장 클래스 자체를 가져와서 매개변수를 전달해서 설정할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from markdown.extensions.tables import TableExtension

...

html = markdown.markdown(
    markdown_text, 
    extensions=[TableExtension(use_align_attribute=True)]
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같은 식으로 확장을 추가할 경우 마크다운 문서에 정렬 방식을 설정할 경우 각 셀에 &lt;code&gt;align&lt;/code&gt; 속성이 적용되는 것을 볼 수 있다.&lt;/p&gt;
&lt;h2&gt;실제 렌더링 결과물&lt;/h2&gt;
&lt;p&gt;이 렌더링 예시는 별도의 설정 없는 기본적인 확장을 사용한 경우다. 실제 HTML 태그는 소스보기로 확인해 보자.&lt;/p&gt;
&lt;p&gt;입력 마크다운 문서는 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| 좌측 정렬 항목      | 기본 항목                          |      우측 정렬 항목 |
|:--------------------|------------------------------------|--------------------:|
| 왼쪽                | 기본                               |              오른쪽 |
| 그냥 약간 긴 문자열 | 그냥 약간 아주 조금만 더 긴 문자열 | 그냥 약간 긴 문자열 |
| **당연히**          | `다양한` *텍스트* 스타일을         |     쓸 수 있습니다. |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;출력으로 렌더링 되는 결과는 아래와 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;좌측 정렬 항목&lt;/th&gt;
&lt;th&gt;기본 항목&lt;/th&gt;
&lt;th style="text-align: right;"&gt;우측 정렬 항목&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;왼쪽&lt;/td&gt;
&lt;td&gt;기본&lt;/td&gt;
&lt;td style="text-align: right;"&gt;오른쪽&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;그냥 약간 긴 문자열&lt;/td&gt;
&lt;td&gt;그냥 약간 아주 조금만 더 긴 문자열&lt;/td&gt;
&lt;td style="text-align: right;"&gt;그냥 약간 긴 문자열&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;strong&gt;당연히&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;다양한&lt;/code&gt; &lt;em&gt;텍스트&lt;/em&gt; 스타일을&lt;/td&gt;
&lt;td style="text-align: right;"&gt;쓸 수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;위 테이블이 잘 보인다면 별 문제는 없는 것이다.&lt;/p&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../article/python-markdown.html"&gt;파이썬으로 마크다운 문서를 HTML로 변환하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/python-markdown-table.html</guid>
      <pubDate>Mon, 05 Aug 2024 20:22:00 +0900</pubDate>
    </item>
    <item>
      <title>공포에 사라고 했다</title>
      <link>https://seorenn.github.io/log/20240805-00.html</link>
      <description>&lt;p&gt;주식시장에 피가 낭자하고 있다. 파란 피. 투구게는 아니지만 어쟀든 시퍼런 피바다다.&lt;/p&gt;
&lt;p&gt;누군가 이야기 했다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;공포에 사라.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;지금은 초 공포의 월요일이다. 이럴 때가 아니면 언제 사겠나. 물려있다고? 지금이야 말로 물타기 찬스 아닌가.&lt;/p&gt;
&lt;p&gt;누르자 매수 버튼!&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img alt="공포에 사기 실패" src="../upload/202408051418-8bb050ff.png" /&gt;
&lt;em&gt;공포에 사기 실패&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;친절한 거래소의 호의에 오늘도 나의 지갑이 지켜졌다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;주식시장에 피가 낭자하고 있다. 파란 피. 투구게는 아니지만 어쟀든 시퍼런 피바다다.&lt;/p&gt;
&lt;p&gt;누군가 이야기 했다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;공포에 사라.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;지금은 초 공포의 월요일이다. 이럴 때가 아니면 언제 사겠나. 물려있다고? 지금이야 말로 물타기 찬스 아닌가.&lt;/p&gt;
&lt;p&gt;누르자 매수 버튼!&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img alt="공포에 사기 실패" src="../upload/202408051418-8bb050ff.png" /&gt;
&lt;em&gt;공포에 사기 실패&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;친절한 거래소의 호의에 오늘도 나의 지갑이 지켜졌다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240805-00.html</guid>
      <pubDate>Mon, 05 Aug 2024 14:19:00 +0900</pubDate>
    </item>
    <item>
      <title>macOS 14.6, iOS 17.6 등 안정 버전 공개 외 한 주간의 애플 소식들 24-08-04</title>
      <link>https://seorenn.github.io/log/20240804-00.html</link>
      <description>&lt;h2&gt;소프트웨어 릴리즈 소식들&lt;/h2&gt;
&lt;p&gt;애플은 미국 시각 7월 29일 아래의 애플 플랫폼 OS 안정 버전을 릴리즈 했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6&lt;/li&gt;
&lt;li&gt;iOS 17.6&lt;/li&gt;
&lt;li&gt;iPadOS 17.6&lt;/li&gt;
&lt;li&gt;visionOS 1.3&lt;/li&gt;
&lt;li&gt;watchOS 10.6&lt;/li&gt;
&lt;li&gt;tvOS 17.6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기존 대로라면 마이너 업데이트인 만큼 상황을 보고 설치하라고 하겠지만 이번의 경우는 신기능은 거의 없는 버그 픽스 급 업데이트로 평가되는 만큼 설치에 큰 부담은 없을 것 같다. 딱히 알려진 새로운 기능은 스포츠 관련 콘텐츠 추가와 함께  M3 14인치 맥북프로에서 macOS 듀얼 모니터 지원 정도다.&lt;/p&gt;
&lt;p&gt;동시에 외에 애플은 차세대 OS들의 다음 마이너 업데이트를 준비하기 시작했는지 아래의 개발자 베타들을 함께 공개했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15.1 beta&lt;/li&gt;
&lt;li&gt;iOS 18.1 beta&lt;/li&gt;
&lt;li&gt;iPadOS 18.1 beta&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;첫 마이너 업데이트는 AI 초기 지원이 주목적으로 보이기에 관련된 플랫폼만 우선적으로 베타가 공개된 것 같은 느낌적인 느낌이다. 특히 AI 기능 사용을 위한 사전신청 및 대기명단 기능이 추가된 것 같다. 당연하겠지만 이번 개발자 베타의 AI 지원은 이미 애플이 밝힌 AI 작동이 가능한 최신형 디바이스에서만 사용이 가능하다.&lt;/p&gt;
&lt;p&gt;다만 첫 베타에서는 AI 지원이 탑재되지 않은 것으로 알려지고 있다.&lt;/p&gt;
&lt;p&gt;이 외에 아래의 소프트웨어 공개 소식이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari Technology Preview 200&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기타 앱 검토 가이드라인도 업데이트 되었다. 주로 최근에 반려 및 승인으로 화제가 되었던 PC 에뮬레이터 앱과 관련된 지침이다.&lt;/p&gt;
&lt;h2&gt;일반적인 애플 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;공급망 다변화&lt;/strong&gt;&lt;br/&gt;
iPhone의 주력 제품인 Pro 모델들도 인도에서 생산될 것 같다. 물론 여전히 중국은 iPhone의 최대 생산 국가일 테지만 적어도 중국 의존도를 일부 낮출 수는 있을 것이다. 중국 의존도가 높을 때 코로나 봉쇄로 피 맛을 크게 못 애플이라 공급망 다변화 속도를 늦출 이유도 없을 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;늦어지는 폴더블&lt;/strong&gt;&lt;br/&gt;
2025년을 목표로 개발 중이라던 폴더블 iPad(혹은 폴더블 Mac 하이브리드)는 대량 생산 관련 문제로 2026년으로 지연될 것 같다는 모양이다. 그리고 2026년에 폴더블 iPhone도 함께 로드맵에 들어가게 된 것 같다. 개인적으론 폴더블 Mac은 여전히 바보같은 발상이라고 생각한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AAPL 설마 고점?&lt;/strong&gt;&lt;br/&gt;
워렌 버핏의 버크셔 헤서웨이가 AAPL 지분을 거의 절반 가까이 매도한 것으로 확인되었다. 다만 애플 뿐만 아니라 BAC도 상당량의 지분을 매도한 것으로 보아 현금 확보가 주 목적인 것으로 보인다.&lt;/p&gt;
&lt;h2&gt;Apple Intelligence 관련 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플은 사용자 요청에 따라 AI 사용에 대한 개인 정보 보호 보고서를 공개한다고 한다.&lt;/li&gt;
&lt;li&gt;AI 통합 Siri는 올해 말 쯤 나올 iOS 18 버전 업데이트에서 지원될 것으로 보인다.&lt;/li&gt;
&lt;li&gt;덕분에 iPhone 16은 AI 지원이 개시되기 전에 출시될 가능성이 높아졌다. &lt;/li&gt;
&lt;li&gt;애플은 AI 학습에 Nvidia의 칩이 아닌 구글의 칩을 사용하는 것으로 알려져 눈길을 끌었다. Nvidia의 주가 하락에도 큰 영향을 끼친 것으로 보인다.&lt;/li&gt;
&lt;li&gt;macOS 15.1 베타가 외장저장장치에서 구동될 경우 프라이버시 보호 사유로 AI가 동작하지 않을 수도 있다고 한다.&lt;/li&gt;
&lt;li&gt;iOS 18.1에서 Safari에 요약 기능이 드디어 투입된다고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;기타 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플은 Apple TV의 광고 기반 구독 요금제 플랜을 계속 작업 중인 듯하다. &lt;em&gt;아마도 타사 OTT 광고 구독 요금제를 계속 벤치마크하는 모양이다.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;iOS 18.1에서 Apple Intelligence 지원이 본격화 될 모양인 듯하다. &lt;em&gt;이 말은 18.1 이전 버전에선 지원이 없다는 말 같은데 생각보다 좀 늦어진 모양이다.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;iPhone SE 4의 일부 OLED 패널은 LG디스플레이가 공급할 것 같다.&lt;/li&gt;
&lt;li&gt;iPad Pro에 탑재된 Tandem OLED 디스플레이 기술을 이용해 LG와 삼성이 마이크로 OLED 디스플레이 기술을 개발한 모양이고 추후 Vision Pro 차기 모델에 채택될 가능성이 있는 모양이다.&lt;/li&gt;
&lt;li&gt;iPhone 16에서 배터리 용량이 늘어날 것 같은데 특히 Pro 모델들에서 크게 늘어날 모양이다.&lt;/li&gt;
&lt;li&gt;iPhone 17에는 24메가픽셀의 전면 카메라 탑재 가능성 소문이 다시 돌고 있다.&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;h2&gt;소프트웨어 릴리즈 소식들&lt;/h2&gt;
&lt;p&gt;애플은 미국 시각 7월 29일 아래의 애플 플랫폼 OS 안정 버전을 릴리즈 했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6&lt;/li&gt;
&lt;li&gt;iOS 17.6&lt;/li&gt;
&lt;li&gt;iPadOS 17.6&lt;/li&gt;
&lt;li&gt;visionOS 1.3&lt;/li&gt;
&lt;li&gt;watchOS 10.6&lt;/li&gt;
&lt;li&gt;tvOS 17.6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기존 대로라면 마이너 업데이트인 만큼 상황을 보고 설치하라고 하겠지만 이번의 경우는 신기능은 거의 없는 버그 픽스 급 업데이트로 평가되는 만큼 설치에 큰 부담은 없을 것 같다. 딱히 알려진 새로운 기능은 스포츠 관련 콘텐츠 추가와 함께  M3 14인치 맥북프로에서 macOS 듀얼 모니터 지원 정도다.&lt;/p&gt;
&lt;p&gt;동시에 외에 애플은 차세대 OS들의 다음 마이너 업데이트를 준비하기 시작했는지 아래의 개발자 베타들을 함께 공개했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15.1 beta&lt;/li&gt;
&lt;li&gt;iOS 18.1 beta&lt;/li&gt;
&lt;li&gt;iPadOS 18.1 beta&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;첫 마이너 업데이트는 AI 초기 지원이 주목적으로 보이기에 관련된 플랫폼만 우선적으로 베타가 공개된 것 같은 느낌적인 느낌이다. 특히 AI 기능 사용을 위한 사전신청 및 대기명단 기능이 추가된 것 같다. 당연하겠지만 이번 개발자 베타의 AI 지원은 이미 애플이 밝힌 AI 작동이 가능한 최신형 디바이스에서만 사용이 가능하다.&lt;/p&gt;
&lt;p&gt;다만 첫 베타에서는 AI 지원이 탑재되지 않은 것으로 알려지고 있다.&lt;/p&gt;
&lt;p&gt;이 외에 아래의 소프트웨어 공개 소식이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari Technology Preview 200&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기타 앱 검토 가이드라인도 업데이트 되었다. 주로 최근에 반려 및 승인으로 화제가 되었던 PC 에뮬레이터 앱과 관련된 지침이다.&lt;/p&gt;
&lt;h2&gt;일반적인 애플 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;공급망 다변화&lt;/strong&gt;&lt;br/&gt;
iPhone의 주력 제품인 Pro 모델들도 인도에서 생산될 것 같다. 물론 여전히 중국은 iPhone의 최대 생산 국가일 테지만 적어도 중국 의존도를 일부 낮출 수는 있을 것이다. 중국 의존도가 높을 때 코로나 봉쇄로 피 맛을 크게 못 애플이라 공급망 다변화 속도를 늦출 이유도 없을 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;늦어지는 폴더블&lt;/strong&gt;&lt;br/&gt;
2025년을 목표로 개발 중이라던 폴더블 iPad(혹은 폴더블 Mac 하이브리드)는 대량 생산 관련 문제로 2026년으로 지연될 것 같다는 모양이다. 그리고 2026년에 폴더블 iPhone도 함께 로드맵에 들어가게 된 것 같다. 개인적으론 폴더블 Mac은 여전히 바보같은 발상이라고 생각한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AAPL 설마 고점?&lt;/strong&gt;&lt;br/&gt;
워렌 버핏의 버크셔 헤서웨이가 AAPL 지분을 거의 절반 가까이 매도한 것으로 확인되었다. 다만 애플 뿐만 아니라 BAC도 상당량의 지분을 매도한 것으로 보아 현금 확보가 주 목적인 것으로 보인다.&lt;/p&gt;
&lt;h2&gt;Apple Intelligence 관련 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플은 사용자 요청에 따라 AI 사용에 대한 개인 정보 보호 보고서를 공개한다고 한다.&lt;/li&gt;
&lt;li&gt;AI 통합 Siri는 올해 말 쯤 나올 iOS 18 버전 업데이트에서 지원될 것으로 보인다.&lt;/li&gt;
&lt;li&gt;덕분에 iPhone 16은 AI 지원이 개시되기 전에 출시될 가능성이 높아졌다. &lt;/li&gt;
&lt;li&gt;애플은 AI 학습에 Nvidia의 칩이 아닌 구글의 칩을 사용하는 것으로 알려져 눈길을 끌었다. Nvidia의 주가 하락에도 큰 영향을 끼친 것으로 보인다.&lt;/li&gt;
&lt;li&gt;macOS 15.1 베타가 외장저장장치에서 구동될 경우 프라이버시 보호 사유로 AI가 동작하지 않을 수도 있다고 한다.&lt;/li&gt;
&lt;li&gt;iOS 18.1에서 Safari에 요약 기능이 드디어 투입된다고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;기타 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플은 Apple TV의 광고 기반 구독 요금제 플랜을 계속 작업 중인 듯하다. &lt;em&gt;아마도 타사 OTT 광고 구독 요금제를 계속 벤치마크하는 모양이다.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;iOS 18.1에서 Apple Intelligence 지원이 본격화 될 모양인 듯하다. &lt;em&gt;이 말은 18.1 이전 버전에선 지원이 없다는 말 같은데 생각보다 좀 늦어진 모양이다.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;iPhone SE 4의 일부 OLED 패널은 LG디스플레이가 공급할 것 같다.&lt;/li&gt;
&lt;li&gt;iPad Pro에 탑재된 Tandem OLED 디스플레이 기술을 이용해 LG와 삼성이 마이크로 OLED 디스플레이 기술을 개발한 모양이고 추후 Vision Pro 차기 모델에 채택될 가능성이 있는 모양이다.&lt;/li&gt;
&lt;li&gt;iPhone 16에서 배터리 용량이 늘어날 것 같은데 특히 Pro 모델들에서 크게 늘어날 모양이다.&lt;/li&gt;
&lt;li&gt;iPhone 17에는 24메가픽셀의 전면 카메라 탑재 가능성 소문이 다시 돌고 있다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240804-00.html</guid>
      <pubDate>Sun, 04 Aug 2024 23:30:00 +0900</pubDate>
    </item>
    <item>
      <title>주식시장엔 아포칼립스가 도래한 것 같다</title>
      <link>https://seorenn.github.io/log/20240802-02.html</link>
      <description>&lt;p&gt;오늘도 미국의 여러 지표들이 나왔다. 특히 임금 관련 지표들이 너무 잘 나왔다. 여느 때였으면 호재를 부르짖으며 주식시장이 흥분했어야 할 그런 지표다.&lt;/p&gt;
&lt;p&gt;그런데 하필이면 고용 관련 지표들이 주식시장에 뭔가를 던진 듯하다. 안 그래도 뭔가 터져서 난리가 난 곳에 이번엔 운석이라도 떨어진 듯하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;미국 7월 비농업고용지수 114K (-65K)&lt;br/&gt;
미국 7월 실업률 4.3% (+0.2%)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;비농업고용지수가 예상치를 아득히 하회하면서 꼴아박은 것도, 실업률 상승세가 게속 이어지고 있는 것도 어제에 이어 또 침체의 늪에 빠져들어가는 모습을 떠오르게 만든다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="FedWatch" src="../upload/202408022329-e6d77a75.png" /&gt;
&lt;em&gt;FedWatch&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;도박판의 베팅이 단 이틀만에 엄청나게 바뀌었다. 9월 50bp 인하 확률이 25bp 인하 확률보다 더 커져버렸다. 금리 인하 판에 빅스텝이라니 쉽게 구경하긴 힘든 일이 벌어질 지도 모르겠다.&lt;/p&gt;
&lt;p&gt;포트폴리오의 어떤 종목에 찍힌 -20%라는 수치가 참 속이 쓰리다. 그래도 미장이라 기다리면 회복 되겠지만 좀 많이 오래 걸릴 것 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;오늘도 미국의 여러 지표들이 나왔다. 특히 임금 관련 지표들이 너무 잘 나왔다. 여느 때였으면 호재를 부르짖으며 주식시장이 흥분했어야 할 그런 지표다.&lt;/p&gt;
&lt;p&gt;그런데 하필이면 고용 관련 지표들이 주식시장에 뭔가를 던진 듯하다. 안 그래도 뭔가 터져서 난리가 난 곳에 이번엔 운석이라도 떨어진 듯하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;미국 7월 비농업고용지수 114K (-65K)&lt;br/&gt;
미국 7월 실업률 4.3% (+0.2%)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;비농업고용지수가 예상치를 아득히 하회하면서 꼴아박은 것도, 실업률 상승세가 게속 이어지고 있는 것도 어제에 이어 또 침체의 늪에 빠져들어가는 모습을 떠오르게 만든다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="FedWatch" src="../upload/202408022329-e6d77a75.png" /&gt;
&lt;em&gt;FedWatch&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;도박판의 베팅이 단 이틀만에 엄청나게 바뀌었다. 9월 50bp 인하 확률이 25bp 인하 확률보다 더 커져버렸다. 금리 인하 판에 빅스텝이라니 쉽게 구경하긴 힘든 일이 벌어질 지도 모르겠다.&lt;/p&gt;
&lt;p&gt;포트폴리오의 어떤 종목에 찍힌 -20%라는 수치가 참 속이 쓰리다. 그래도 미장이라 기다리면 회복 되겠지만 좀 많이 오래 걸릴 것 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240802-02.html</guid>
      <pubDate>Fri, 02 Aug 2024 23:33:00 +0900</pubDate>
    </item>
    <item>
      <title>애플 3분기 실적 발표</title>
      <link>https://seorenn.github.io/log/20240802-01.html</link>
      <description>&lt;p&gt;새벽에 애플의 회계년도 3분기 실적 발표 및 어닝 콜이 있었다. 간단하게 정리해 보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;매출: 857억 8천만 달러 (+4.87%)&lt;br/&gt;
순이익: 214억 5천만 달러 (+7.89%)&lt;br/&gt;
EPS: 1.4 달러 (+11.1%)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;애플은 애널리스트 예측치를 초과하며 좋은 실적을 발표했다. 특히 6월 기준으로 매출 신기록을 그리고 서비스 매출 사상 최고치 기록을 세웠다. 그리고 한 분기만에 실적을 성장으로 되돌리는 데 성공했다.&lt;/p&gt;
&lt;p&gt;제품 별 실적도 간단히 정리해 보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iPhone: 393억 달러 (-0.94%)&lt;br/&gt;
Mac: 70억 천만 달러 (+2.46%)&lt;br/&gt;
iPad: 71억 6천만 달러 (+23.63%)&lt;br/&gt;
기타 디바이스: 81억 달러 (-2.26%)&lt;br/&gt;
서비스: 242억 천만 달러 (+1.414%)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iPhone의 경우는 실적 하락 예상이 많았기에 크게 걱정은 안 한 부분이긴 하지만 애플의 매출에서 아주 큰 부분을 차지하기 때문에 무시할 수는 없다. 다행히도 이 정도면 큰 역성장은 아닌 것 같다. 특히 이제 신제품 발표가 얼마 안 남았고, iPhone 15가 전작보다 더 좋은 성과로 내고 있다는 점에서 다음 실적은 기대할 수 있을 것 같다.&lt;/p&gt;
&lt;p&gt;iPad와 서비스 부문은 이번 어닝 비트를 견인하는 데 큰 역할을 했다. 신형 iPad가 잘 팔렸다고 하니 다행이다. 개인적으로는 특히 서비스 실적이 계속 성장하고 있는 것에 큰 의미를 두고 있는데, 하드웨어는 혁신도 판매도 어느 정도 한계가 있으니 그 빈틈을 서비스로 채워야 한다고 생각하기 때문이다.&lt;/p&gt;
&lt;p&gt;어쨌거나 서비스 매출은 더 좋아질 가능성이 높다고 보인다. 특히 AI가 본격적으로 투입되면 결국 서비스 매출로도 이어질 거라 생각하기 때문이다. 애플은 AI에 대한 투자를 더욱 늘릴 거라고 했으니 기대해도 될 것 같다. 물론 그만큼 품질이 좋아야 하겠지만 말이다.&lt;/p&gt;
&lt;p&gt;그렇다면 중국 매출은 어떨까. 최근 애플의 발목을 잡고 있는 것은 아무래도 중국 리스크다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;중국 내 순이익: 147억 3천만 달러 (-6.54%)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;중국 내 실적 하락이 큰 구멍을 만들 것이라는 데는 다들 이의가 없을 것 같다. 실제로 이번 실적에서도 지난 분기 대비 역성장 했다.&lt;/p&gt;
&lt;p&gt;하지만 다르게 생각해야 할 점이 있다면 이번 매출이 어닝 비트를 기록했다는 점이다. 즉 중국 실적이 도와주지 않아도 충분히 성장할 수 있다는 의미가 아닐까. 희망론에 가깝긴 하지만 생각해 볼 수는 있을 것 같다.&lt;/p&gt;
&lt;h2&gt;이후의 애플&lt;/h2&gt;
&lt;p&gt;AI 선두주자들이 실적으로 고전 중인 지금 AI 후발주자인 애플에겐 어떤 결과가 기다리고 있을지 좀 궁금하기는 하다. 당장 AI 출시에 부정적인 EU와 중국에 대해서는 협의를 지속 한다지만 아직은 모르는 상황이기도 하다. 거기다 본격적으로 AI가 탑재되는 것은 내년 부터일 것 같고, 그래서 AI 지원 없이 iPhone 16이 출시될 거라 iPhone 매출이 실적을 얼마나 견인해 줄 지 좀 불안한 감도 없지는 않다.&lt;/p&gt;
&lt;p&gt;그 외에 반독점 이슈는 하나가 사라지면 또 하나가 나타나고 있어서 영원히 애플의 발목을 잡을 지도 모르겠다는 생각이 든다. 특히 유럽의 대응은 좀 과하다고 느껴진다.&lt;/p&gt;
&lt;p&gt;어쨌든 주가 측면에선 당장은 부정적이진 않을 것 같다. 신제품 효과가 매출을 어느 정도 높여줄 수 있다는 기대도 있고, 애플이 밝힌 대로 320억 달러 이상이 주주환원으로 돌아올 것 같으니 말이다.&lt;/p&gt;
&lt;p&gt;AI에 대한 투자를 지속적으로 늘려가겠다고 한 부분은 아직은 알 수가 없다. 실제 결과물이 얼마나 의미가 있는지 확인이 되어야 할 테니 말이다. 다만 AI에 대해서는 이제 하나씩 실제로 공개될 예정이고 이제부터 판단이 시작될 것이다.&lt;/p&gt;
&lt;p&gt;결론적으로 애플에 장및빛 미래는 Apple Intelligence에 달린 것 같다. 다만 주주환원 측면만 보면 아직 투자 대상으로써 AAPL은 1티어이지 않을까 생각된다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;새벽에 애플의 회계년도 3분기 실적 발표 및 어닝 콜이 있었다. 간단하게 정리해 보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;매출: 857억 8천만 달러 (+4.87%)&lt;br/&gt;
순이익: 214억 5천만 달러 (+7.89%)&lt;br/&gt;
EPS: 1.4 달러 (+11.1%)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;애플은 애널리스트 예측치를 초과하며 좋은 실적을 발표했다. 특히 6월 기준으로 매출 신기록을 그리고 서비스 매출 사상 최고치 기록을 세웠다. 그리고 한 분기만에 실적을 성장으로 되돌리는 데 성공했다.&lt;/p&gt;
&lt;p&gt;제품 별 실적도 간단히 정리해 보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iPhone: 393억 달러 (-0.94%)&lt;br/&gt;
Mac: 70억 천만 달러 (+2.46%)&lt;br/&gt;
iPad: 71억 6천만 달러 (+23.63%)&lt;br/&gt;
기타 디바이스: 81억 달러 (-2.26%)&lt;br/&gt;
서비스: 242억 천만 달러 (+1.414%)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iPhone의 경우는 실적 하락 예상이 많았기에 크게 걱정은 안 한 부분이긴 하지만 애플의 매출에서 아주 큰 부분을 차지하기 때문에 무시할 수는 없다. 다행히도 이 정도면 큰 역성장은 아닌 것 같다. 특히 이제 신제품 발표가 얼마 안 남았고, iPhone 15가 전작보다 더 좋은 성과로 내고 있다는 점에서 다음 실적은 기대할 수 있을 것 같다.&lt;/p&gt;
&lt;p&gt;iPad와 서비스 부문은 이번 어닝 비트를 견인하는 데 큰 역할을 했다. 신형 iPad가 잘 팔렸다고 하니 다행이다. 개인적으로는 특히 서비스 실적이 계속 성장하고 있는 것에 큰 의미를 두고 있는데, 하드웨어는 혁신도 판매도 어느 정도 한계가 있으니 그 빈틈을 서비스로 채워야 한다고 생각하기 때문이다.&lt;/p&gt;
&lt;p&gt;어쨌거나 서비스 매출은 더 좋아질 가능성이 높다고 보인다. 특히 AI가 본격적으로 투입되면 결국 서비스 매출로도 이어질 거라 생각하기 때문이다. 애플은 AI에 대한 투자를 더욱 늘릴 거라고 했으니 기대해도 될 것 같다. 물론 그만큼 품질이 좋아야 하겠지만 말이다.&lt;/p&gt;
&lt;p&gt;그렇다면 중국 매출은 어떨까. 최근 애플의 발목을 잡고 있는 것은 아무래도 중국 리스크다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;중국 내 순이익: 147억 3천만 달러 (-6.54%)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;중국 내 실적 하락이 큰 구멍을 만들 것이라는 데는 다들 이의가 없을 것 같다. 실제로 이번 실적에서도 지난 분기 대비 역성장 했다.&lt;/p&gt;
&lt;p&gt;하지만 다르게 생각해야 할 점이 있다면 이번 매출이 어닝 비트를 기록했다는 점이다. 즉 중국 실적이 도와주지 않아도 충분히 성장할 수 있다는 의미가 아닐까. 희망론에 가깝긴 하지만 생각해 볼 수는 있을 것 같다.&lt;/p&gt;
&lt;h2&gt;이후의 애플&lt;/h2&gt;
&lt;p&gt;AI 선두주자들이 실적으로 고전 중인 지금 AI 후발주자인 애플에겐 어떤 결과가 기다리고 있을지 좀 궁금하기는 하다. 당장 AI 출시에 부정적인 EU와 중국에 대해서는 협의를 지속 한다지만 아직은 모르는 상황이기도 하다. 거기다 본격적으로 AI가 탑재되는 것은 내년 부터일 것 같고, 그래서 AI 지원 없이 iPhone 16이 출시될 거라 iPhone 매출이 실적을 얼마나 견인해 줄 지 좀 불안한 감도 없지는 않다.&lt;/p&gt;
&lt;p&gt;그 외에 반독점 이슈는 하나가 사라지면 또 하나가 나타나고 있어서 영원히 애플의 발목을 잡을 지도 모르겠다는 생각이 든다. 특히 유럽의 대응은 좀 과하다고 느껴진다.&lt;/p&gt;
&lt;p&gt;어쨌든 주가 측면에선 당장은 부정적이진 않을 것 같다. 신제품 효과가 매출을 어느 정도 높여줄 수 있다는 기대도 있고, 애플이 밝힌 대로 320억 달러 이상이 주주환원으로 돌아올 것 같으니 말이다.&lt;/p&gt;
&lt;p&gt;AI에 대한 투자를 지속적으로 늘려가겠다고 한 부분은 아직은 알 수가 없다. 실제 결과물이 얼마나 의미가 있는지 확인이 되어야 할 테니 말이다. 다만 AI에 대해서는 이제 하나씩 실제로 공개될 예정이고 이제부터 판단이 시작될 것이다.&lt;/p&gt;
&lt;p&gt;결론적으로 애플에 장및빛 미래는 Apple Intelligence에 달린 것 같다. 다만 주주환원 측면만 보면 아직 투자 대상으로써 AAPL은 1티어이지 않을까 생각된다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240802-01.html</guid>
      <pubDate>Fri, 02 Aug 2024 16:22:00 +0900</pubDate>
    </item>
    <item>
      <title>금리를 인하하는 게 나았을까?</title>
      <link>https://seorenn.github.io/log/20240802-00.html</link>
      <description>&lt;p&gt;FOMC가 끝나자마자 다시 분위기가 반전되는 지표들이 등장했다. 바로 제조업 PMI와 실업수당 지표다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 7월 제조업 PMI 49.6 (-2)&lt;/li&gt;
&lt;li&gt;미국 7월 ISM 제조업 PMI 46.8 (-1.7)&lt;/li&gt;
&lt;li&gt;신규 실업수당청구건수 249K (+14K)&lt;/li&gt;
&lt;li&gt;연속 실업수당청구건수 1877K (+33K)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;두 굵직한 제조업 PMI가 모두 50 이하로 떨어지며 위축세를 증명했다. 거기다 실업수당도 더 많이 타가는 모습으로 봐서 역시 최근 고용 둔화 추세가 여기서도 보이고 있다.&lt;/p&gt;
&lt;h2&gt;그렇다면 이건... 역시나 침체?!&lt;/h2&gt;
&lt;p&gt;물론 침체 판단 기준은 GDP가 핵심이 될 테니 좀 더 기다려야 될 테지만 어쨌든 금리 인하가 확정(?)된 마당에 이러면 좀 불안해지는 것도 사실이기도 하다. 마치 "이번에 금리 인하를 했었어야 했어"와 같은 반응을 이끌어 내는 것 같다.&lt;/p&gt;
&lt;p&gt;덕분에 어제 말아 올리는 듯하던 기술주 증시는 다시 되돌림을 당하는 중인 것 같다. 줬다 뺐는 건 역시나 기분 참 나쁜 일이다.&lt;/p&gt;
&lt;p&gt;그나마 채권 금리가 일제히 떨어지고 있어서 채권 ETF 들이 오르고 있다는 것은 위안거리가 되는 것 같다. 참 오랜만에 헤지 수단으로써 동작하는 신선한(?) 모습이다.&lt;/p&gt;
&lt;h2&gt;잊으면 안 되는 거&lt;/h2&gt;
&lt;p&gt;사실 지표에 관심이 좀 쏠렸었는데 이것 말고도 중요한 것들이 여럿 있다. 그 중에 특히 최근에 다시 불안해지고 있는 중동 정세를 놓치면 안 될 것 같다. 아무래도 안 좋은 방향으로 흘러갈 것 같다.&lt;/p&gt;
&lt;p&gt;결국 필요한 것은 위험에 대한 대비다.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"대비라니 그런 걸 할 수 있을 리가 없잖아!" - 내 머리 속 외침&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;오늘도 울리는 이 외침이 참으로 시끄럽다.&lt;/p&gt;
&lt;p&gt;어쨌거나 침체 걱정을 좀 덜 하게 되는 이유는 중동이 돌아가는 사정 때문인 것 같기도 하다. 답답한 일인 건 마찬가지지만 말이다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;FOMC가 끝나자마자 다시 분위기가 반전되는 지표들이 등장했다. 바로 제조업 PMI와 실업수당 지표다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 7월 제조업 PMI 49.6 (-2)&lt;/li&gt;
&lt;li&gt;미국 7월 ISM 제조업 PMI 46.8 (-1.7)&lt;/li&gt;
&lt;li&gt;신규 실업수당청구건수 249K (+14K)&lt;/li&gt;
&lt;li&gt;연속 실업수당청구건수 1877K (+33K)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;두 굵직한 제조업 PMI가 모두 50 이하로 떨어지며 위축세를 증명했다. 거기다 실업수당도 더 많이 타가는 모습으로 봐서 역시 최근 고용 둔화 추세가 여기서도 보이고 있다.&lt;/p&gt;
&lt;h2&gt;그렇다면 이건... 역시나 침체?!&lt;/h2&gt;
&lt;p&gt;물론 침체 판단 기준은 GDP가 핵심이 될 테니 좀 더 기다려야 될 테지만 어쨌든 금리 인하가 확정(?)된 마당에 이러면 좀 불안해지는 것도 사실이기도 하다. 마치 "이번에 금리 인하를 했었어야 했어"와 같은 반응을 이끌어 내는 것 같다.&lt;/p&gt;
&lt;p&gt;덕분에 어제 말아 올리는 듯하던 기술주 증시는 다시 되돌림을 당하는 중인 것 같다. 줬다 뺐는 건 역시나 기분 참 나쁜 일이다.&lt;/p&gt;
&lt;p&gt;그나마 채권 금리가 일제히 떨어지고 있어서 채권 ETF 들이 오르고 있다는 것은 위안거리가 되는 것 같다. 참 오랜만에 헤지 수단으로써 동작하는 신선한(?) 모습이다.&lt;/p&gt;
&lt;h2&gt;잊으면 안 되는 거&lt;/h2&gt;
&lt;p&gt;사실 지표에 관심이 좀 쏠렸었는데 이것 말고도 중요한 것들이 여럿 있다. 그 중에 특히 최근에 다시 불안해지고 있는 중동 정세를 놓치면 안 될 것 같다. 아무래도 안 좋은 방향으로 흘러갈 것 같다.&lt;/p&gt;
&lt;p&gt;결국 필요한 것은 위험에 대한 대비다.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"대비라니 그런 걸 할 수 있을 리가 없잖아!" - 내 머리 속 외침&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;오늘도 울리는 이 외침이 참으로 시끄럽다.&lt;/p&gt;
&lt;p&gt;어쨌거나 침체 걱정을 좀 덜 하게 되는 이유는 중동이 돌아가는 사정 때문인 것 같기도 하다. 답답한 일인 건 마찬가지지만 말이다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240802-00.html</guid>
      <pubDate>Fri, 02 Aug 2024 00:18:00 +0900</pubDate>
    </item>
    <item>
      <title>미 연준 7월 FOMC에서 기준금리 5.50%로 동결 결정</title>
      <link>https://seorenn.github.io/log/20240801-00.html</link>
      <description>&lt;p&gt;연준은 미국 시각 7월 31일 FOMC를 통해 미국의 기준금리를 종전과 동일한 5.25% ~ 5.50%로 동결 결정했다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="연준 기준금리 추이" src="../upload/202408011026-1476323e.png" /&gt;
&lt;em&gt;연준 기준금리 추이&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;2023년 7월 마지막으로 금리가 오른 이후 8회 연속 동결이다. 기준금리 자체는 만장일치로 동결 의견이 모인 모양이다. &lt;/p&gt;
&lt;p&gt;일부 유력 매체 등에서는 7월 인하가 주장되거나 예측되기도 했고, 회의 전날에 발표된 고용 지표들이 모두 둔화세를 보이면서 인하 가능성이 올라가는 듯했지만, 그래도 대다수가 예상한 대로의 결과였다.&lt;/p&gt;
&lt;p&gt;파월은 성명 및 인터뷰를 통해 고용 둔화에 대해 인정하지만 실업률이 아직은 위험하진 않은 수준으로 판단하는 것 같고 물가 추세에 대해서도 아직은 자신이 없다는 듯한 입장을 보이며 동결 이유를 설명했다.&lt;/p&gt;
&lt;p&gt;다만 이번 회의에서 금리 인하에 대한 논의가 오갔다는 것이 알려졌다. 그리고 &lt;strong&gt;9월 인하 가능성&lt;/strong&gt;을 열어두는 발언도 이어졌다. 아마도 물가와 고용 지표가 현 추세에서 벗어나지만 않는다면 9월에는 인하할 것이라는 의미로 읽혀진다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;결론: 연준은 선제적 조치 보다는 확실한 조치를 선호하는 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;여담&lt;/h2&gt;
&lt;p&gt;이번 동결에 대해 주식시장에선 긍정적인 반응인 것 같다. 그야 주식시장에선 예상대로 움직이는 것을 선호할 테니 말이다. 만약 갑작스런 금리 인하가 있었다면 오히려 침체 위기설을 부풀리게 될 위험성이 있기도 하다. 다행이라고 생각할까? 물론 9월에도 예상대로 움직여 준다면 다행일 거다.&lt;/p&gt;
&lt;p&gt;확률은 적겠지만 9월 FOMC 이전에 경기가 갑자기 확 꺾이면 오히려 연준 책임론이 불거지고 트럼프의 화살이 집중적으로 날아드는 무서운 광경을 목격할 수 있을 것 같다. 반대로 오히려 경기가 좋아지면 또 트럼프는 신나서 "금리 놔둬라"고 협박하는 끔찍한 광경을 목격할 수 있을 지도 모르겠다. 그럼 연준의 예측대로 되면... 그래도 트럼프는 "대선 전까진 금리 놔둬라"고 공격할 게 뻔하다. 사실 트럼프는 뭐가 어떻게 되든 연준을 공격할 거다. 파월이 그저 안쓰럽다.&lt;/p&gt;
&lt;p&gt;그러니 내가 파월이라면 9월에는 뭐가 어떻게 되든 금리 인하를 할 거다. 적장에 침이라도 뱉고 죽어야지 안 그러면 억울해서 어떻게 눈을 감을 수... 아 아니다 안 죽는 게 최고다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;연준은 미국 시각 7월 31일 FOMC를 통해 미국의 기준금리를 종전과 동일한 5.25% ~ 5.50%로 동결 결정했다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="연준 기준금리 추이" src="../upload/202408011026-1476323e.png" /&gt;
&lt;em&gt;연준 기준금리 추이&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;2023년 7월 마지막으로 금리가 오른 이후 8회 연속 동결이다. 기준금리 자체는 만장일치로 동결 의견이 모인 모양이다. &lt;/p&gt;
&lt;p&gt;일부 유력 매체 등에서는 7월 인하가 주장되거나 예측되기도 했고, 회의 전날에 발표된 고용 지표들이 모두 둔화세를 보이면서 인하 가능성이 올라가는 듯했지만, 그래도 대다수가 예상한 대로의 결과였다.&lt;/p&gt;
&lt;p&gt;파월은 성명 및 인터뷰를 통해 고용 둔화에 대해 인정하지만 실업률이 아직은 위험하진 않은 수준으로 판단하는 것 같고 물가 추세에 대해서도 아직은 자신이 없다는 듯한 입장을 보이며 동결 이유를 설명했다.&lt;/p&gt;
&lt;p&gt;다만 이번 회의에서 금리 인하에 대한 논의가 오갔다는 것이 알려졌다. 그리고 &lt;strong&gt;9월 인하 가능성&lt;/strong&gt;을 열어두는 발언도 이어졌다. 아마도 물가와 고용 지표가 현 추세에서 벗어나지만 않는다면 9월에는 인하할 것이라는 의미로 읽혀진다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;결론: 연준은 선제적 조치 보다는 확실한 조치를 선호하는 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;여담&lt;/h2&gt;
&lt;p&gt;이번 동결에 대해 주식시장에선 긍정적인 반응인 것 같다. 그야 주식시장에선 예상대로 움직이는 것을 선호할 테니 말이다. 만약 갑작스런 금리 인하가 있었다면 오히려 침체 위기설을 부풀리게 될 위험성이 있기도 하다. 다행이라고 생각할까? 물론 9월에도 예상대로 움직여 준다면 다행일 거다.&lt;/p&gt;
&lt;p&gt;확률은 적겠지만 9월 FOMC 이전에 경기가 갑자기 확 꺾이면 오히려 연준 책임론이 불거지고 트럼프의 화살이 집중적으로 날아드는 무서운 광경을 목격할 수 있을 것 같다. 반대로 오히려 경기가 좋아지면 또 트럼프는 신나서 "금리 놔둬라"고 협박하는 끔찍한 광경을 목격할 수 있을 지도 모르겠다. 그럼 연준의 예측대로 되면... 그래도 트럼프는 "대선 전까진 금리 놔둬라"고 공격할 게 뻔하다. 사실 트럼프는 뭐가 어떻게 되든 연준을 공격할 거다. 파월이 그저 안쓰럽다.&lt;/p&gt;
&lt;p&gt;그러니 내가 파월이라면 9월에는 뭐가 어떻게 되든 금리 인하를 할 거다. 적장에 침이라도 뱉고 죽어야지 안 그러면 억울해서 어떻게 눈을 감을 수... 아 아니다 안 죽는 게 최고다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240801-00.html</guid>
      <pubDate>Thu, 01 Aug 2024 10:45:00 +0900</pubDate>
    </item>
    <item>
      <title>크롬에서 다크 모드 혹은 라이트 모드 시험해 보기</title>
      <link>https://seorenn.github.io/article/chrome-debug-color-scheme.html</link>
      <description>&lt;p&gt;웹 페이지에서 CSS를 통해 다크 모드 혹은 라이트 모드를 지원하려 할 때는 물론 시스템의 설정을 바꿔서 간단하게 보면서 개발할 수는 있다. 하지만 웹 브라우저를 떠나서 계속 바꾸는 계 귀찮거나 시스템에 무리를 줄 가능성은 충분히 있다. 그래서 구글 크롬에서 이 다크 모드 혹은 라이트 모드를 쉽게 바꿔서 시험해 볼 수 있는 기능이 있나 찾아봤고 실제로 존재하기에 그 방법을 정리해 본다.&lt;/p&gt;
&lt;p&gt;참고로 이 글은 macOS에서 다크 모드를 설정해 둔 상태로 라이트 모드의 CSS를 테스트 해보려는 상황을 가정하고 있다.&lt;/p&gt;
&lt;h2&gt;크롬에서 다크 모드 혹은 라이트 모드 시험해 보기&lt;/h2&gt;
&lt;p&gt;우선 크롬 개발자 도구에서 '렌더링' 도구를 표시해야 한다. macOS 기준으로 크롬에서 개발자 도구를 열고 개발자 도구 메뉴에서 '도구 더보기 - 렌더링'을 선택하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="크롬 개발자 도구에서 렌더링 도구를 추가하는 화면" src="../upload/202407301420-8b62b531.png" /&gt;
&lt;em&gt;크롬 개발자 도구에서 렌더링 도구를 추가하는 화면&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이렇게 하면 렌더링 도구 페이지가 뜬다. 이 페이지에서 스크롤을 내리다 보면 'CSS 미디어 기능 prefers-color-scheme 에뮬레이션' 항목을 찾을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CSS 미디어 기능 prefers-color-scheme 에뮬레이션" src="../upload/202407301421-3944d7ba.png" /&gt;
&lt;em&gt;CSS 미디어 기능 prefers-color-scheme 에뮬레이션&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;아마도 별 다른 설정이 없는 한 드롭박스 버튼에 '에뮬레이션 없음'이 표시되어 있을 것이다. 이 드롭박스 버튼을 눌러보면 뭘 어떻게 해야 하는지 바로 알 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="컬러 스킴 선택 화면" src="../upload/202407301422-5b696b8b.png" /&gt;
&lt;em&gt;컬러 스킴 선택 화면&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이렇게 다크 모드 혹은 라이트 모드 등 원하는 모드로 바로 에뮬레이션 할 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="라이트 모드로 설정한 상태" src="../upload/202407301423-e4e04be3.png" /&gt;
&lt;em&gt;라이트 모드로 설정한 상태&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;사족&lt;/h2&gt;
&lt;p&gt;컬러 스킴을 바꾸는 과정은 그다지 어렵거나 힘들진 않다. 하지만 좀 더 쉽게 할 수 있게 컬러 스킴 관련 부분만 접근성 좋은 위치에 배치해 줬으면 하는 바램도 없지는 않다. 안 그래도 렌더링 도구가 제법 크기를 잡아먹기 때문에 필요할 때마다 꺼내 쓰는 것도 좀 귀찮은 일인 것 같으니 말이다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;웹 페이지에서 CSS를 통해 다크 모드 혹은 라이트 모드를 지원하려 할 때는 물론 시스템의 설정을 바꿔서 간단하게 보면서 개발할 수는 있다. 하지만 웹 브라우저를 떠나서 계속 바꾸는 계 귀찮거나 시스템에 무리를 줄 가능성은 충분히 있다. 그래서 구글 크롬에서 이 다크 모드 혹은 라이트 모드를 쉽게 바꿔서 시험해 볼 수 있는 기능이 있나 찾아봤고 실제로 존재하기에 그 방법을 정리해 본다.&lt;/p&gt;
&lt;p&gt;참고로 이 글은 macOS에서 다크 모드를 설정해 둔 상태로 라이트 모드의 CSS를 테스트 해보려는 상황을 가정하고 있다.&lt;/p&gt;
&lt;h2&gt;크롬에서 다크 모드 혹은 라이트 모드 시험해 보기&lt;/h2&gt;
&lt;p&gt;우선 크롬 개발자 도구에서 '렌더링' 도구를 표시해야 한다. macOS 기준으로 크롬에서 개발자 도구를 열고 개발자 도구 메뉴에서 '도구 더보기 - 렌더링'을 선택하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="크롬 개발자 도구에서 렌더링 도구를 추가하는 화면" src="../upload/202407301420-8b62b531.png" /&gt;
&lt;em&gt;크롬 개발자 도구에서 렌더링 도구를 추가하는 화면&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이렇게 하면 렌더링 도구 페이지가 뜬다. 이 페이지에서 스크롤을 내리다 보면 'CSS 미디어 기능 prefers-color-scheme 에뮬레이션' 항목을 찾을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CSS 미디어 기능 prefers-color-scheme 에뮬레이션" src="../upload/202407301421-3944d7ba.png" /&gt;
&lt;em&gt;CSS 미디어 기능 prefers-color-scheme 에뮬레이션&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;아마도 별 다른 설정이 없는 한 드롭박스 버튼에 '에뮬레이션 없음'이 표시되어 있을 것이다. 이 드롭박스 버튼을 눌러보면 뭘 어떻게 해야 하는지 바로 알 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="컬러 스킴 선택 화면" src="../upload/202407301422-5b696b8b.png" /&gt;
&lt;em&gt;컬러 스킴 선택 화면&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이렇게 다크 모드 혹은 라이트 모드 등 원하는 모드로 바로 에뮬레이션 할 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="라이트 모드로 설정한 상태" src="../upload/202407301423-e4e04be3.png" /&gt;
&lt;em&gt;라이트 모드로 설정한 상태&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;사족&lt;/h2&gt;
&lt;p&gt;컬러 스킴을 바꾸는 과정은 그다지 어렵거나 힘들진 않다. 하지만 좀 더 쉽게 할 수 있게 컬러 스킴 관련 부분만 접근성 좋은 위치에 배치해 줬으면 하는 바램도 없지는 않다. 안 그래도 렌더링 도구가 제법 크기를 잡아먹기 때문에 필요할 때마다 꺼내 쓰는 것도 좀 귀찮은 일인 것 같으니 말이다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/chrome-debug-color-scheme.html</guid>
      <pubDate>Wed, 31 Jul 2024 16:46:00 +0900</pubDate>
    </item>
    <item>
      <title>일본은행 기준금리 0.25%로 인상</title>
      <link>https://seorenn.github.io/log/20240731-00.html</link>
      <description>&lt;p&gt;일본은행(BOJ)은 7월의 마지막 날 열린 통화정책회의에서 기준금리를 종전 0.10%에서 0.25%로 15bp 인상했다. 기존 -0.10%에서 0.10%로 올리는 역사적인 날 이후 4개월 만에 또다시 기준금리를 올렸다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="일본 기준금리 추이" src="../upload/202407311430-056cbb7e.png" /&gt;
&lt;em&gt;일본 기준금리 추이&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;동시에 채권 매입도 줄인다고 했기에 국채 금리도 따라서 상승하게 될 것 같다.&lt;/p&gt;
&lt;p&gt;BOJ는 이번 금리인상이 연쇄인상의 시작은 아니라고 선을 그었다. 최근 미 기술주의 연속 폭락이 금리 인상에 따른 엔화 환율 하락과 맞물린 엔케리트레이드 청산이라는 설이 많았던 것 같지만, 다음 인상에 대해서는 선이 그인 만큼 맞든 틀리든 엔케리트레이드의 청산 비스무리한(?) 일은 이걸로 마무리 될 가능성이 높아보인다. 이번 조정은 선반영에 가까웠으니 말이다.&lt;/p&gt;
&lt;p&gt;이제 엔화 환율은 좀 더 오르는 걸까? 이 일이 한국에는 과연 좋은 일일까 안 좋은 일일까. 엔화의 가치가 커지면 적어도 국내 수출 위주의 기업 입장에선 나쁘진 않은 일 같다. 하지만 그건 대기업에 한정된 이야기일 것이라 한국 경제에는 좋은 일일 지는 잘 모르겠다. 무엇보다 원화 환율도 엔화를 따라가는 경우가 많아서 어떻게 될 지를 도무지 모르겠다.&lt;/p&gt;
&lt;p&gt;선반영의 끝 외에도 주식시장에선 불확실성 해소로 보는 경향이 있을 것 같다. 미장의 영향을 받아 국장도 제법 연속 하락했는데 다시 반등해 줄 지도 모르겠다. &lt;em&gt;물론 희망회로일 뿐이다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;그나저나 미국이 일본의 금리 인상을 억누르고 있었을 텐데 그럼에도 올렸다는 것은 뭔가 위험한 조짐이 있다는 것은 아닐지 의심해 볼 수는 있을 것 같다. 글로벌 침체라도 터지는 것일까? &lt;em&gt;아니 이미 침체인가?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;결론은... 이번 일의 결론을 예측 하는 것은 좀 성급할 것 같다. 그냥 사태를 당분간 지켜봐야 할 것 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;일본은행(BOJ)은 7월의 마지막 날 열린 통화정책회의에서 기준금리를 종전 0.10%에서 0.25%로 15bp 인상했다. 기존 -0.10%에서 0.10%로 올리는 역사적인 날 이후 4개월 만에 또다시 기준금리를 올렸다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="일본 기준금리 추이" src="../upload/202407311430-056cbb7e.png" /&gt;
&lt;em&gt;일본 기준금리 추이&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;동시에 채권 매입도 줄인다고 했기에 국채 금리도 따라서 상승하게 될 것 같다.&lt;/p&gt;
&lt;p&gt;BOJ는 이번 금리인상이 연쇄인상의 시작은 아니라고 선을 그었다. 최근 미 기술주의 연속 폭락이 금리 인상에 따른 엔화 환율 하락과 맞물린 엔케리트레이드 청산이라는 설이 많았던 것 같지만, 다음 인상에 대해서는 선이 그인 만큼 맞든 틀리든 엔케리트레이드의 청산 비스무리한(?) 일은 이걸로 마무리 될 가능성이 높아보인다. 이번 조정은 선반영에 가까웠으니 말이다.&lt;/p&gt;
&lt;p&gt;이제 엔화 환율은 좀 더 오르는 걸까? 이 일이 한국에는 과연 좋은 일일까 안 좋은 일일까. 엔화의 가치가 커지면 적어도 국내 수출 위주의 기업 입장에선 나쁘진 않은 일 같다. 하지만 그건 대기업에 한정된 이야기일 것이라 한국 경제에는 좋은 일일 지는 잘 모르겠다. 무엇보다 원화 환율도 엔화를 따라가는 경우가 많아서 어떻게 될 지를 도무지 모르겠다.&lt;/p&gt;
&lt;p&gt;선반영의 끝 외에도 주식시장에선 불확실성 해소로 보는 경향이 있을 것 같다. 미장의 영향을 받아 국장도 제법 연속 하락했는데 다시 반등해 줄 지도 모르겠다. &lt;em&gt;물론 희망회로일 뿐이다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;그나저나 미국이 일본의 금리 인상을 억누르고 있었을 텐데 그럼에도 올렸다는 것은 뭔가 위험한 조짐이 있다는 것은 아닐지 의심해 볼 수는 있을 것 같다. 글로벌 침체라도 터지는 것일까? &lt;em&gt;아니 이미 침체인가?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;결론은... 이번 일의 결론을 예측 하는 것은 좀 성급할 것 같다. 그냥 사태를 당분간 지켜봐야 할 것 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240731-00.html</guid>
      <pubDate>Wed, 31 Jul 2024 15:28:00 +0900</pubDate>
    </item>
    <item>
      <title>민주당의 코리아 부스터 프로젝트?</title>
      <link>https://seorenn.github.io/log/20240730-00.html</link>
      <description>&lt;p&gt;윤석열 정부의 인센티브 기반 밸류업 정책에 한숨만 나오고 있던 와중에 갑자기 민주당이 밸류업 정책을 뛰어넘겠다며 '&lt;a href="https://news.einfomax.co.kr/news/articleView.html?idxno=4319126" target="_blank"&gt;코리아 부스터 프로젝트📎&lt;/a&gt;'를 추진하겠다고 한다. 그래서인지 굉장히 반가운 내용 같아서 기사를 읽어봤다.&lt;/p&gt;
&lt;p&gt;이 프로젝트는 대략 다음 다섯 가지 정책으로 구성되는 듯하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이사의 충실의무 대상을 전체 주주로 확대&lt;/li&gt;
&lt;li&gt;지배주주의 영향을 받지 않는 독립 이사 선임 의무화&lt;/li&gt;
&lt;li&gt;감사 위원인 이사를 다른 이사와 분리해서 선출하는 방식을 단계적으로 확대&lt;/li&gt;
&lt;li&gt;대기업의 집중 투표제를 활성화&lt;/li&gt;
&lt;li&gt;상장회사의 전자투표와 위임장 도입 의무화&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;첫 부분은 현재 한창 거론되고 있는 상법 개정이 된다는 가정 하에서의 이야기이므로 결국 상법 개정도 포함된다고 볼 수 있다. 민주당발 상법 걔정은 '비례적' 표현이 들어가 있는데 전체 주주로 확대되면 의미상 뭐가 다른 지는 잘 모르겠다.&lt;/p&gt;
&lt;p&gt;독립 이사의 경우 경영진이 아닌 주주를 대표하는 성격의 이사로 보인다. 그 다음 항목도 역시 기업 경영진과 감사 위원 사이의 독립성을 강화하려는 것으로 보인다.&lt;/p&gt;
&lt;p&gt;집중 투표제는 선입하려는 이사의 수 만큼 의결권을 부여하는 것인데 어떤 효과일 지는 잘 모르겠다. 그저 여러 이사 선임 건을 하나로 묶어서 투표하는 게 아니라 각각의 이사 선입에 투표할 수 있다는 그런 의미로 읽혀진다. 아마도 앞의 독립 이사 선출과 관련해서 생각해야 될 것 같기도 하다.&lt;/p&gt;
&lt;p&gt;마지막은 투표 접근성 강화로 보인다. 현재는 주주총회를 한다며 대주주를 제외한 주주의 참여를 막거나 회의장을 주주가 알 수 없게 정하는 등 온갖 편법이 난무하던 상황이라 정말 중요한 정책이라고 생각한다.&lt;/p&gt;
&lt;p&gt;결과적으로 민주당의 안을 정리하자면 다음 한 문구가 될 것 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;소액 주주 권리 강화&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;'회사의 주인은 주주'라는 코리아 디스카운트 해소를 위해 정말 딱 필요한 최소한의 그것이 모인 느낌이다. 물론 이것 만으로 모든 것이 해결되진 않을 거다. 개인적으론 기업의 참여를 강제할 '강화된 패널티'도 꼭 필요하다고 생각한다. 대주주가 소액 주주에게 피해를 입혔을 때 과연 얼마나 피해를 보상해 줘야 할 지 좋은 본보기가 꼭 필요할 것 같다.&lt;/p&gt;
&lt;p&gt;그리고 제발 배당소득세 분리과세 좀 제발 젭알 플리즈...&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;윤석열 정부의 인센티브 기반 밸류업 정책에 한숨만 나오고 있던 와중에 갑자기 민주당이 밸류업 정책을 뛰어넘겠다며 '&lt;a href="https://news.einfomax.co.kr/news/articleView.html?idxno=4319126" target="_blank"&gt;코리아 부스터 프로젝트📎&lt;/a&gt;'를 추진하겠다고 한다. 그래서인지 굉장히 반가운 내용 같아서 기사를 읽어봤다.&lt;/p&gt;
&lt;p&gt;이 프로젝트는 대략 다음 다섯 가지 정책으로 구성되는 듯하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이사의 충실의무 대상을 전체 주주로 확대&lt;/li&gt;
&lt;li&gt;지배주주의 영향을 받지 않는 독립 이사 선임 의무화&lt;/li&gt;
&lt;li&gt;감사 위원인 이사를 다른 이사와 분리해서 선출하는 방식을 단계적으로 확대&lt;/li&gt;
&lt;li&gt;대기업의 집중 투표제를 활성화&lt;/li&gt;
&lt;li&gt;상장회사의 전자투표와 위임장 도입 의무화&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;첫 부분은 현재 한창 거론되고 있는 상법 개정이 된다는 가정 하에서의 이야기이므로 결국 상법 개정도 포함된다고 볼 수 있다. 민주당발 상법 걔정은 '비례적' 표현이 들어가 있는데 전체 주주로 확대되면 의미상 뭐가 다른 지는 잘 모르겠다.&lt;/p&gt;
&lt;p&gt;독립 이사의 경우 경영진이 아닌 주주를 대표하는 성격의 이사로 보인다. 그 다음 항목도 역시 기업 경영진과 감사 위원 사이의 독립성을 강화하려는 것으로 보인다.&lt;/p&gt;
&lt;p&gt;집중 투표제는 선입하려는 이사의 수 만큼 의결권을 부여하는 것인데 어떤 효과일 지는 잘 모르겠다. 그저 여러 이사 선임 건을 하나로 묶어서 투표하는 게 아니라 각각의 이사 선입에 투표할 수 있다는 그런 의미로 읽혀진다. 아마도 앞의 독립 이사 선출과 관련해서 생각해야 될 것 같기도 하다.&lt;/p&gt;
&lt;p&gt;마지막은 투표 접근성 강화로 보인다. 현재는 주주총회를 한다며 대주주를 제외한 주주의 참여를 막거나 회의장을 주주가 알 수 없게 정하는 등 온갖 편법이 난무하던 상황이라 정말 중요한 정책이라고 생각한다.&lt;/p&gt;
&lt;p&gt;결과적으로 민주당의 안을 정리하자면 다음 한 문구가 될 것 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;소액 주주 권리 강화&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;'회사의 주인은 주주'라는 코리아 디스카운트 해소를 위해 정말 딱 필요한 최소한의 그것이 모인 느낌이다. 물론 이것 만으로 모든 것이 해결되진 않을 거다. 개인적으론 기업의 참여를 강제할 '강화된 패널티'도 꼭 필요하다고 생각한다. 대주주가 소액 주주에게 피해를 입혔을 때 과연 얼마나 피해를 보상해 줘야 할 지 좋은 본보기가 꼭 필요할 것 같다.&lt;/p&gt;
&lt;p&gt;그리고 제발 배당소득세 분리과세 좀 제발 젭알 플리즈...&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240730-00.html</guid>
      <pubDate>Tue, 30 Jul 2024 14:48:00 +0900</pubDate>
    </item>
    <item>
      <title>Doom Emacs 단축키 정리</title>
      <link>https://seorenn.github.io/article/doom-emacs-shortcuts.html</link>
      <description>&lt;p&gt;이 글은 Doom Emacs에서 개인적으로 자주 사용하는 혹은 인상적이지만 잘 까먹는 단축키를 정리한다. 일부 단축키는 별도의 글로 분리하는 경우도 있으니 하단 관련글 항목을 참고하자.&lt;/p&gt;
&lt;h2&gt;설정(Configuration) 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC f p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;설정 파일 열기(즉 &lt;code&gt;~/.doom.d&lt;/code&gt;에 있는 파일들 목록이 뜬다)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC h r r&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;설정 싱크(sync) 및 리로드(&lt;code&gt;doom/reload&lt;/code&gt;)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;파일, 프로젝트, 워크스페이스 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC f f&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;파일 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;find-file&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC .&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 디렉토리에서 파일 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;생성하기도 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC p p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;프로젝트 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;워크스페이스가 없으면 생성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC SPC&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;프로젝트 파일 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC TAB .&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;워크스페이스(프로젝트) 목록 및 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC TAB NUM&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;NUM 숫자에 해당하는 워크스페이스로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;COMMAND NUM&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;NUM 숫자에 해당하는 워크스페이스로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Mac 전용&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;버퍼(Buffer) 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC ,&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;워크스페이스(혹은 프로젝트) 버퍼 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC b b&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;워크스페이스(혹은 프로젝트) 버퍼 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC `&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;동일 워크스페이스의 이전 버퍼로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC b B&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;버퍼 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC b p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;이전 버퍼로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC b n&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;다음 버퍼로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC p x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;스크래치 버퍼를 작게 아래쪽에 띄우기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;창(Window)&lt;/h2&gt;
&lt;p&gt;참고로 Emacs에서 창(window)이란 하나의 윈도를 여러 pane으로 분할해서 쓰는 것을 의미하니 용어에 주의하자.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w s&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;창을 위아래로 나누기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w v&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;창을 좌우로 나누기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w w&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;다음 창으로 포커스(커서) 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w c&lt;/code&gt; 혹은 &lt;code&gt;SPC w d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;창 닫기. 창이 하나 뿐이면 프로젝트 단기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w j&lt;/code&gt; 혹은 &lt;code&gt;SPC w k&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;아래쪽 창 혹은 윗쪽 창으로 이동하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w h&lt;/code&gt; 혹은 &lt;code&gt;SPC w l&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;왼쪽 창 혹은 오른쪽쪽 창으로 이동하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w o&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;하나의 창을 많이 크게 만들기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w C-o&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 창만 남기고 다른 창 닫기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w =&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;모든 창의 크기를 비슷하게 맞추기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-w C-w&lt;/code&gt; 혹은 &lt;code&gt;C-x o&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;지정된 캐릭터의 윈도로 스위칭&lt;/td&gt;
&lt;td style="text-align: left;"&gt;ace-window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;창 이동은 Evil을 쓸 경우 &lt;code&gt;C-w&lt;/code&gt;와 &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;을 조합하는 Vim 방식을 동일하게 사용할 수도 있다.&lt;/p&gt;
&lt;h2&gt;폴딩(Folding)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z f&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택 영역 접기(폴딩)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z a&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;폴딩 토글하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;폴딩 제거하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;코드 삭제 아님&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z E&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;모든 폴딩 제거&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z j&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;다음 폴딩으로 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z k&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;이전 폴딩으로 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;셸(Shell) 혹은 터미널(Terminal)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC o t&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;터미널 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;템플릿(Snippets)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC s /&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;스니펫 목록 및 검색하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;검색(Search)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC s p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;프로젝트에서 검색(search in project)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC s d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;디렉터리에서 검색(search in directory)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-c C-o&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;검색 내용 버퍼를 별도의 창에 띄우기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC '&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;계속 검색&lt;/td&gt;
&lt;td style="text-align: left;"&gt;ivy-resume&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;점프(Jump)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;t [character]&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;해당 문자로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-snipe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;s [characters]&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;문자 완성 형식으로 해당 문자열로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-snipe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;S [characters]&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;문자 완성 형식으로 해당 문자열로 역방향 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-snipe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g s j&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;표시된 문자를 입력한 위치로 아래방향 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-easymotion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g s k&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;표시된 문자를 입력한 위치로 아래방향 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-easymotion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g s SPC&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;키보드로 입력하는 글자 위치로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;avy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;멀티 커서(Multiple Cursors) - evil-multiedit&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;M-d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서 위치의 단어 혹은 선택영역 선택 혹은 아래 방향으로 같은 단어를 하나 검색해서 선택&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;M-D&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서 위치의 단어 혹은 선택영역 선택 혹은 윗쪽 방향으로 같은 단어를 하나 검색해서 선택&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;영역 선택 후 &lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;해당 단어 모두 선택&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택된 단어들을 덮어쓰기(Replace) 모드로 몽땅 편집하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택된 단어들을 삽입(Insert) 모드로 몽땅 편집하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택된 단어들을 삭제하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-n&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택중인 다음 단어들로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택중인 이전 단어들로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;RET&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택 영역 토글&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;ESC&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;탈출(Exit evil-multiedit mode)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;멀티 커서(Multiple Cursors) - evil-mc&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z z&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 위치에 커서 만들기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z j&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서 위치에서 서브커서를 만들고 아래로 이동 (&lt;code&gt;g z k&lt;/code&gt; 는 위로)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z m&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서 위치와 관련이 있는 모든 곳에 서브커서 생성&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서의 단어 끝에 서브커서를 만들고 비슷한 다음 단어로 커서 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z D&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서의 단어 끝에 서브커서를 만들고 비슷한 이전 단어로 커서 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;특수 텍스트 변환&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;연관 텍스트로 변환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;rotate-text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;연관 텍스트라는 것은 좀 특수한 경우인데, 예를 들어 C++에서 &lt;code&gt;public&lt;/code&gt; - &lt;code&gt;private&lt;/code&gt; - &lt;code&gt;protected&lt;/code&gt; 등의 관계를 생각하면 될 것 같다.&lt;/p&gt;
&lt;h2&gt;Emacs Lisp 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC :&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;함수 실행하기(Emacs 의 &lt;code&gt;M-x&lt;/code&gt; 와 동일). 콜론 주의.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC ;&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;명령 실행하기(eval expression). 세미콜론임에 주의&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m e r&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Lisp Mode에서 선택 영역 실행하기(eval region).&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m e b&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Lisp Mode에서 버퍼 전체 실행하기(eval buffer).&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;S b&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택 영역을 괄호(braces)로 둘러싸기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z M&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;모든 헤드라인 폴딩&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z R&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;모든 헤드라인 폴딩 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;프로그래밍 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g c&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;영역을 주석처리(comment) 혹은 주석해제(uncomment) (Vim 스타일)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC a ;&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;영역을 주석처리(comment) 혹은 주석해제(uncomment) (Doom Emacs 스타일)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC c d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;레퍼런스로 이동(Look up reference)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택영역 들여쓰기(indentation) 정리 (Vim 스타일)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;]e&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Next Error&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;[e&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Previous Error&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC c x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;List Errors&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Org Mode 공통&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m t&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;TODO 마크&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;우선순위(priority)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC n s&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;노트(org) 검색&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC n r f&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Org Roam 문서 제목으로 파일 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Org Mode 테이블 스프레드시트&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m b h&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;테이블에서 커서 위치의 필드 정보&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;org-table-field-info&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-c }&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;테이블 필드 정보 오버레이 토글&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;org-table-toggle-coordinate-overlays&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;프로파일러(profiler)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC h T&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Toggle Profiler&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../article/emacs-evil-surround.html"&gt;Emacs의 evil-surround 확장 소개 및 기본 사용법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;p&gt;이 글은 Doom Emacs에서 개인적으로 자주 사용하는 혹은 인상적이지만 잘 까먹는 단축키를 정리한다. 일부 단축키는 별도의 글로 분리하는 경우도 있으니 하단 관련글 항목을 참고하자.&lt;/p&gt;
&lt;h2&gt;설정(Configuration) 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC f p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;설정 파일 열기(즉 &lt;code&gt;~/.doom.d&lt;/code&gt;에 있는 파일들 목록이 뜬다)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC h r r&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;설정 싱크(sync) 및 리로드(&lt;code&gt;doom/reload&lt;/code&gt;)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;파일, 프로젝트, 워크스페이스 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC f f&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;파일 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;find-file&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC .&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 디렉토리에서 파일 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;생성하기도 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC p p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;프로젝트 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;워크스페이스가 없으면 생성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC SPC&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;프로젝트 파일 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC TAB .&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;워크스페이스(프로젝트) 목록 및 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC TAB NUM&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;NUM 숫자에 해당하는 워크스페이스로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;COMMAND NUM&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;NUM 숫자에 해당하는 워크스페이스로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Mac 전용&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;버퍼(Buffer) 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC ,&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;워크스페이스(혹은 프로젝트) 버퍼 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC b b&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;워크스페이스(혹은 프로젝트) 버퍼 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC `&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;동일 워크스페이스의 이전 버퍼로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC b B&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;버퍼 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC b p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;이전 버퍼로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC b n&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;다음 버퍼로 전환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC p x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;스크래치 버퍼를 작게 아래쪽에 띄우기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;창(Window)&lt;/h2&gt;
&lt;p&gt;참고로 Emacs에서 창(window)이란 하나의 윈도를 여러 pane으로 분할해서 쓰는 것을 의미하니 용어에 주의하자.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w s&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;창을 위아래로 나누기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w v&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;창을 좌우로 나누기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w w&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;다음 창으로 포커스(커서) 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w c&lt;/code&gt; 혹은 &lt;code&gt;SPC w d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;창 닫기. 창이 하나 뿐이면 프로젝트 단기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w j&lt;/code&gt; 혹은 &lt;code&gt;SPC w k&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;아래쪽 창 혹은 윗쪽 창으로 이동하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w h&lt;/code&gt; 혹은 &lt;code&gt;SPC w l&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;왼쪽 창 혹은 오른쪽쪽 창으로 이동하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w o&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;하나의 창을 많이 크게 만들기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w C-o&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 창만 남기고 다른 창 닫기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC w =&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;모든 창의 크기를 비슷하게 맞추기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-w C-w&lt;/code&gt; 혹은 &lt;code&gt;C-x o&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;지정된 캐릭터의 윈도로 스위칭&lt;/td&gt;
&lt;td style="text-align: left;"&gt;ace-window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;창 이동은 Evil을 쓸 경우 &lt;code&gt;C-w&lt;/code&gt;와 &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;을 조합하는 Vim 방식을 동일하게 사용할 수도 있다.&lt;/p&gt;
&lt;h2&gt;폴딩(Folding)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z f&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택 영역 접기(폴딩)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z a&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;폴딩 토글하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;폴딩 제거하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;코드 삭제 아님&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z E&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;모든 폴딩 제거&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z j&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;다음 폴딩으로 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z k&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;이전 폴딩으로 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;셸(Shell) 혹은 터미널(Terminal)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC o t&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;터미널 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;템플릿(Snippets)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC s /&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;스니펫 목록 및 검색하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;검색(Search)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC s p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;프로젝트에서 검색(search in project)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC s d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;디렉터리에서 검색(search in directory)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-c C-o&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;검색 내용 버퍼를 별도의 창에 띄우기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC '&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;계속 검색&lt;/td&gt;
&lt;td style="text-align: left;"&gt;ivy-resume&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;점프(Jump)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;t [character]&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;해당 문자로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-snipe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;s [characters]&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;문자 완성 형식으로 해당 문자열로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-snipe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;S [characters]&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;문자 완성 형식으로 해당 문자열로 역방향 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-snipe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g s j&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;표시된 문자를 입력한 위치로 아래방향 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-easymotion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g s k&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;표시된 문자를 입력한 위치로 아래방향 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;evil-easymotion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g s SPC&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;키보드로 입력하는 글자 위치로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;avy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;멀티 커서(Multiple Cursors) - evil-multiedit&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;M-d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서 위치의 단어 혹은 선택영역 선택 혹은 아래 방향으로 같은 단어를 하나 검색해서 선택&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;M-D&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서 위치의 단어 혹은 선택영역 선택 혹은 윗쪽 방향으로 같은 단어를 하나 검색해서 선택&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;영역 선택 후 &lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;해당 단어 모두 선택&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택된 단어들을 덮어쓰기(Replace) 모드로 몽땅 편집하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택된 단어들을 삽입(Insert) 모드로 몽땅 편집하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택된 단어들을 삭제하기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-n&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택중인 다음 단어들로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택중인 이전 단어들로 점프&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;RET&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택 영역 토글&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;ESC&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;탈출(Exit evil-multiedit mode)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;멀티 커서(Multiple Cursors) - evil-mc&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z z&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 위치에 커서 만들기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z j&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서 위치에서 서브커서를 만들고 아래로 이동 (&lt;code&gt;g z k&lt;/code&gt; 는 위로)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z m&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서 위치와 관련이 있는 모든 곳에 서브커서 생성&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서의 단어 끝에 서브커서를 만들고 비슷한 다음 단어로 커서 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g z D&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;현재 커서의 단어 끝에 서브커서를 만들고 비슷한 이전 단어로 커서 이동&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;특수 텍스트 변환&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;연관 텍스트로 변환&lt;/td&gt;
&lt;td style="text-align: left;"&gt;rotate-text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;연관 텍스트라는 것은 좀 특수한 경우인데, 예를 들어 C++에서 &lt;code&gt;public&lt;/code&gt; - &lt;code&gt;private&lt;/code&gt; - &lt;code&gt;protected&lt;/code&gt; 등의 관계를 생각하면 될 것 같다.&lt;/p&gt;
&lt;h2&gt;Emacs Lisp 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC :&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;함수 실행하기(Emacs 의 &lt;code&gt;M-x&lt;/code&gt; 와 동일). 콜론 주의.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC ;&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;명령 실행하기(eval expression). 세미콜론임에 주의&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m e r&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Lisp Mode에서 선택 영역 실행하기(eval region).&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m e b&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Lisp Mode에서 버퍼 전체 실행하기(eval buffer).&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;S b&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택 영역을 괄호(braces)로 둘러싸기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z M&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;모든 헤드라인 폴딩&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;z R&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;모든 헤드라인 폴딩 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;프로그래밍 관련&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;g c&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;영역을 주석처리(comment) 혹은 주석해제(uncomment) (Vim 스타일)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC a ;&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;영역을 주석처리(comment) 혹은 주석해제(uncomment) (Doom Emacs 스타일)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC c d&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;레퍼런스로 이동(Look up reference)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;선택영역 들여쓰기(indentation) 정리 (Vim 스타일)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;]e&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Next Error&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;[e&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Previous Error&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC c x&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;List Errors&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Org Mode 공통&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m t&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;TODO 마크&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m p&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;우선순위(priority)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC n s&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;노트(org) 검색&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC n r f&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Org Roam 문서 제목으로 파일 열기&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Org Mode 테이블 스프레드시트&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC m b h&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;테이블에서 커서 위치의 필드 정보&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;org-table-field-info&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;C-c }&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;테이블 필드 정보 오버레이 토글&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;org-table-toggle-coordinate-overlays&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;프로파일러(profiler)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;단축키&lt;/th&gt;
&lt;th style="text-align: left;"&gt;설명&lt;/th&gt;
&lt;th style="text-align: left;"&gt;기타&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;SPC h T&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Toggle Profiler&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../article/emacs-evil-surround.html"&gt;Emacs의 evil-surround 확장 소개 및 기본 사용법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/doom-emacs-shortcuts.html</guid>
      <pubDate>Mon, 29 Jul 2024 16:46:00 +0900</pubDate>
    </item>
    <item>
      <title>말라리아란 질병은 무엇이고 어떻게 치료하고 예방할 수 있을까?</title>
      <link>https://seorenn.github.io/article/malaria.html</link>
      <description>&lt;p&gt;날씨가 따뜻해지만 말라리아로 난리다. 2024년 7월 기준 사실상 서울 전역에서 확진자 발생 중이니 대한민국의 여름은 한창 심각한 와중이다. 도대체 말라리아는 뭐고 왜 발생하고 어떻게 치료하고 예방할 수 있을까?&lt;/p&gt;
&lt;h2&gt;말라리아(malaria)&lt;/h2&gt;
&lt;p&gt;말라리아는 모기를 매개로 한 말라리아 원충(기생충)이 적혈구에 감염되어 발생하는 질병이다. '학' 혹은 '학질'이라고도 불린며 '학을 떼다'라는 말의 '학'도 역시 말라리아를 칭한다. 열대 지역에서 주로 발생하는 병이었지만 지금은 춥지 않은 곳이나 더운 계절에는 어디든 존재한다고 볼 수 있다.&lt;/p&gt;
&lt;p&gt;우리나라에 발생 중인 말라리아는 주로 삼일열 말라리아 원충(Plasmodium vivax)에 의해 발생하는 상대적으로 가벼운 증상의 '삼일열 말라리아'다. 반면 열대지방에서 주로 발생하는 말라리아는 '열대열 말라리아'로 분류되며 상대적으로 증상이 심한 편이다. 이 외에도 사일열 말라리아 등등 종류가 몇 가지 더 있다.&lt;/p&gt;
&lt;p&gt;말라리아는 '전세계에서 사람을 가장 많이 죽인 전염병'이라는 악명을 가지고 있다. 따라서 증상이 어떻든 가볍게 여겨서는 안 될 전염병이다.&lt;/p&gt;
&lt;h2&gt;증상&lt;/h2&gt;
&lt;p&gt;말라리아의 잠복기는 보통은 1~2주에서 한달 가량이지만 심하면 수 개월에서 수 년 동안 증상이 나타나지 않을 정도로 역동적인(?) 잠복기를 가지고 있다.&lt;/p&gt;
&lt;p&gt;말라리아 증상의 시작은 식욕이 없거나 머리가 아프거나 등의 피로한 증상으로 시작한다. 이후 39~41도 정도의 고열이 나고 추위를 느끼거나 근육통 등으로 증상이 심해진다. 마치 감기나 독감처럼 초기에 피로함을 느끼다 열이 나는 등의 증상으로 발전하는 것과 비슷하다. &lt;em&gt;어차피 감염증의 증상이 이런 식이라 어쩔 수 없다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;다만 말라리아의 경우 열이 지속적으로 혹은 주기적으로 난다는 특징이 있는 모양이다. 우리나라에서 자주 볼 수 있는 삼일열 말라리아의 경우는 대체로 3일 주기로 열이 오르고 내리는 특징이 있다. 대충 하루는 열이 나고 하루이틀 정도는 열이 내렸다 다시 열이 나는 식으로 말이다. 반면 열대열 말라리아의 경우는 발열의 거의 계속 이어지는 편이다.&lt;/p&gt;
&lt;p&gt;이외에도 빈혈, 황달, 몸살, 구토, 호흡장애나 빈맥(심장박동이 이상하게 빨라지는 증상) 등 다양한 증상이 나타날 수 있다. &lt;/p&gt;
&lt;p&gt;합병증으로 폐렴이나 심장, 신장, 뇌 등에도 관련 질환이 발생하기도 하고 심각한 경우 비장이 커지다 파열되는 경우도 있다. 이런 합병증으로 이어질 경우 치사율도 당연히 크게 높아진다.&lt;/p&gt;
&lt;h2&gt;감염 경로&lt;/h2&gt;
&lt;p&gt;말라리아는 모기에 의해 감염된다. 즉 모기가 말라리아에 걸린 사람을 물어 말리리아 원충을 보유한 상태로 다른 사람을 물면 말리리아가 전염되는 식이다. 우리나라의 경우 중국 얼룩날개 모기류(Anopheles species)의 암컷 모기에 의해서 전파되는 경우가 많다고 한다. 참고로 중국 얼룩날개 모기는 엉덩이를 들고 있는 흔히 보이는 모기다. &lt;em&gt;일본 뇌염 모기와 중국 얼룩날개 말라리아 모기의 2파전이라니 참 힘든 세상이다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;어차피 모기는 암컷만 피를 빠니 말라리아를 옮기는 모기는 모두 암컷이라고 봐도 될 것 같다.&lt;/p&gt;
&lt;h2&gt;진단&lt;/h2&gt;
&lt;p&gt;말라리아 원충은 세균이나 바이러스가 아닌 상대적으로 큰 '기생충'이기 때문에 혈액을 현미경으로 검사하는 방식을 쓸 수 있는 모양이다. 물론 이 방법이 완벽한 것은 아니고 최근에는 진단시약이나 PCR 등 다양한 진단 방식이 있기 때문에 말라리아가 의심된다면 병원에서 안내해 주는 진단 방법을 따르면 될 것 같다.&lt;/p&gt;
&lt;h2&gt;치료&lt;/h2&gt;
&lt;p&gt;말라리아는 항말라리아 약이 다양하게 개발되어 있다. 다만 원충의 종류나 내성 여부에 따라 약의 종류나 치료 난이도가 나뉘는 듯하다. &lt;/p&gt;
&lt;p&gt;대표적인 약으로 클로로퀸이 꼽히긴 하지만 어쨌든 처방은 전문 지식이 필요한 부분이니 이와 관련해서는 무조건 병원을 방문하는 게 답일 것 같다.&lt;/p&gt;
&lt;p&gt;모든 질병이 다 그렇지만 병원을 다니며 치료를 하는 것만 아니라 푹 쉬고 충분히 잘 먹는 것도 치료에 중요하다는 것을 잊지 말자.&lt;/p&gt;
&lt;h2&gt;예방&lt;/h2&gt;
&lt;p&gt;말라리아는 예방 백신이 없다고 봐야 한다. 정확히 말해서 존재하기는 하지만 면역 성능도 낮은 편이고 면역 기간이 짧은 편이라 결과적으로 효율이 안 좋은 편이라고 한다.&lt;/p&gt;
&lt;p&gt;대신 항말라리아 약을 예방 용도로 사용하기도 한다. 말라리아 발생 지역에 가기 전에 먹고 다녀와서도 일정 기간 복용하는 형태로 발병 전에 미리 처치(?)하는 방식이다. 이 경우 지역 등에 따라 약의 종류 등 처방이 달라질 수 있으니 전문의와 상의해야 한다.&lt;/p&gt;
&lt;p&gt;가장 중요한 예방책은 모기에게 안 물리는 것이다. 모기가 주로 활동하는 야간에는 외출을 삼가거나, 외출 시 긴 옷을 입고 모기 기피제를 사용할 수도 있고, 수면 시에는 모기장 등을 활용할 수도 있다. 아니면 살충제나 물리력(?)으로 모기를 때려 잡는 방법도 있다. 모기가 번식하는 물웅덩이도 반드시 제거하자.&lt;/p&gt;
&lt;p&gt;점막을 통한 전파는 없는 것으로 보이며 따라서 마스크 등을 쓸 필요는 없는 것으로 보인다.&lt;/p&gt;
&lt;h2&gt;정리&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;말라리아를 예방하고 싶다면 모기에 안 물리게 최대한 노력하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;개인적인 입장에선 그저 모기에 안 물리게 조심하고 만약 말라리아가 의심이 된다면 최대한 빨리 병원에 가는 정도가 최선일 것 같다. 그래도 왠만하면 다들 열이 좀 난다면 병원에 가는 건 당연하게 생각하고 있으니 큰 문제는 안 되는 것 같다. &lt;/p&gt;
&lt;p&gt;이렇게 의료의 질과 방역 수준이 높은 나라에서 말라리아가 박멸되지 않고 있는 것도 신기한 일이다. 추측으로는 열악한 북한을 통한 전파가 발멱을 방해하는 가장 유력한 요인인 것 같다니 여러모로 안타깝다.&lt;/p&gt;
&lt;p&gt;그나마 다행이라면 한국에서 유행하는 삼일열 말라리아의 경우 증상이 심하지 않고 중증으로 발전하는 경우도 적다는 것 같다. 하지만 감기도 방치하면 사망할 수도 있는 것처럼 의심 증상이 보인다면 긴장을 늦추지 말아야 할 것 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;날씨가 따뜻해지만 말라리아로 난리다. 2024년 7월 기준 사실상 서울 전역에서 확진자 발생 중이니 대한민국의 여름은 한창 심각한 와중이다. 도대체 말라리아는 뭐고 왜 발생하고 어떻게 치료하고 예방할 수 있을까?&lt;/p&gt;
&lt;h2&gt;말라리아(malaria)&lt;/h2&gt;
&lt;p&gt;말라리아는 모기를 매개로 한 말라리아 원충(기생충)이 적혈구에 감염되어 발생하는 질병이다. '학' 혹은 '학질'이라고도 불린며 '학을 떼다'라는 말의 '학'도 역시 말라리아를 칭한다. 열대 지역에서 주로 발생하는 병이었지만 지금은 춥지 않은 곳이나 더운 계절에는 어디든 존재한다고 볼 수 있다.&lt;/p&gt;
&lt;p&gt;우리나라에 발생 중인 말라리아는 주로 삼일열 말라리아 원충(Plasmodium vivax)에 의해 발생하는 상대적으로 가벼운 증상의 '삼일열 말라리아'다. 반면 열대지방에서 주로 발생하는 말라리아는 '열대열 말라리아'로 분류되며 상대적으로 증상이 심한 편이다. 이 외에도 사일열 말라리아 등등 종류가 몇 가지 더 있다.&lt;/p&gt;
&lt;p&gt;말라리아는 '전세계에서 사람을 가장 많이 죽인 전염병'이라는 악명을 가지고 있다. 따라서 증상이 어떻든 가볍게 여겨서는 안 될 전염병이다.&lt;/p&gt;
&lt;h2&gt;증상&lt;/h2&gt;
&lt;p&gt;말라리아의 잠복기는 보통은 1~2주에서 한달 가량이지만 심하면 수 개월에서 수 년 동안 증상이 나타나지 않을 정도로 역동적인(?) 잠복기를 가지고 있다.&lt;/p&gt;
&lt;p&gt;말라리아 증상의 시작은 식욕이 없거나 머리가 아프거나 등의 피로한 증상으로 시작한다. 이후 39~41도 정도의 고열이 나고 추위를 느끼거나 근육통 등으로 증상이 심해진다. 마치 감기나 독감처럼 초기에 피로함을 느끼다 열이 나는 등의 증상으로 발전하는 것과 비슷하다. &lt;em&gt;어차피 감염증의 증상이 이런 식이라 어쩔 수 없다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;다만 말라리아의 경우 열이 지속적으로 혹은 주기적으로 난다는 특징이 있는 모양이다. 우리나라에서 자주 볼 수 있는 삼일열 말라리아의 경우는 대체로 3일 주기로 열이 오르고 내리는 특징이 있다. 대충 하루는 열이 나고 하루이틀 정도는 열이 내렸다 다시 열이 나는 식으로 말이다. 반면 열대열 말라리아의 경우는 발열의 거의 계속 이어지는 편이다.&lt;/p&gt;
&lt;p&gt;이외에도 빈혈, 황달, 몸살, 구토, 호흡장애나 빈맥(심장박동이 이상하게 빨라지는 증상) 등 다양한 증상이 나타날 수 있다. &lt;/p&gt;
&lt;p&gt;합병증으로 폐렴이나 심장, 신장, 뇌 등에도 관련 질환이 발생하기도 하고 심각한 경우 비장이 커지다 파열되는 경우도 있다. 이런 합병증으로 이어질 경우 치사율도 당연히 크게 높아진다.&lt;/p&gt;
&lt;h2&gt;감염 경로&lt;/h2&gt;
&lt;p&gt;말라리아는 모기에 의해 감염된다. 즉 모기가 말라리아에 걸린 사람을 물어 말리리아 원충을 보유한 상태로 다른 사람을 물면 말리리아가 전염되는 식이다. 우리나라의 경우 중국 얼룩날개 모기류(Anopheles species)의 암컷 모기에 의해서 전파되는 경우가 많다고 한다. 참고로 중국 얼룩날개 모기는 엉덩이를 들고 있는 흔히 보이는 모기다. &lt;em&gt;일본 뇌염 모기와 중국 얼룩날개 말라리아 모기의 2파전이라니 참 힘든 세상이다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;어차피 모기는 암컷만 피를 빠니 말라리아를 옮기는 모기는 모두 암컷이라고 봐도 될 것 같다.&lt;/p&gt;
&lt;h2&gt;진단&lt;/h2&gt;
&lt;p&gt;말라리아 원충은 세균이나 바이러스가 아닌 상대적으로 큰 '기생충'이기 때문에 혈액을 현미경으로 검사하는 방식을 쓸 수 있는 모양이다. 물론 이 방법이 완벽한 것은 아니고 최근에는 진단시약이나 PCR 등 다양한 진단 방식이 있기 때문에 말라리아가 의심된다면 병원에서 안내해 주는 진단 방법을 따르면 될 것 같다.&lt;/p&gt;
&lt;h2&gt;치료&lt;/h2&gt;
&lt;p&gt;말라리아는 항말라리아 약이 다양하게 개발되어 있다. 다만 원충의 종류나 내성 여부에 따라 약의 종류나 치료 난이도가 나뉘는 듯하다. &lt;/p&gt;
&lt;p&gt;대표적인 약으로 클로로퀸이 꼽히긴 하지만 어쨌든 처방은 전문 지식이 필요한 부분이니 이와 관련해서는 무조건 병원을 방문하는 게 답일 것 같다.&lt;/p&gt;
&lt;p&gt;모든 질병이 다 그렇지만 병원을 다니며 치료를 하는 것만 아니라 푹 쉬고 충분히 잘 먹는 것도 치료에 중요하다는 것을 잊지 말자.&lt;/p&gt;
&lt;h2&gt;예방&lt;/h2&gt;
&lt;p&gt;말라리아는 예방 백신이 없다고 봐야 한다. 정확히 말해서 존재하기는 하지만 면역 성능도 낮은 편이고 면역 기간이 짧은 편이라 결과적으로 효율이 안 좋은 편이라고 한다.&lt;/p&gt;
&lt;p&gt;대신 항말라리아 약을 예방 용도로 사용하기도 한다. 말라리아 발생 지역에 가기 전에 먹고 다녀와서도 일정 기간 복용하는 형태로 발병 전에 미리 처치(?)하는 방식이다. 이 경우 지역 등에 따라 약의 종류 등 처방이 달라질 수 있으니 전문의와 상의해야 한다.&lt;/p&gt;
&lt;p&gt;가장 중요한 예방책은 모기에게 안 물리는 것이다. 모기가 주로 활동하는 야간에는 외출을 삼가거나, 외출 시 긴 옷을 입고 모기 기피제를 사용할 수도 있고, 수면 시에는 모기장 등을 활용할 수도 있다. 아니면 살충제나 물리력(?)으로 모기를 때려 잡는 방법도 있다. 모기가 번식하는 물웅덩이도 반드시 제거하자.&lt;/p&gt;
&lt;p&gt;점막을 통한 전파는 없는 것으로 보이며 따라서 마스크 등을 쓸 필요는 없는 것으로 보인다.&lt;/p&gt;
&lt;h2&gt;정리&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;말라리아를 예방하고 싶다면 모기에 안 물리게 최대한 노력하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;개인적인 입장에선 그저 모기에 안 물리게 조심하고 만약 말라리아가 의심이 된다면 최대한 빨리 병원에 가는 정도가 최선일 것 같다. 그래도 왠만하면 다들 열이 좀 난다면 병원에 가는 건 당연하게 생각하고 있으니 큰 문제는 안 되는 것 같다. &lt;/p&gt;
&lt;p&gt;이렇게 의료의 질과 방역 수준이 높은 나라에서 말라리아가 박멸되지 않고 있는 것도 신기한 일이다. 추측으로는 열악한 북한을 통한 전파가 발멱을 방해하는 가장 유력한 요인인 것 같다니 여러모로 안타깝다.&lt;/p&gt;
&lt;p&gt;그나마 다행이라면 한국에서 유행하는 삼일열 말라리아의 경우 증상이 심하지 않고 중증으로 발전하는 경우도 적다는 것 같다. 하지만 감기도 방치하면 사망할 수도 있는 것처럼 의심 증상이 보인다면 긴장을 늦추지 말아야 할 것 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/malaria.html</guid>
      <pubDate>Mon, 29 Jul 2024 15:44:00 +0900</pubDate>
    </item>
    <item>
      <title>한 주간의 애플 소식들 24-07-28</title>
      <link>https://seorenn.github.io/log/20240728-00.html</link>
      <description>&lt;h2&gt;소프트웨어 릴리즈 소식&lt;/h2&gt;
&lt;p&gt;미국 시각 7월 23일 애플은 자사 플랫폼용 OS 및 소프트웨어들의 여러 업데이트를 공개했다.&lt;/p&gt;
&lt;p&gt;우선은 차세대 OS들의 개발자 베타들이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14 Sequoia beta 4: iPhone Mirroring 윈도우 크기 옵션 추가 등&lt;/li&gt;
&lt;li&gt;iOS 18 beta 4: CarPlay 배경화면 추가, 카메라 컨트롤 메뉴 추가, 새로운 손전등 UI 지원 디바이스 추가, RCS 지원 통신사 추가, 설정 인터페이스 수정, 기타 사소한 UI 변경 등&lt;/li&gt;
&lt;li&gt;iPadOS 18 beta 4&lt;/li&gt;
&lt;li&gt;visionOS 2 beta 4&lt;/li&gt;
&lt;li&gt;watchOS 11 beta 4&lt;/li&gt;
&lt;li&gt;tvOS 18 beta 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;참고로 iOS 18 beta 4는 공개된 이후 버전 변화 없이 새 빌드가 올라왔다.&lt;/p&gt;
&lt;p&gt;그 외에 현 안정버전의 버그픽스 급의 마이너 업데이트들은 RC(release candidate) 즉 정식 버전 후보 버전들이 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6 RC&lt;/li&gt;
&lt;li&gt;iOS 17.6 RC&lt;/li&gt;
&lt;li&gt;iPadOS 17.6 RC&lt;/li&gt;
&lt;li&gt;visionOS 1.3 RC&lt;/li&gt;
&lt;li&gt;watchOS 10.6 RC&lt;/li&gt;
&lt;li&gt;tvOS 17.6 RC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기타 이에 발맞추어 개발 도구들의 베타도 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 16 beta 4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;iPhone 17 Ultra Slim?&lt;/strong&gt;&lt;br/&gt;
차세대 아이폰에 슬림 디자인이 적용될 것이라는 루머는 약간 와전 되었던 듯하다. 좀 더 상세한 내용으로 아이폰 17에는 '슬림'에 해당하는 해로운 모델이 추가될 것이라는 듯하다. 내부 설계도 바뀌고 티타늄 프레임에 A19 칩에 후면 카메라는 하나만 들어가는데 일단 기계식 조리개도 들어갈 것 같고 가격은 모델들 중 가장 비쌀 것 같다. 슬림 모델은 기존의 '플러스' 모델을 대체하기 위한 것으로 보이는데 포지션이 미묘할 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPhone SE 4&lt;/strong&gt;&lt;br/&gt;
차세대 iPhone SE 4는 OLED 디스플레이, A18 칩셋, 6~8GB 램, 48메가픽셀 카메라 센서 등을 갖출 것으로 전망된다. 전반적인 디자인도 아이폰 14 Pro 부터 도입된 노치가 특색인 Dynamic Island 디자인이 도입될 것 같다. 덕분에 가격은 좀 더 비싸질 수 있다. 실제 생산은 10월 부터가 유력하게 점쳐지는 모양이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apple Intelligence&lt;/strong&gt;&lt;br/&gt;
Apple Music의 사용자 플레이리스트 아트워크(커버 이미지)를 AI를 이용해 만드는 기능이 도입될 것 같다. EU와 미국과 영국 정부는 AI 규제에 관한 공통 원칙을 채택하기로 합의하며 유럽 지역에서의 AI 기능 제공에 길이 열릴 수도 있어 보인다. Apple Intelligence의 실직적인 지원은 아직 늦어지는 모양인데 애플은 앞으로 나올 iOS 18 개발자 베타 등에서 지속적으로 추가될 것이라 밝혔다. 그 외에 애플이 바이든 행정부의 AI 안전 지침에 동의했다는 소식이 알려졌다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apple Maps&lt;/strong&gt;&lt;br/&gt;
애플이 &lt;a href="https://www.apple.com/maps/" target="_blank"&gt;애플 지도의 웹 버전📎&lt;/a&gt; 베타를 공개했다. 웹 버전이기 때문에 딱히 브라우저나 플랫폼을 가리지 않고 사용할 수 있다. 언론을 통해 공개된 주소는 beta 딱지가 붙어 있었는데 실제 접속되는 URL에는 beta 표식이 없는 것이 특이하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;퀄컴 (조금만) 안녕&lt;/strong&gt;&lt;br/&gt;
애플이 2025년 출시될 iPhone 모델 중 일부에서 퀄컴의 5G 모뎀 칩 대신 자체 칩을 사용할 가능성이 알려졌다. 대상 모델은 iPhone SE 4와 iPhone 17의 일명 '슬림' 모델인 것으로 전해졌다. 물론 이 외의 모델은 여전히 퀄컴의 칩이 탑재될 것 같다는 이야기다. 어쨌든 애플이 모뎀 칩 개발에도 약간의 진전이 있었다고 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;사건사고&lt;/strong&gt;&lt;br/&gt;
iCloud Private Relay이 중단되며 일부 사용자가 불편을 겪는 일이 발생했다.&lt;/p&gt;
&lt;h2&gt;AAPL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플의 2분기 중국 iPhone 출하량은 전년대비 6.7% 가량 감소했다고 한다. &lt;/li&gt;
&lt;li&gt;인도에서는 수입 관세 인하로 iPhone 가격을 인하했고, 인도에서의 iPad 조립을 고려하는 듯하다. &lt;/li&gt;
&lt;li&gt;웰스파고는 iPhone 매출이 전망치를 소폭 상회할 것이며 Apple Intelligence가 업그레이드 사이클을 견인할 것이라 전망하며 비중확대 의견 유지 및 목표가를 275달러로 상향 조정했다. &lt;/li&gt;
&lt;li&gt;바클레이스는 애플에 대해 비중축소 의견을 유지했지만 목표가를 187달러로 올렸다. &lt;/li&gt;
&lt;li&gt;JP모건은 긍정적 실적을 전망하며 애플 목표가를 265달러로 높였다.&lt;/li&gt;
&lt;li&gt;매릴랜드주 애플스토어 노조 파업은 협상이 잘 진행되어 면한 모양이다.&lt;/li&gt;
&lt;li&gt;스페인에서 애플 앱스토어에 대한 반경쟁적 관행을 조사하기 시작했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;기타 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;폴더블 iPhone은 2026년 플립 디자인 형태로 출시될 것이라는 소문이 돈다.&lt;/li&gt;
&lt;li&gt;iPhone 18의 카메라 센서에 삼성 부품이 추가되며 Sony의 독점이 깨질 것이라는 추측이 나오는 모양이다.&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;h2&gt;소프트웨어 릴리즈 소식&lt;/h2&gt;
&lt;p&gt;미국 시각 7월 23일 애플은 자사 플랫폼용 OS 및 소프트웨어들의 여러 업데이트를 공개했다.&lt;/p&gt;
&lt;p&gt;우선은 차세대 OS들의 개발자 베타들이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14 Sequoia beta 4: iPhone Mirroring 윈도우 크기 옵션 추가 등&lt;/li&gt;
&lt;li&gt;iOS 18 beta 4: CarPlay 배경화면 추가, 카메라 컨트롤 메뉴 추가, 새로운 손전등 UI 지원 디바이스 추가, RCS 지원 통신사 추가, 설정 인터페이스 수정, 기타 사소한 UI 변경 등&lt;/li&gt;
&lt;li&gt;iPadOS 18 beta 4&lt;/li&gt;
&lt;li&gt;visionOS 2 beta 4&lt;/li&gt;
&lt;li&gt;watchOS 11 beta 4&lt;/li&gt;
&lt;li&gt;tvOS 18 beta 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;참고로 iOS 18 beta 4는 공개된 이후 버전 변화 없이 새 빌드가 올라왔다.&lt;/p&gt;
&lt;p&gt;그 외에 현 안정버전의 버그픽스 급의 마이너 업데이트들은 RC(release candidate) 즉 정식 버전 후보 버전들이 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6 RC&lt;/li&gt;
&lt;li&gt;iOS 17.6 RC&lt;/li&gt;
&lt;li&gt;iPadOS 17.6 RC&lt;/li&gt;
&lt;li&gt;visionOS 1.3 RC&lt;/li&gt;
&lt;li&gt;watchOS 10.6 RC&lt;/li&gt;
&lt;li&gt;tvOS 17.6 RC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기타 이에 발맞추어 개발 도구들의 베타도 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 16 beta 4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;iPhone 17 Ultra Slim?&lt;/strong&gt;&lt;br/&gt;
차세대 아이폰에 슬림 디자인이 적용될 것이라는 루머는 약간 와전 되었던 듯하다. 좀 더 상세한 내용으로 아이폰 17에는 '슬림'에 해당하는 해로운 모델이 추가될 것이라는 듯하다. 내부 설계도 바뀌고 티타늄 프레임에 A19 칩에 후면 카메라는 하나만 들어가는데 일단 기계식 조리개도 들어갈 것 같고 가격은 모델들 중 가장 비쌀 것 같다. 슬림 모델은 기존의 '플러스' 모델을 대체하기 위한 것으로 보이는데 포지션이 미묘할 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPhone SE 4&lt;/strong&gt;&lt;br/&gt;
차세대 iPhone SE 4는 OLED 디스플레이, A18 칩셋, 6~8GB 램, 48메가픽셀 카메라 센서 등을 갖출 것으로 전망된다. 전반적인 디자인도 아이폰 14 Pro 부터 도입된 노치가 특색인 Dynamic Island 디자인이 도입될 것 같다. 덕분에 가격은 좀 더 비싸질 수 있다. 실제 생산은 10월 부터가 유력하게 점쳐지는 모양이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apple Intelligence&lt;/strong&gt;&lt;br/&gt;
Apple Music의 사용자 플레이리스트 아트워크(커버 이미지)를 AI를 이용해 만드는 기능이 도입될 것 같다. EU와 미국과 영국 정부는 AI 규제에 관한 공통 원칙을 채택하기로 합의하며 유럽 지역에서의 AI 기능 제공에 길이 열릴 수도 있어 보인다. Apple Intelligence의 실직적인 지원은 아직 늦어지는 모양인데 애플은 앞으로 나올 iOS 18 개발자 베타 등에서 지속적으로 추가될 것이라 밝혔다. 그 외에 애플이 바이든 행정부의 AI 안전 지침에 동의했다는 소식이 알려졌다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apple Maps&lt;/strong&gt;&lt;br/&gt;
애플이 &lt;a href="https://www.apple.com/maps/" target="_blank"&gt;애플 지도의 웹 버전📎&lt;/a&gt; 베타를 공개했다. 웹 버전이기 때문에 딱히 브라우저나 플랫폼을 가리지 않고 사용할 수 있다. 언론을 통해 공개된 주소는 beta 딱지가 붙어 있었는데 실제 접속되는 URL에는 beta 표식이 없는 것이 특이하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;퀄컴 (조금만) 안녕&lt;/strong&gt;&lt;br/&gt;
애플이 2025년 출시될 iPhone 모델 중 일부에서 퀄컴의 5G 모뎀 칩 대신 자체 칩을 사용할 가능성이 알려졌다. 대상 모델은 iPhone SE 4와 iPhone 17의 일명 '슬림' 모델인 것으로 전해졌다. 물론 이 외의 모델은 여전히 퀄컴의 칩이 탑재될 것 같다는 이야기다. 어쨌든 애플이 모뎀 칩 개발에도 약간의 진전이 있었다고 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;사건사고&lt;/strong&gt;&lt;br/&gt;
iCloud Private Relay이 중단되며 일부 사용자가 불편을 겪는 일이 발생했다.&lt;/p&gt;
&lt;h2&gt;AAPL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플의 2분기 중국 iPhone 출하량은 전년대비 6.7% 가량 감소했다고 한다. &lt;/li&gt;
&lt;li&gt;인도에서는 수입 관세 인하로 iPhone 가격을 인하했고, 인도에서의 iPad 조립을 고려하는 듯하다. &lt;/li&gt;
&lt;li&gt;웰스파고는 iPhone 매출이 전망치를 소폭 상회할 것이며 Apple Intelligence가 업그레이드 사이클을 견인할 것이라 전망하며 비중확대 의견 유지 및 목표가를 275달러로 상향 조정했다. &lt;/li&gt;
&lt;li&gt;바클레이스는 애플에 대해 비중축소 의견을 유지했지만 목표가를 187달러로 올렸다. &lt;/li&gt;
&lt;li&gt;JP모건은 긍정적 실적을 전망하며 애플 목표가를 265달러로 높였다.&lt;/li&gt;
&lt;li&gt;매릴랜드주 애플스토어 노조 파업은 협상이 잘 진행되어 면한 모양이다.&lt;/li&gt;
&lt;li&gt;스페인에서 애플 앱스토어에 대한 반경쟁적 관행을 조사하기 시작했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;기타 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;폴더블 iPhone은 2026년 플립 디자인 형태로 출시될 것이라는 소문이 돈다.&lt;/li&gt;
&lt;li&gt;iPhone 18의 카메라 센서에 삼성 부품이 추가되며 Sony의 독점이 깨질 것이라는 추측이 나오는 모양이다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240728-00.html</guid>
      <pubDate>Sun, 28 Jul 2024 23:26:00 +0900</pubDate>
    </item>
    <item>
      <title>7월 FOMC를 앞두고 또 연준 인사들의 발언들을 모아봤다</title>
      <link>https://seorenn.github.io/log/20240727-00.html</link>
      <description>&lt;p&gt;7월 FOMC가 곧 열린다. 그렇다곤 해도 뭔가가 바뀔 것 같지는 않다. 그 배경에는 여러 연준 인사들의 발언들이 있다. 지난 글 이래로 있었던 여러 발언들을 또 모아봤다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;제롬 파월 (연준 의장)&lt;/strong&gt;: "최근 지표들로 디스인플레이션 경로 복귀, 하지만 인하를 위해선 자신감이 생길 정도의 증거 필요", "인플레이션 목표 2%까지 기다리면 너무 늦어져"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;아드리아나 쿠글러 (연준 이사)&lt;/strong&gt;: "아직은 인플레이션이 높고 추세도 불안정하지만 지속적인 디스인플레이션에 대해서는 낙관적", "올해 안에는 금리를 내려야 할 것"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;미셸 보먼 (연준 이사)&lt;/strong&gt;: "금리인상 여지 여전히 남아 있어"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;리사 쿡 (연준 이사)&lt;/strong&gt;: "지표에 달려있지만 언젠가는 금리를 인하할 것", "경제는 연착륙하고 실업률은 더 상승하지 않을 것"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;크리스토퍼 월러 (연준 이사)&lt;/strong&gt;: "기준금리 인하 시점이 가까워지고 있다"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;로레타 메스터 (클리블랜드 연은 총재)&lt;/strong&gt;: "디스인플레이션의 지속 여부 확인 후 금리 인하해야"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;오스탄 굴스비 (시카고 연은 총재)&lt;/strong&gt;: "5월 지표는 좋았지만 더 많은 진전을 봐야", "5월 수준의 진정세가 이어지면 금리 인하 가능", "최근의 좋은 지표들이 금리인하의 길을 열어줄 것", "수 달 내에 금리 인하해야", "노동시장 침체를 막을 수 있는 시기를 놓치면 안 돼"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;패트릭 하커 (필라델피아 연은 총재)&lt;/strong&gt;: "데이터에 따라 유동적이지만 현재로썬 올해 금리인하는 한 번 뿐일 것"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;수잔 콜린스 (보스턴 연은 총재)&lt;/strong&gt;: "목표로 향하고 있는지 판단하기엔 이르다"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;알베르토 무살렘 (세인트루이스 연은 총재)&lt;/strong&gt;: "인하 여건 생성까지 몇 달이나 몇 분기가 걸릴 수도"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;존 윌리엄스 미국 (뉴욕 연은 총재)&lt;/strong&gt;: "금리 인하는 데이터에 따라 결정할 것이며 좀 더 지켜봐야", "2% 목표를 달성할 수 있을 것", "중립금리는 많이 오르지 않은 듯", "최근 인플레이션 둔화에 상당한 진전이 있었지만 아직 갈 길 멀어", "지난 3개월 간 지표는 긍정적인 신호들"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;토마스 바킨 (리치먼드 연은 총재)&lt;/strong&gt;: "기준금리 인하를 위해 더 좋은 경제지표가 필요", "현 금리 수준은 충분히 제약적이지만 인하를 위해선 명확한 하락 신호가 필요", "미국 경제는 견조"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;로리 로건 (댈러스 연은 총재)&lt;/strong&gt;: "5월 CPI는 환영하지만 몇 달 더 좋은 지표가 필요"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;메리 데일리 (샌프란시스코 연은 총재)&lt;/strong&gt;: "인플레이션 뿐 아니라 고용에도 관심을 가져야 할 때", "5월 PCE는 굿 뉴스였지만 인하를 논하긴 아직 일러", "올해는 1~2회 금리인하가 적절할 것", "목표 달성 속도에 다가서는 중", "선제적 조치가 실수일 수도 있으니 신중히 판단해야"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;래피얼 보스틱 (애틀랜타 연은 총재)&lt;/strong&gt;: "올해 기준금리 인하는 한 차례 예상"&lt;/p&gt;
&lt;h2&gt;기타&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;닐 카시카리 (전 미니애폴리스 연은 총재)&lt;/strong&gt;: "금리 인하는 올 연말 1회만", "경제는 일부 완화되는 중"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;찰스 에반스 (전 시카고 연은 총재)&lt;/strong&gt;: "9월 금리 인하 가능할 것"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;래리 서머스 (전 재무장관)&lt;/strong&gt;: "연준과 투자자 모두 인플레이션 경로 예측이 심각하게 틀렸으며 과도한 낙관론은 경계해야"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;제임스 불러드 (전 세인트루이스 연은 총재)&lt;/strong&gt;: "7월 인하 가능성 없어"&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;7월 FOMC가 곧 열린다. 그렇다곤 해도 뭔가가 바뀔 것 같지는 않다. 그 배경에는 여러 연준 인사들의 발언들이 있다. 지난 글 이래로 있었던 여러 발언들을 또 모아봤다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;제롬 파월 (연준 의장)&lt;/strong&gt;: "최근 지표들로 디스인플레이션 경로 복귀, 하지만 인하를 위해선 자신감이 생길 정도의 증거 필요", "인플레이션 목표 2%까지 기다리면 너무 늦어져"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;아드리아나 쿠글러 (연준 이사)&lt;/strong&gt;: "아직은 인플레이션이 높고 추세도 불안정하지만 지속적인 디스인플레이션에 대해서는 낙관적", "올해 안에는 금리를 내려야 할 것"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;미셸 보먼 (연준 이사)&lt;/strong&gt;: "금리인상 여지 여전히 남아 있어"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;리사 쿡 (연준 이사)&lt;/strong&gt;: "지표에 달려있지만 언젠가는 금리를 인하할 것", "경제는 연착륙하고 실업률은 더 상승하지 않을 것"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;크리스토퍼 월러 (연준 이사)&lt;/strong&gt;: "기준금리 인하 시점이 가까워지고 있다"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;로레타 메스터 (클리블랜드 연은 총재)&lt;/strong&gt;: "디스인플레이션의 지속 여부 확인 후 금리 인하해야"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;오스탄 굴스비 (시카고 연은 총재)&lt;/strong&gt;: "5월 지표는 좋았지만 더 많은 진전을 봐야", "5월 수준의 진정세가 이어지면 금리 인하 가능", "최근의 좋은 지표들이 금리인하의 길을 열어줄 것", "수 달 내에 금리 인하해야", "노동시장 침체를 막을 수 있는 시기를 놓치면 안 돼"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;패트릭 하커 (필라델피아 연은 총재)&lt;/strong&gt;: "데이터에 따라 유동적이지만 현재로썬 올해 금리인하는 한 번 뿐일 것"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;수잔 콜린스 (보스턴 연은 총재)&lt;/strong&gt;: "목표로 향하고 있는지 판단하기엔 이르다"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;알베르토 무살렘 (세인트루이스 연은 총재)&lt;/strong&gt;: "인하 여건 생성까지 몇 달이나 몇 분기가 걸릴 수도"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;존 윌리엄스 미국 (뉴욕 연은 총재)&lt;/strong&gt;: "금리 인하는 데이터에 따라 결정할 것이며 좀 더 지켜봐야", "2% 목표를 달성할 수 있을 것", "중립금리는 많이 오르지 않은 듯", "최근 인플레이션 둔화에 상당한 진전이 있었지만 아직 갈 길 멀어", "지난 3개월 간 지표는 긍정적인 신호들"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;토마스 바킨 (리치먼드 연은 총재)&lt;/strong&gt;: "기준금리 인하를 위해 더 좋은 경제지표가 필요", "현 금리 수준은 충분히 제약적이지만 인하를 위해선 명확한 하락 신호가 필요", "미국 경제는 견조"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;로리 로건 (댈러스 연은 총재)&lt;/strong&gt;: "5월 CPI는 환영하지만 몇 달 더 좋은 지표가 필요"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;메리 데일리 (샌프란시스코 연은 총재)&lt;/strong&gt;: "인플레이션 뿐 아니라 고용에도 관심을 가져야 할 때", "5월 PCE는 굿 뉴스였지만 인하를 논하긴 아직 일러", "올해는 1~2회 금리인하가 적절할 것", "목표 달성 속도에 다가서는 중", "선제적 조치가 실수일 수도 있으니 신중히 판단해야"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;래피얼 보스틱 (애틀랜타 연은 총재)&lt;/strong&gt;: "올해 기준금리 인하는 한 차례 예상"&lt;/p&gt;
&lt;h2&gt;기타&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;닐 카시카리 (전 미니애폴리스 연은 총재)&lt;/strong&gt;: "금리 인하는 올 연말 1회만", "경제는 일부 완화되는 중"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;찰스 에반스 (전 시카고 연은 총재)&lt;/strong&gt;: "9월 금리 인하 가능할 것"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;래리 서머스 (전 재무장관)&lt;/strong&gt;: "연준과 투자자 모두 인플레이션 경로 예측이 심각하게 틀렸으며 과도한 낙관론은 경계해야"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;제임스 불러드 (전 세인트루이스 연은 총재)&lt;/strong&gt;: "7월 인하 가능성 없어"&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240727-00.html</guid>
      <pubDate>Sat, 27 Jul 2024 23:41:00 +0900</pubDate>
    </item>
    <item>
      <title>미국 6월 PCE, 작은 걸림돌 출현?</title>
      <link>https://seorenn.github.io/log/20240726-00.html</link>
      <description>&lt;p&gt;미국 6월 PCE가 발표되었다. 제목에서 느낄 수 있지만 약간은 좋지 못한 소식일 것 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 헤드라인 PCE MoM 0.1% (+0.1%), YoY 2.5% (-0.1%)&lt;/li&gt;
&lt;li&gt;미국 6월 근원 PCE MoM 0.2% (+0.1%), YoY 2.6%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일단 전년비 근원 PCE를 제외하곤 모두 예상에 부합했다. 단지 그 제외된 한 녀석만이 예상보다 살쪽 높게 나왔는데 하필이면 가장 중요하게 보는 녀석이다.&lt;/p&gt;
&lt;p&gt;그렇다면 7월 FOMC에는 영향이 있을까? 이미 시장의 예상도 그렇고 연준 인사들의 발언도 그렇고 7월은 애초에 동결로 결정(?)되어 있은니 영향은 없다고 봐도 될까? 투기판(?)엔 아직까진 9월 인하 확률은 거의 100%에 베팅되어 있다.&lt;/p&gt;
&lt;p&gt;같이 발표된 개인소득이나 개인지출이 둔화세를 보여줬다는 점이 그나마 인하 기대론에 찬물을 끼얹는 걸 막은 느낌이 들기도 했다. 아직 마이너스는 아니니 침체도 아니라고 봐도 되겠고 말이다.&lt;/p&gt;
&lt;p&gt;주식시장에선 딱히 호재도 악재도 아닌 느낌으로 흘러가는 듯하다. 그저 당장의 관심이 대선으로 쏠려있는 것 같다. 마침 오바마도 해리스 지지 선언을 했기에 사실상 해리스 대 트럼프 구도가 정해졌고 이제 유불리 판단을 위헤 늘 그랬듯이 불확실성이 떨어져 나가길 기다리고 있는 듯이 보인다.&lt;/p&gt;
&lt;p&gt;어쨌든 결론은 대충 이렇게 정리해 봐야겠다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;꺼지는 7월 인하론, 어쨌든 우겨보는 9월 인하론&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded>&lt;p&gt;미국 6월 PCE가 발표되었다. 제목에서 느낄 수 있지만 약간은 좋지 못한 소식일 것 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 헤드라인 PCE MoM 0.1% (+0.1%), YoY 2.5% (-0.1%)&lt;/li&gt;
&lt;li&gt;미국 6월 근원 PCE MoM 0.2% (+0.1%), YoY 2.6%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일단 전년비 근원 PCE를 제외하곤 모두 예상에 부합했다. 단지 그 제외된 한 녀석만이 예상보다 살쪽 높게 나왔는데 하필이면 가장 중요하게 보는 녀석이다.&lt;/p&gt;
&lt;p&gt;그렇다면 7월 FOMC에는 영향이 있을까? 이미 시장의 예상도 그렇고 연준 인사들의 발언도 그렇고 7월은 애초에 동결로 결정(?)되어 있은니 영향은 없다고 봐도 될까? 투기판(?)엔 아직까진 9월 인하 확률은 거의 100%에 베팅되어 있다.&lt;/p&gt;
&lt;p&gt;같이 발표된 개인소득이나 개인지출이 둔화세를 보여줬다는 점이 그나마 인하 기대론에 찬물을 끼얹는 걸 막은 느낌이 들기도 했다. 아직 마이너스는 아니니 침체도 아니라고 봐도 되겠고 말이다.&lt;/p&gt;
&lt;p&gt;주식시장에선 딱히 호재도 악재도 아닌 느낌으로 흘러가는 듯하다. 그저 당장의 관심이 대선으로 쏠려있는 것 같다. 마침 오바마도 해리스 지지 선언을 했기에 사실상 해리스 대 트럼프 구도가 정해졌고 이제 유불리 판단을 위헤 늘 그랬듯이 불확실성이 떨어져 나가길 기다리고 있는 듯이 보인다.&lt;/p&gt;
&lt;p&gt;어쨌든 결론은 대충 이렇게 정리해 봐야겠다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;꺼지는 7월 인하론, 어쨌든 우겨보는 9월 인하론&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240726-00.html</guid>
      <pubDate>Fri, 26 Jul 2024 23:50:00 +0900</pubDate>
    </item>
    <item>
      <title>FPIES? 유아 알레르기? 뭐지 이건?</title>
      <link>https://seorenn.github.io/article/fpies-allergy.html</link>
      <description>&lt;p&gt;생후 9개월 가량 된 둘째가 어느날 갑자기 심한 구토를 했다. 이유식으로 점심을 먹고 약 2시간 정도 지난 후 낮잠을 자기 위해 누웠다 분수토를 한 이후 세 차례에 걸쳐 먹은 것을 거의 모두 토해냈다. 부모로써는 걱정스러운 일이다. 어디 아픈가 걱정되기도 하고 빈 속이 되어서 배고프지 않을까 하는 걱정도 되고 말이다. 거기다 이런 일이 두 번째라 더더욱 마음에 걸렸다. &lt;/p&gt;
&lt;p&gt;과거의 사례는 잘 기억이 안 나지만 달걀과 관련이 있을 것 같다. 최근의 경우 평소 식사와 차이점이 있다는 달걀을 먹였다는 점이기 때문이다. 예전에는 달걀 노른자만 먹였었다면 이번에는 흰자까지 같이 먹였다는 차이가 있다. 다만 아이가 거부해서 오히려 더 적게 먹기는 했다. 종합해보면 달걀 알레르기일 가능성을 생각해 볼 수 있다.&lt;/p&gt;
&lt;p&gt;그래서 관련해서 찾아보니 달걀 알레르기일 가능성에 관한 많은 글을 찾을 수 있었다. 거기다 생소한 단어도 하나 더 알게 된다. 바로 이 글의 주제인 FPIES다.&lt;/p&gt;
&lt;h2&gt;FPIES&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;FPIES: Food Protein-Induced Enterocolitis Syndrome&lt;br/&gt;식품 단백질 유발성 장염 증후군&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;FPIES는 음식 섭취 후 수 시간 이내에 알레르기 반응으로 의심되는 구토가 발생하는 증상이다. 그리고 이후 설사로 이어질 수도 있다는 특징이 있다. 알레르기와 비슷하지만 반응이 지연되어서 나타난다는 점 또한 주요한 특징이며 그래서 '지연된 음식 알레르기' 등으로 표현하기도 한다.&lt;/p&gt;
&lt;p&gt;이 FPIES는 모유에서는 발병이 거의 없는 편이다. 대신 분유나 이유식을 먹었을 때, 특히 모유만 먹다 분유나 이유식을 시작했을 때 발생할 수 있다.&lt;/p&gt;
&lt;p&gt;모든 알레르기가 그렇지만 이 증후군도 어떤 음식물에 의해 발생하는지 정해져 있지도 않고 딱히 치료약이나 예방 백신 같은 것도 없다. 다만 알레르기라는 특징, 즉 알레르기 유발원(알레르겐)을 파악하면 증상 발생을 회피할 수도 있다. 의심되는 음식물을 안 먹이면 된다는 말이다.&lt;/p&gt;
&lt;p&gt;다행히도 &lt;strong&gt;FPIES는 유아 시기를 지나는 3~5세 정도로 성장하면 대체로 사라지는 편&lt;/strong&gt;이라고 한다. 아마도 미숙한 상태에서만 발생하는 알레르기 정도로 생각해 볼 수 있을 것 같다. 따라서 크게 걱정할 필요는 없을 것 같다. &lt;/p&gt;
&lt;p&gt;하지만 구토로 기도가 막히면 심각한 일이 벌어질 수도 있고, 영양분을 제대로 섭취할 수 없는 문제도 있으니 알레르겐 음식물을 무리해서 먹이지는 말아야 할 것 같다.&lt;/p&gt;
&lt;h2&gt;여담&lt;/h2&gt;
&lt;p&gt;애초에 달걀은 유명한 알레르겐이다. 거기다 텁텁하고 입 천장에 잘 달라붙는 식감도 구토를 유발할 수 있다. 반숙으로 먹으면 몇몇 단점이 사라지긴 하지만 유아에게 안 익은 노른자를 먹이는 것도 해서는 안 될 일 같고 그렇다고 이 영양가 높은 음식을 안 먹이는 것도 여러모로 참 안타까운 일이다.&lt;/p&gt;
&lt;p&gt;어쨌든 달걀이 알레르겐으로 의심된다고 해도 무작정 달걀 섭취를 중단할 필요까지는 없을 지도 모르겠다. 조금씩 먹여 보면서 사태를 지켜보고 인과관계가 강하게 의심되면 소아과를 방문해서 상담해보는 것이 좋을 것 같다.&lt;/p&gt;
&lt;p&gt;물론 FPIES 같은 지연된 반응이 아닌 아나필락시스(급성 알레르기 쇼크), 특히 얼굴이나 입술이 붓는 등의 증상이 갑자기 발생하는 것 같으면 반드시 섭취를 중단하고 최대한 빠르게 병원에 가본는 것을 추천한다. 만에 하나 호흡기나 혈액순환계에 부종이 생기면 치명적일 수도 있다.&lt;/p&gt;
&lt;p&gt;참고로 증상이 있었던 둘째는 하루 정도만 구토로 고생하고 다음날엔 다행히도 원래대로 회복되었다. 다만 그 뒤로 달걀 섭취는 아직 시도하지 않고 있다. '언젠가는 시도해 봐야지' 생각만 하며 시간은 좀 흘러가고 있다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;생후 9개월 가량 된 둘째가 어느날 갑자기 심한 구토를 했다. 이유식으로 점심을 먹고 약 2시간 정도 지난 후 낮잠을 자기 위해 누웠다 분수토를 한 이후 세 차례에 걸쳐 먹은 것을 거의 모두 토해냈다. 부모로써는 걱정스러운 일이다. 어디 아픈가 걱정되기도 하고 빈 속이 되어서 배고프지 않을까 하는 걱정도 되고 말이다. 거기다 이런 일이 두 번째라 더더욱 마음에 걸렸다. &lt;/p&gt;
&lt;p&gt;과거의 사례는 잘 기억이 안 나지만 달걀과 관련이 있을 것 같다. 최근의 경우 평소 식사와 차이점이 있다는 달걀을 먹였다는 점이기 때문이다. 예전에는 달걀 노른자만 먹였었다면 이번에는 흰자까지 같이 먹였다는 차이가 있다. 다만 아이가 거부해서 오히려 더 적게 먹기는 했다. 종합해보면 달걀 알레르기일 가능성을 생각해 볼 수 있다.&lt;/p&gt;
&lt;p&gt;그래서 관련해서 찾아보니 달걀 알레르기일 가능성에 관한 많은 글을 찾을 수 있었다. 거기다 생소한 단어도 하나 더 알게 된다. 바로 이 글의 주제인 FPIES다.&lt;/p&gt;
&lt;h2&gt;FPIES&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;FPIES: Food Protein-Induced Enterocolitis Syndrome&lt;br/&gt;식품 단백질 유발성 장염 증후군&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;FPIES는 음식 섭취 후 수 시간 이내에 알레르기 반응으로 의심되는 구토가 발생하는 증상이다. 그리고 이후 설사로 이어질 수도 있다는 특징이 있다. 알레르기와 비슷하지만 반응이 지연되어서 나타난다는 점 또한 주요한 특징이며 그래서 '지연된 음식 알레르기' 등으로 표현하기도 한다.&lt;/p&gt;
&lt;p&gt;이 FPIES는 모유에서는 발병이 거의 없는 편이다. 대신 분유나 이유식을 먹었을 때, 특히 모유만 먹다 분유나 이유식을 시작했을 때 발생할 수 있다.&lt;/p&gt;
&lt;p&gt;모든 알레르기가 그렇지만 이 증후군도 어떤 음식물에 의해 발생하는지 정해져 있지도 않고 딱히 치료약이나 예방 백신 같은 것도 없다. 다만 알레르기라는 특징, 즉 알레르기 유발원(알레르겐)을 파악하면 증상 발생을 회피할 수도 있다. 의심되는 음식물을 안 먹이면 된다는 말이다.&lt;/p&gt;
&lt;p&gt;다행히도 &lt;strong&gt;FPIES는 유아 시기를 지나는 3~5세 정도로 성장하면 대체로 사라지는 편&lt;/strong&gt;이라고 한다. 아마도 미숙한 상태에서만 발생하는 알레르기 정도로 생각해 볼 수 있을 것 같다. 따라서 크게 걱정할 필요는 없을 것 같다. &lt;/p&gt;
&lt;p&gt;하지만 구토로 기도가 막히면 심각한 일이 벌어질 수도 있고, 영양분을 제대로 섭취할 수 없는 문제도 있으니 알레르겐 음식물을 무리해서 먹이지는 말아야 할 것 같다.&lt;/p&gt;
&lt;h2&gt;여담&lt;/h2&gt;
&lt;p&gt;애초에 달걀은 유명한 알레르겐이다. 거기다 텁텁하고 입 천장에 잘 달라붙는 식감도 구토를 유발할 수 있다. 반숙으로 먹으면 몇몇 단점이 사라지긴 하지만 유아에게 안 익은 노른자를 먹이는 것도 해서는 안 될 일 같고 그렇다고 이 영양가 높은 음식을 안 먹이는 것도 여러모로 참 안타까운 일이다.&lt;/p&gt;
&lt;p&gt;어쨌든 달걀이 알레르겐으로 의심된다고 해도 무작정 달걀 섭취를 중단할 필요까지는 없을 지도 모르겠다. 조금씩 먹여 보면서 사태를 지켜보고 인과관계가 강하게 의심되면 소아과를 방문해서 상담해보는 것이 좋을 것 같다.&lt;/p&gt;
&lt;p&gt;물론 FPIES 같은 지연된 반응이 아닌 아나필락시스(급성 알레르기 쇼크), 특히 얼굴이나 입술이 붓는 등의 증상이 갑자기 발생하는 것 같으면 반드시 섭취를 중단하고 최대한 빠르게 병원에 가본는 것을 추천한다. 만에 하나 호흡기나 혈액순환계에 부종이 생기면 치명적일 수도 있다.&lt;/p&gt;
&lt;p&gt;참고로 증상이 있었던 둘째는 하루 정도만 구토로 고생하고 다음날엔 다행히도 원래대로 회복되었다. 다만 그 뒤로 달걀 섭취는 아직 시도하지 않고 있다. '언젠가는 시도해 봐야지' 생각만 하며 시간은 좀 흘러가고 있다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/fpies-allergy.html</guid>
      <pubDate>Fri, 26 Jul 2024 14:31:00 +0900</pubDate>
    </item>
    <item>
      <title>Emacs의 evil-surround 확장 소개 및 기본 사용법</title>
      <link>https://seorenn.github.io/article/emacs-evil-surround.html</link>
      <description>&lt;p&gt;evil-surround는 surround.vim 기능을 거의 그대로 Emacs의 Evil 용으로 옮겨놓은 듯한 확장이다. 이름처럼 뭔가를 둘러싸거나(surrounding) 둘러싸인 문자를 건드리는 등의 기능을 제공한다.&lt;/p&gt;
&lt;p&gt;설치 방법은 각자의 상황에 따라 다르니 일단 생략한다. 개인적으로는 Doom Emacs 설정 팩을 쓰고 있고 여기에는 기본 설정으로 들어있기 때문에 그대로 쓰고 있다. 당연하게도 관련 확장을 설치한 Vim에서도 동일한 방식으로 사용할 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;이제 기본 사용법을 정리해 보자.&lt;/p&gt;
&lt;h2&gt;선택영역 둘러싸기&lt;/h2&gt;
&lt;p&gt;비주얼 모드에서 &lt;code&gt;S&lt;/code&gt;를 누른 후 특정 문자를 입력하면 해당 문자가 좌우에 쌍(pair)으로 입력된다. 예를 들어 아래 예에서 &lt;code&gt;BOLD&lt;/code&gt; 부분을 비주얼 모드로 선택했다고 치자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is BOLD style in Org Mode.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 영역으로 선택된 상태에서 &lt;code&gt;S=&lt;/code&gt;을 입력하면 아래와 같이 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is =BOLD= style in Org Mode.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;보다시피 입력된 문자가 선택영역 좌우에 입력되는 것을 알 수 있다. 이게 바로 이 Surround의 가장 토대가 되는 기능이라고 볼 수 있다.&lt;/p&gt;
&lt;h2&gt;선택영역 둘러싸기 (2)&lt;/h2&gt;
&lt;p&gt;둘러싸기 기능에서 한가지 더 특수한 기능이 있는데 바로 짝이 있는 문자로 둘러싸기 기능이 있다. 예를 들자면 괄호 입력 등이 있다. 다만 특징이 한가지 있다면 짝 중에 닫는 문자와 여는 문자 어떤 걸 입력하느냐에 따라 동작이 약간 다르다는 점이 있다.&lt;/p&gt;
&lt;p&gt;예를 들어 아래와 같은 경우를 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print &amp;quot;Hello World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;"Hello World"&lt;/code&gt; 부분을 비주얼 모드로 선택해 주고 &lt;code&gt;S)&lt;/code&gt;를 입려해주면 아래와 같이 변한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print (&amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;조금 다르게 다시 원래 상태에서 똑같이 선택해 주고 &lt;code&gt;S(&lt;/code&gt;를 입력하면 이번에는 이렇게 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print ( &amp;quot;Hello World&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;보다시피 짝 문자를 넣어주지만 공백을 한 칸 넣어주는 특이한 방식으로 동작한다.&lt;/p&gt;
&lt;p&gt;개인적으로는 닫는 문자를 입력하는 방식을 선호한다. 어쨌든 이런 식으로 중괄호나 대괄호 같이 짝이 있는 문자로 둘러싸기를 좀 더 쉽게 할 수 있다.&lt;/p&gt;
&lt;h2&gt;더 크게 둘러싸기(?)&lt;/h2&gt;
&lt;p&gt;부제를 정하는 데 좀 난감했는데, 예를 들자면 C언어 혹은 파생 언어에서 특정 코드를 블럭으로 만들 때 유용하게 쓸 수 있는 기능이 있다. 아래의 예제를 살펴보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int value = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 한 줄을 비주얼 모드로 선택해 주고 이번에는 &lt;code&gt;gS}&lt;/code&gt;를 입력해 보자. 아래와 같이 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
int value = 0;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이런 식으로 짝 문자로 둘러싸되 개행문자를 넣어서 둘러싸준다.&lt;/p&gt;
&lt;p&gt;사실 scratch 버퍼에서 테스트 했기 때문에 모양이 좀 이상한 것 같은데, 적절한 언어 메이저 모드로 동작 중이었다면 들여쓰기가 자연스럽게 적용되었을 것이다.&lt;/p&gt;
&lt;h2&gt;둘러싸는 문자 바꾸기&lt;/h2&gt;
&lt;p&gt;노멀 모드에서 원하는 라인에 커서를 놓고 &lt;code&gt;cs&lt;/code&gt; 키 이후 바꾸려는 문자와 바꿀 문자를 연달아 입력하면 둘러싸는 문자가 원하는 문자로 바뀐다. 예를 들어 아래의 경우를 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;Hello World&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 줄의 아무 곳에서 커서를 놓고 &lt;code&gt;cs"'&lt;/code&gt;를 입력하면 아래와 같이 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print('Hello World');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;즉 &lt;code&gt;"&lt;/code&gt; 문자가 &lt;code&gt;'&lt;/code&gt;로 바뀌였다.&lt;/p&gt;
&lt;h2&gt;페어 문자 삭제하기&lt;/h2&gt;
&lt;p&gt;둘러싸기가 있다면 삭제하기도 있기 마련이다. 이 기능도 딱히 선택영역 없이 커서가 위치하는 라인에서 &lt;code&gt;ds&lt;/code&gt;를 누른 후 삭제하기 원하는 문자를 입력하면 된다. 예를 들어 아래의 같은 문자열의 라인에 커서를 놔뒀다고 가정하자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;value = object.get(&amp;quot;DEFAULT_NAME&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 상황에서 &lt;code&gt;ds"&lt;/code&gt;를 눌러주면 아래와 같이 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;value = object.get(DEFAULT_NAME)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자주 쓸 기능은 아닌 것 같지만 글을 쓸 때 종종 쓸 일이 있을 것 같기는 하다.&lt;/p&gt;
&lt;h2&gt;마무리 및 관련된 링크&lt;/h2&gt;
&lt;p&gt;공식 저장소에서 소개하는 기능 몇가지는 무슨 이유인지 제대로 동작하지 않는 게 있어서 확인하지는 못했다. 개인적으로 자주 사용하는 기능은 아니지만 확인하지 못 한 건 좀 아쉽다.&lt;/p&gt;
&lt;p&gt;어쨌거나 기본적인 사용법만 정리해 봤지만 이 정도만 해도 제법 사용처가 무궁무진하다. 물론 여기다 커스터마이징까지 가능하니 필요하다면 공식 사이트를 둘러보며 사용법을 알아보는 것도 나쁘지는 않을 것 같다. 다만 개인적으로는 딱히 커스터마이징이 필요 없을 정도로 기본 설정이 잘 되어 있다고 생각하며 그래서 별다른 설정 없이 아주 잘 쓰고 있는 확장이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emacs-evil/evil-surround" target="_blank"&gt;evil-surround (GitHub)📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-surround" target="_blank"&gt;surround.vim (GitHub)📎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;p&gt;evil-surround는 surround.vim 기능을 거의 그대로 Emacs의 Evil 용으로 옮겨놓은 듯한 확장이다. 이름처럼 뭔가를 둘러싸거나(surrounding) 둘러싸인 문자를 건드리는 등의 기능을 제공한다.&lt;/p&gt;
&lt;p&gt;설치 방법은 각자의 상황에 따라 다르니 일단 생략한다. 개인적으로는 Doom Emacs 설정 팩을 쓰고 있고 여기에는 기본 설정으로 들어있기 때문에 그대로 쓰고 있다. 당연하게도 관련 확장을 설치한 Vim에서도 동일한 방식으로 사용할 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;이제 기본 사용법을 정리해 보자.&lt;/p&gt;
&lt;h2&gt;선택영역 둘러싸기&lt;/h2&gt;
&lt;p&gt;비주얼 모드에서 &lt;code&gt;S&lt;/code&gt;를 누른 후 특정 문자를 입력하면 해당 문자가 좌우에 쌍(pair)으로 입력된다. 예를 들어 아래 예에서 &lt;code&gt;BOLD&lt;/code&gt; 부분을 비주얼 모드로 선택했다고 치자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is BOLD style in Org Mode.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 영역으로 선택된 상태에서 &lt;code&gt;S=&lt;/code&gt;을 입력하면 아래와 같이 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is =BOLD= style in Org Mode.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;보다시피 입력된 문자가 선택영역 좌우에 입력되는 것을 알 수 있다. 이게 바로 이 Surround의 가장 토대가 되는 기능이라고 볼 수 있다.&lt;/p&gt;
&lt;h2&gt;선택영역 둘러싸기 (2)&lt;/h2&gt;
&lt;p&gt;둘러싸기 기능에서 한가지 더 특수한 기능이 있는데 바로 짝이 있는 문자로 둘러싸기 기능이 있다. 예를 들자면 괄호 입력 등이 있다. 다만 특징이 한가지 있다면 짝 중에 닫는 문자와 여는 문자 어떤 걸 입력하느냐에 따라 동작이 약간 다르다는 점이 있다.&lt;/p&gt;
&lt;p&gt;예를 들어 아래와 같은 경우를 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print &amp;quot;Hello World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;"Hello World"&lt;/code&gt; 부분을 비주얼 모드로 선택해 주고 &lt;code&gt;S)&lt;/code&gt;를 입려해주면 아래와 같이 변한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print (&amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;조금 다르게 다시 원래 상태에서 똑같이 선택해 주고 &lt;code&gt;S(&lt;/code&gt;를 입력하면 이번에는 이렇게 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print ( &amp;quot;Hello World&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;보다시피 짝 문자를 넣어주지만 공백을 한 칸 넣어주는 특이한 방식으로 동작한다.&lt;/p&gt;
&lt;p&gt;개인적으로는 닫는 문자를 입력하는 방식을 선호한다. 어쨌든 이런 식으로 중괄호나 대괄호 같이 짝이 있는 문자로 둘러싸기를 좀 더 쉽게 할 수 있다.&lt;/p&gt;
&lt;h2&gt;더 크게 둘러싸기(?)&lt;/h2&gt;
&lt;p&gt;부제를 정하는 데 좀 난감했는데, 예를 들자면 C언어 혹은 파생 언어에서 특정 코드를 블럭으로 만들 때 유용하게 쓸 수 있는 기능이 있다. 아래의 예제를 살펴보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int value = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 한 줄을 비주얼 모드로 선택해 주고 이번에는 &lt;code&gt;gS}&lt;/code&gt;를 입력해 보자. 아래와 같이 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
int value = 0;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이런 식으로 짝 문자로 둘러싸되 개행문자를 넣어서 둘러싸준다.&lt;/p&gt;
&lt;p&gt;사실 scratch 버퍼에서 테스트 했기 때문에 모양이 좀 이상한 것 같은데, 적절한 언어 메이저 모드로 동작 중이었다면 들여쓰기가 자연스럽게 적용되었을 것이다.&lt;/p&gt;
&lt;h2&gt;둘러싸는 문자 바꾸기&lt;/h2&gt;
&lt;p&gt;노멀 모드에서 원하는 라인에 커서를 놓고 &lt;code&gt;cs&lt;/code&gt; 키 이후 바꾸려는 문자와 바꿀 문자를 연달아 입력하면 둘러싸는 문자가 원하는 문자로 바뀐다. 예를 들어 아래의 경우를 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;Hello World&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 줄의 아무 곳에서 커서를 놓고 &lt;code&gt;cs"'&lt;/code&gt;를 입력하면 아래와 같이 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print('Hello World');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;즉 &lt;code&gt;"&lt;/code&gt; 문자가 &lt;code&gt;'&lt;/code&gt;로 바뀌였다.&lt;/p&gt;
&lt;h2&gt;페어 문자 삭제하기&lt;/h2&gt;
&lt;p&gt;둘러싸기가 있다면 삭제하기도 있기 마련이다. 이 기능도 딱히 선택영역 없이 커서가 위치하는 라인에서 &lt;code&gt;ds&lt;/code&gt;를 누른 후 삭제하기 원하는 문자를 입력하면 된다. 예를 들어 아래의 같은 문자열의 라인에 커서를 놔뒀다고 가정하자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;value = object.get(&amp;quot;DEFAULT_NAME&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 상황에서 &lt;code&gt;ds"&lt;/code&gt;를 눌러주면 아래와 같이 바뀐다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;value = object.get(DEFAULT_NAME)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자주 쓸 기능은 아닌 것 같지만 글을 쓸 때 종종 쓸 일이 있을 것 같기는 하다.&lt;/p&gt;
&lt;h2&gt;마무리 및 관련된 링크&lt;/h2&gt;
&lt;p&gt;공식 저장소에서 소개하는 기능 몇가지는 무슨 이유인지 제대로 동작하지 않는 게 있어서 확인하지는 못했다. 개인적으로 자주 사용하는 기능은 아니지만 확인하지 못 한 건 좀 아쉽다.&lt;/p&gt;
&lt;p&gt;어쨌거나 기본적인 사용법만 정리해 봤지만 이 정도만 해도 제법 사용처가 무궁무진하다. 물론 여기다 커스터마이징까지 가능하니 필요하다면 공식 사이트를 둘러보며 사용법을 알아보는 것도 나쁘지는 않을 것 같다. 다만 개인적으로는 딱히 커스터마이징이 필요 없을 정도로 기본 설정이 잘 되어 있다고 생각하며 그래서 별다른 설정 없이 아주 잘 쓰고 있는 확장이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emacs-evil/evil-surround" target="_blank"&gt;evil-surround (GitHub)📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-surround" target="_blank"&gt;surround.vim (GitHub)📎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/emacs-evil-surround.html</guid>
      <pubDate>Wed, 24 Jul 2024 23:14:00 +0900</pubDate>
    </item>
    <item>
      <title>Python 모듈 이름 알아내기</title>
      <link>https://seorenn.github.io/article/python-find-out-module-name.html</link>
      <description>&lt;p&gt;혹시나 어떤 의존성을 설치하고 import로 쓰려고 하는데 이름을 알 수 없는 경우가 있다면 어떻게 찾아야 할까? 간단히 알아보자.&lt;/p&gt;
&lt;h2&gt;이 글을 적게 된 발단&lt;/h2&gt;
&lt;p&gt;발단은 마크다운 모듈에서 매크로 기능을 알아보던 중 일어났다. &lt;code&gt;markdown_macros&lt;/code&gt; 라는 모듈이 마음에 들어서 설치를 해봤다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install markdown_macros
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;설치는 잘 끝났다.&lt;/p&gt;
&lt;p&gt;문제는 공식 예제 코드를 거의 그대로 복사한 코드가 동작하지 않았다는 데 있다. 문제의 코드는 아래 부분이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from markdown_macros import MacroExtension
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;어처구니 없게도 모듈 사용의 시작점에 해당하는 import 단계에서 아래와 같은 오류가 발생하고 있었다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ModuleNotFoundError: No module named 'markdown_macros'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;정말 어처구니가 없었다. 이건 공식 예제가 아니었던 걸까? 아니면 내가 뭔가 착각하고 있는 것일까? &lt;/p&gt;
&lt;p&gt;공식 사이트에서는 별다른 이슈나 언급이 없었다. 도대체 뭘까? 어떻게 된 일일까?&lt;/p&gt;
&lt;h2&gt;해답: 모듈의 정확한 이름 알아내기&lt;/h2&gt;
&lt;p&gt;혹시나 &lt;code&gt;markdown_macros&lt;/code&gt;의 설치된 실제 모듈 이름을 알고 싶어한다면 답은 &lt;code&gt;mdx_macros&lt;/code&gt;라는 좀 다른 것이라는 점을 먼저 밝힌다.&lt;/p&gt;
&lt;p&gt;이것을 찾는 과정은 순탄치 않았지만 결론적으로 아래 커맨드로 확인할 수 있었다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-jsx"&gt;pydoc modules
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 커맨드를 입력하면 방대한 모듈 목록이 나열된다. 아래는 실제 출력 결과의 내용들 중 불필요한 일부를 생략한 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-jsx"&gt;$ pydoc modules

Please wait a moment while I gather a list of all available modules...

test_sqlite3: testing with SQLite version 3.45.2
__future__          _testmultiphase     graphlib            rlcompleter
...
_datetime           bisect              markdown            subprocess
_dbm                builtins            markupsafe          sunau
_decimal            bz2                 marshal             symtable
_elementtree        cProfile            math                sys
_functools          calendar            mdx_macros          sysconfig
...
_testinternalcapi   glob                resource
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;결국 여기서 &lt;code&gt;mdx_macros&lt;/code&gt;라는 이름을 찾았고 혹시나해서 import해서 &lt;code&gt;dir&lt;/code&gt;로 확인해보니 원하는 모듈임을 확인할 수 있었다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; import mdx_macros
&amp;gt;&amp;gt;&amp;gt; dir(mdx_macros)
[ ... 'MacroExtension', ...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt;으로 표시한 부분은 불필요해서 생략했다는 것에 주의하자.&lt;/p&gt;
&lt;p&gt;어쨌든 이런 식으로 문제가 무엇이고 어떻게 해결할 수 있는지 알 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;참고로 파이썬 패키지 목록을 구할 수 있는 방법은 여러가지지만, 패키지 이름이 아닌 실제로 import 해야 하는 모듈 명은 알아내는 것은 pydoc을 이용하는 방법이 유용했다. &lt;/p&gt;
&lt;p&gt;이 외에 다른 방법도 하나 있는데 help 커맨드를 이용하는 방법이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ python -c 'help(&amp;quot;modules&amp;quot;)'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 커맨드는 위의 pydoc의 실행 결과와 동일한 내용을 출력한다. 단지 커맨드라인에서는 pydoc을 쓰는 방법이 명령어가 짧아서 편했다는 차이가 있을 것 같다. 하지만 만약 python REPL에서 확인하려면 help 커맨드를 쓰는 것이 더 편할 것 같다.&lt;/p&gt;
&lt;h2&gt;추신&lt;/h2&gt;
&lt;p&gt;참고로 이 &lt;code&gt;markdown_macros&lt;/code&gt; 패키지는 이름이 비슷한 하지만 전혀 다른 두 모듈이 존재해서 착각해서 발생한 문제였다. pip에서 search 커맨드를 지원하지 않으니 이런 오해가 종종 발생할 수도 있는 듯하다.&lt;/p&gt;
&lt;p&gt;참고로 하나 더 말하자면 이 모듈과 이름이 비슷한 다른 모듈 둘 다 현재는 개인적으로 쓰지 않는다. 아무래도 더이상 유지보수 되지 않아써 뭔가 써먹기가 힘든 것 같아서 직접 다른 방식으로 구현했다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;혹시나 어떤 의존성을 설치하고 import로 쓰려고 하는데 이름을 알 수 없는 경우가 있다면 어떻게 찾아야 할까? 간단히 알아보자.&lt;/p&gt;
&lt;h2&gt;이 글을 적게 된 발단&lt;/h2&gt;
&lt;p&gt;발단은 마크다운 모듈에서 매크로 기능을 알아보던 중 일어났다. &lt;code&gt;markdown_macros&lt;/code&gt; 라는 모듈이 마음에 들어서 설치를 해봤다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install markdown_macros
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;설치는 잘 끝났다.&lt;/p&gt;
&lt;p&gt;문제는 공식 예제 코드를 거의 그대로 복사한 코드가 동작하지 않았다는 데 있다. 문제의 코드는 아래 부분이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from markdown_macros import MacroExtension
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;어처구니 없게도 모듈 사용의 시작점에 해당하는 import 단계에서 아래와 같은 오류가 발생하고 있었다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ModuleNotFoundError: No module named 'markdown_macros'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;정말 어처구니가 없었다. 이건 공식 예제가 아니었던 걸까? 아니면 내가 뭔가 착각하고 있는 것일까? &lt;/p&gt;
&lt;p&gt;공식 사이트에서는 별다른 이슈나 언급이 없었다. 도대체 뭘까? 어떻게 된 일일까?&lt;/p&gt;
&lt;h2&gt;해답: 모듈의 정확한 이름 알아내기&lt;/h2&gt;
&lt;p&gt;혹시나 &lt;code&gt;markdown_macros&lt;/code&gt;의 설치된 실제 모듈 이름을 알고 싶어한다면 답은 &lt;code&gt;mdx_macros&lt;/code&gt;라는 좀 다른 것이라는 점을 먼저 밝힌다.&lt;/p&gt;
&lt;p&gt;이것을 찾는 과정은 순탄치 않았지만 결론적으로 아래 커맨드로 확인할 수 있었다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-jsx"&gt;pydoc modules
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 커맨드를 입력하면 방대한 모듈 목록이 나열된다. 아래는 실제 출력 결과의 내용들 중 불필요한 일부를 생략한 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-jsx"&gt;$ pydoc modules

Please wait a moment while I gather a list of all available modules...

test_sqlite3: testing with SQLite version 3.45.2
__future__          _testmultiphase     graphlib            rlcompleter
...
_datetime           bisect              markdown            subprocess
_dbm                builtins            markupsafe          sunau
_decimal            bz2                 marshal             symtable
_elementtree        cProfile            math                sys
_functools          calendar            mdx_macros          sysconfig
...
_testinternalcapi   glob                resource
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;결국 여기서 &lt;code&gt;mdx_macros&lt;/code&gt;라는 이름을 찾았고 혹시나해서 import해서 &lt;code&gt;dir&lt;/code&gt;로 확인해보니 원하는 모듈임을 확인할 수 있었다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; import mdx_macros
&amp;gt;&amp;gt;&amp;gt; dir(mdx_macros)
[ ... 'MacroExtension', ...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt;으로 표시한 부분은 불필요해서 생략했다는 것에 주의하자.&lt;/p&gt;
&lt;p&gt;어쨌든 이런 식으로 문제가 무엇이고 어떻게 해결할 수 있는지 알 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;참고로 파이썬 패키지 목록을 구할 수 있는 방법은 여러가지지만, 패키지 이름이 아닌 실제로 import 해야 하는 모듈 명은 알아내는 것은 pydoc을 이용하는 방법이 유용했다. &lt;/p&gt;
&lt;p&gt;이 외에 다른 방법도 하나 있는데 help 커맨드를 이용하는 방법이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ python -c 'help(&amp;quot;modules&amp;quot;)'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 커맨드는 위의 pydoc의 실행 결과와 동일한 내용을 출력한다. 단지 커맨드라인에서는 pydoc을 쓰는 방법이 명령어가 짧아서 편했다는 차이가 있을 것 같다. 하지만 만약 python REPL에서 확인하려면 help 커맨드를 쓰는 것이 더 편할 것 같다.&lt;/p&gt;
&lt;h2&gt;추신&lt;/h2&gt;
&lt;p&gt;참고로 이 &lt;code&gt;markdown_macros&lt;/code&gt; 패키지는 이름이 비슷한 하지만 전혀 다른 두 모듈이 존재해서 착각해서 발생한 문제였다. pip에서 search 커맨드를 지원하지 않으니 이런 오해가 종종 발생할 수도 있는 듯하다.&lt;/p&gt;
&lt;p&gt;참고로 하나 더 말하자면 이 모듈과 이름이 비슷한 다른 모듈 둘 다 현재는 개인적으로 쓰지 않는다. 아무래도 더이상 유지보수 되지 않아써 뭔가 써먹기가 힘든 것 같아서 직접 다른 방식으로 구현했다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/python-find-out-module-name.html</guid>
      <pubDate>Tue, 23 Jul 2024 23:42:00 +0900</pubDate>
    </item>
    <item>
      <title>Emacs Lisp에서 셸 커맨드를 터미널을 통해 실행시키기</title>
      <link>https://seorenn.github.io/article/emacs-lisp-run-cli-cmd-from-terminal-window.html</link>
      <description>&lt;p&gt;이 글은 Emacs Lisp에서 셸 CLI 커맨드를 Emacs 자체 터미널을 통해 실행시키는 방법을 정리한다.&lt;/p&gt;
&lt;h2&gt;요구사항&lt;/h2&gt;
&lt;p&gt;이 기능이 왜 필요했냐면 개인적으로 만든 스크립트를 Emacs 내에서 실행시키고 싶어서다. 단 해당 스크립트가 출력하는 내용을 확인하고 싶지만 현재 버퍼에서 하던 작업도 방해는 하지 않았으면 했기에 셸 커맨드를 실행시키는 전용 함수가 아닌 이맥스 내장 터미널을 통해 실행시키는 것을 원했다.&lt;/p&gt;
&lt;p&gt;조금은 제한적인(?) 기능이라 이런 기능의 함수를 이맥스가 자체적으로 제공하는 것 같지는 않았고 결국 만드는 수밖에 없었다. 다행히도 힌트가 여기저기 있었기에 큰 삽질 없이 작성할 수 있었다.&lt;/p&gt;
&lt;h2&gt;완성된 코드 샘플&lt;/h2&gt;
&lt;p&gt;필요한 기능의 핵심은 &lt;code&gt;make-term&lt;/code&gt;이라는 함수다. 이 함수를 이용하면 원하는 셸로 원하는 커맨드를 실행시킬 수 있는 내장 터미널 버퍼를 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;아래 코드는 사이드 윈도우에 터미널을 열고 거기서 zsh을 통해 어떤 셸 스크립트를 실행시키는 함수다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(defun run-my-some-command-from-terminal ()
  (interactive)
  (let ((buffer (make-term &amp;quot;*my-some-terminal-command-buffer*&amp;quot;
                           &amp;quot;/bin/zsh&amp;quot;
                           nil
                           &amp;quot;-c&amp;quot; &amp;quot;some_weird_script.sh --foo --bar&amp;quot;)))
    (display-buffer-in-side-window
     buffer `((window-height . ,multi-term-dedicated-window-height)))
    (select-window (get-buffer-window buffer))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;make-term&lt;/code&gt;의 매개변수로 넘어가는 부분들이 핵심이다. 버퍼 이름은 원하는 대로 짓거나 매번 랜덤하게 지어도 된다. 그리고 &lt;code&gt;-c&lt;/code&gt; 부분 이후에 필요한 셸 커맨드를 적을 수 있다.&lt;/p&gt;
&lt;p&gt;그 아래 부분들 중 &lt;code&gt;display-buffer-in-side-window&lt;/code&gt; 함수는 사이드 윈도우에 터미널을 띄우기 위한 용도다. 따라서 사이드가 아닌 특정 윈도우에 터미널 버퍼를 띄우려면 대신 &lt;code&gt;display-buffer&lt;/code&gt; 함수를 이용할 수 있다.&lt;/p&gt;
&lt;p&gt;마지막의 &lt;code&gt;select-window&lt;/code&gt;는 사실 꼭 필요한 부분은 아니다. 하지만 명령이 실행되면 사이드 윈도우에 터미널이 뜬 채로 종료되지 않아서 해당 윈도우를 닫아줘야 하는데 매번 윈도우를 직접 이동시킨 후 닫아야 하는 게 불편해서 아예 자동으로 터미널 윈도우로 포커스가 가도록 넣은 부분이다.&lt;/p&gt;
&lt;h2&gt;사족&lt;/h2&gt;
&lt;p&gt;출력 내용이 간단하거나 혹은 즉시 출력되는 내용을 알아야 하는 게 아니라면 그냥 &lt;code&gt;shell-command-to-string&lt;/code&gt; 함수로 셸 명령을 실행시킨 결과를 얻어 바로 &lt;code&gt;message&lt;/code&gt; 함수로 출력해 버리면 된다. 꼭 필요한 게 아니라면 굳이 먼 길을 돌아갈 필요는 없을 것 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;이 글은 Emacs Lisp에서 셸 CLI 커맨드를 Emacs 자체 터미널을 통해 실행시키는 방법을 정리한다.&lt;/p&gt;
&lt;h2&gt;요구사항&lt;/h2&gt;
&lt;p&gt;이 기능이 왜 필요했냐면 개인적으로 만든 스크립트를 Emacs 내에서 실행시키고 싶어서다. 단 해당 스크립트가 출력하는 내용을 확인하고 싶지만 현재 버퍼에서 하던 작업도 방해는 하지 않았으면 했기에 셸 커맨드를 실행시키는 전용 함수가 아닌 이맥스 내장 터미널을 통해 실행시키는 것을 원했다.&lt;/p&gt;
&lt;p&gt;조금은 제한적인(?) 기능이라 이런 기능의 함수를 이맥스가 자체적으로 제공하는 것 같지는 않았고 결국 만드는 수밖에 없었다. 다행히도 힌트가 여기저기 있었기에 큰 삽질 없이 작성할 수 있었다.&lt;/p&gt;
&lt;h2&gt;완성된 코드 샘플&lt;/h2&gt;
&lt;p&gt;필요한 기능의 핵심은 &lt;code&gt;make-term&lt;/code&gt;이라는 함수다. 이 함수를 이용하면 원하는 셸로 원하는 커맨드를 실행시킬 수 있는 내장 터미널 버퍼를 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;아래 코드는 사이드 윈도우에 터미널을 열고 거기서 zsh을 통해 어떤 셸 스크립트를 실행시키는 함수다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(defun run-my-some-command-from-terminal ()
  (interactive)
  (let ((buffer (make-term &amp;quot;*my-some-terminal-command-buffer*&amp;quot;
                           &amp;quot;/bin/zsh&amp;quot;
                           nil
                           &amp;quot;-c&amp;quot; &amp;quot;some_weird_script.sh --foo --bar&amp;quot;)))
    (display-buffer-in-side-window
     buffer `((window-height . ,multi-term-dedicated-window-height)))
    (select-window (get-buffer-window buffer))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;make-term&lt;/code&gt;의 매개변수로 넘어가는 부분들이 핵심이다. 버퍼 이름은 원하는 대로 짓거나 매번 랜덤하게 지어도 된다. 그리고 &lt;code&gt;-c&lt;/code&gt; 부분 이후에 필요한 셸 커맨드를 적을 수 있다.&lt;/p&gt;
&lt;p&gt;그 아래 부분들 중 &lt;code&gt;display-buffer-in-side-window&lt;/code&gt; 함수는 사이드 윈도우에 터미널을 띄우기 위한 용도다. 따라서 사이드가 아닌 특정 윈도우에 터미널 버퍼를 띄우려면 대신 &lt;code&gt;display-buffer&lt;/code&gt; 함수를 이용할 수 있다.&lt;/p&gt;
&lt;p&gt;마지막의 &lt;code&gt;select-window&lt;/code&gt;는 사실 꼭 필요한 부분은 아니다. 하지만 명령이 실행되면 사이드 윈도우에 터미널이 뜬 채로 종료되지 않아서 해당 윈도우를 닫아줘야 하는데 매번 윈도우를 직접 이동시킨 후 닫아야 하는 게 불편해서 아예 자동으로 터미널 윈도우로 포커스가 가도록 넣은 부분이다.&lt;/p&gt;
&lt;h2&gt;사족&lt;/h2&gt;
&lt;p&gt;출력 내용이 간단하거나 혹은 즉시 출력되는 내용을 알아야 하는 게 아니라면 그냥 &lt;code&gt;shell-command-to-string&lt;/code&gt; 함수로 셸 명령을 실행시킨 결과를 얻어 바로 &lt;code&gt;message&lt;/code&gt; 함수로 출력해 버리면 된다. 꼭 필요한 게 아니라면 굳이 먼 길을 돌아갈 필요는 없을 것 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/emacs-lisp-run-cli-cmd-from-terminal-window.html</guid>
      <pubDate>Mon, 22 Jul 2024 22:49:00 +0900</pubDate>
    </item>
    <item>
      <title>바이든 대통령 후보 사퇴 및 해리스 지지 선언</title>
      <link>https://seorenn.github.io/log/20240722-00.html</link>
      <description>&lt;p&gt;조 바이든 현 미국 대통령은 미국 시각 7월 21일 내각 참모들도 발표 전에 바로 알았을 정도로 신속하게 비밀리에 &lt;strong&gt;대통령 후보 사퇴&lt;/strong&gt;를 선언했다. 이미 코로나19 확진을 언론을 통해 공개하면서 '노령에다 건강 문제로 후보에서 사퇴하는 거 아니냐'는 관측이 많았었는데 정말 진짜로 아무도 모르게(?) 후보 사퇴를 결정했다고 한다. 다만 사퇴 분위기가 어땠을 지는 아직은 알 수 없는 것 같다.&lt;/p&gt;
&lt;p&gt;이제 중요한 것은 민주당의 새로운 대선 후보 선정일 텐데 바이든은 카멜라(카멀라) 해리스 현 부통령을 지지한다고 밝혔다. 마침 바이드 캠프에 모인 선거 자금을 쓰기에 적절하기도 하다. 상원 의원 시절 트럼프와 각을 세워서 유명해지기도 했기에 인지도도 좋을 것 같다. 그리고 몇몇 주요 인물들도 지지의사를 밝히면서 해리스의 후보 선출 가능성은 굉장히 높아진 것 같다. 물론 압도적인 지지율은 아니라서 경쟁은 좀 필요할 것 같다.&lt;/p&gt;
&lt;h2&gt;그래서 상황이 얼마나 달라질까?&lt;/h2&gt;
&lt;p&gt;적어도 고령으로 인한 발목 잡기는 이제 민주당이 아닌 공화당으로 넘어가게 되었다. 트럼프도 바이든보다 고작 세 살 어릴 뿐이다. 하지만 아직까지 정신적 질환 의심 상황은 관찰된 적이 없는 것 같기에 당장은 별 이슈는 안 될 것 같다. 어쨌든 고령 이슈가 트럼프의 발목을 잡아 주었으면 좋겠다.&lt;/p&gt;
&lt;p&gt;지지율 격차를 더 크게 벌렸었던 '트럼프 암살 회피' 버프는 여전히 트럼프에게 남아있다. 그 버프가 얼마나 빨리 사라지느냐가 변수가 될 지도 모르겠다. 다만 바이든 사퇴도 일종의 버프로 작용해서 트럼프 지지율 좀 끌어내릴 가능성은 있어 보... 바랄 뿐이다.&lt;/p&gt;
&lt;p&gt;앞으로 있을 토론에서 트럼프는 여전히 거짓말과 생떼로 무장하고 공격을 하겠지만, 민주당 후보로 가장 가능성이 높아보이는 해리스는 성격도 그렇고 검사 출신에다 정치 경력으로 거짓말이나 생떼 공격에는 쉽게 무너질 것 같지는 않다. 반대로 불법, 편법 등의 의혹을 부풀리는 데는 이만한 능력자가 없을 지도 모른다. 물론 미국 유권자들이 얼마나 멍청... 아니 순수할 지에 따라 판단은 달라지겠지만 말이다.&lt;/p&gt;
&lt;p&gt;해리스의 여성이면서 흑인이라는 점은 버프이면서 디버프다. 트럼프 지지자에 가까운 백인우월주의자나 반페미니즘 혹은 특수한 기독교 단체들의 존재가 상상 만은 아닐 것이다. 거기다 흑인이나 이민자가 트럼프를 지지하는 경우도 종종 보이는 판국이다. 마침 트럼프의 부통령 지명자가 이민자 출신이기도 하다. 어쨌든 해리스의 성별 등이 버프로써 작용해 주기를 바랄 뿐이다.&lt;/p&gt;
&lt;p&gt;러스트벨트의 표심은 어떨까? 아무래도 트럼프에게 유리할 것 같다. 하지만 최근 트럼프와는 어울리지 않는 태양광 사업의 요충지가 이쪽에 있다는 점에서 여전히 민주당에게 불리함이 크지는 않다고 본다.&lt;/p&gt;
&lt;p&gt;남은 이슈들 중 큰 건은 역시나 연준의 금리 인하 시점과 횟수가 될 것 같다. 시장의 예상은 9월로 거의 확정이고 대선 전 거의 마지막 금리 인하 찬스(?)이기도 해서 민주당에 버프로 작용해 주길 바랄 뿐이다. 하지만 연준이 인하 시기를 더 늦춰 버리면 트럼프가 연준을 제어했다며 기세등등해질 가능성도 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;결론적으로 일단 바이든의 사퇴가 민주당이 잃어버린 지지율을 일부 회복시킬 수는 있을 것 같다. (주가도 제발 회복 좀...)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이상 한 멍청하고 무식하고 낡은 개인의 뇌피셜 희망론 정리였다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;조 바이든 현 미국 대통령은 미국 시각 7월 21일 내각 참모들도 발표 전에 바로 알았을 정도로 신속하게 비밀리에 &lt;strong&gt;대통령 후보 사퇴&lt;/strong&gt;를 선언했다. 이미 코로나19 확진을 언론을 통해 공개하면서 '노령에다 건강 문제로 후보에서 사퇴하는 거 아니냐'는 관측이 많았었는데 정말 진짜로 아무도 모르게(?) 후보 사퇴를 결정했다고 한다. 다만 사퇴 분위기가 어땠을 지는 아직은 알 수 없는 것 같다.&lt;/p&gt;
&lt;p&gt;이제 중요한 것은 민주당의 새로운 대선 후보 선정일 텐데 바이든은 카멜라(카멀라) 해리스 현 부통령을 지지한다고 밝혔다. 마침 바이드 캠프에 모인 선거 자금을 쓰기에 적절하기도 하다. 상원 의원 시절 트럼프와 각을 세워서 유명해지기도 했기에 인지도도 좋을 것 같다. 그리고 몇몇 주요 인물들도 지지의사를 밝히면서 해리스의 후보 선출 가능성은 굉장히 높아진 것 같다. 물론 압도적인 지지율은 아니라서 경쟁은 좀 필요할 것 같다.&lt;/p&gt;
&lt;h2&gt;그래서 상황이 얼마나 달라질까?&lt;/h2&gt;
&lt;p&gt;적어도 고령으로 인한 발목 잡기는 이제 민주당이 아닌 공화당으로 넘어가게 되었다. 트럼프도 바이든보다 고작 세 살 어릴 뿐이다. 하지만 아직까지 정신적 질환 의심 상황은 관찰된 적이 없는 것 같기에 당장은 별 이슈는 안 될 것 같다. 어쨌든 고령 이슈가 트럼프의 발목을 잡아 주었으면 좋겠다.&lt;/p&gt;
&lt;p&gt;지지율 격차를 더 크게 벌렸었던 '트럼프 암살 회피' 버프는 여전히 트럼프에게 남아있다. 그 버프가 얼마나 빨리 사라지느냐가 변수가 될 지도 모르겠다. 다만 바이든 사퇴도 일종의 버프로 작용해서 트럼프 지지율 좀 끌어내릴 가능성은 있어 보... 바랄 뿐이다.&lt;/p&gt;
&lt;p&gt;앞으로 있을 토론에서 트럼프는 여전히 거짓말과 생떼로 무장하고 공격을 하겠지만, 민주당 후보로 가장 가능성이 높아보이는 해리스는 성격도 그렇고 검사 출신에다 정치 경력으로 거짓말이나 생떼 공격에는 쉽게 무너질 것 같지는 않다. 반대로 불법, 편법 등의 의혹을 부풀리는 데는 이만한 능력자가 없을 지도 모른다. 물론 미국 유권자들이 얼마나 멍청... 아니 순수할 지에 따라 판단은 달라지겠지만 말이다.&lt;/p&gt;
&lt;p&gt;해리스의 여성이면서 흑인이라는 점은 버프이면서 디버프다. 트럼프 지지자에 가까운 백인우월주의자나 반페미니즘 혹은 특수한 기독교 단체들의 존재가 상상 만은 아닐 것이다. 거기다 흑인이나 이민자가 트럼프를 지지하는 경우도 종종 보이는 판국이다. 마침 트럼프의 부통령 지명자가 이민자 출신이기도 하다. 어쨌든 해리스의 성별 등이 버프로써 작용해 주기를 바랄 뿐이다.&lt;/p&gt;
&lt;p&gt;러스트벨트의 표심은 어떨까? 아무래도 트럼프에게 유리할 것 같다. 하지만 최근 트럼프와는 어울리지 않는 태양광 사업의 요충지가 이쪽에 있다는 점에서 여전히 민주당에게 불리함이 크지는 않다고 본다.&lt;/p&gt;
&lt;p&gt;남은 이슈들 중 큰 건은 역시나 연준의 금리 인하 시점과 횟수가 될 것 같다. 시장의 예상은 9월로 거의 확정이고 대선 전 거의 마지막 금리 인하 찬스(?)이기도 해서 민주당에 버프로 작용해 주길 바랄 뿐이다. 하지만 연준이 인하 시기를 더 늦춰 버리면 트럼프가 연준을 제어했다며 기세등등해질 가능성도 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;결론적으로 일단 바이든의 사퇴가 민주당이 잃어버린 지지율을 일부 회복시킬 수는 있을 것 같다. (주가도 제발 회복 좀...)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이상 한 멍청하고 무식하고 낡은 개인의 뇌피셜 희망론 정리였다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240722-00.html</guid>
      <pubDate>Mon, 22 Jul 2024 16:10:00 +0900</pubDate>
    </item>
    <item>
      <title>한 주간의 애플 소식들 24-07-21</title>
      <link>https://seorenn.github.io/log/20240721-00.html</link>
      <description>&lt;h2&gt;소프트웨어 릴리즈&lt;/h2&gt;
&lt;p&gt;차세대 OS들의 공개 베타가 슬슬 시작되고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15 Sequoia public beta 1&lt;/li&gt;
&lt;li&gt;iOS 18 public beta 1&lt;/li&gt;
&lt;li&gt;iPadOS 18 public beta 1&lt;/li&gt;
&lt;li&gt;watchOS 11 public beta 1&lt;/li&gt;
&lt;li&gt;tvOS 18 public beta 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;앞서 공개되었던 개발자 베타 3에서 아래의 OS들은 빌드 번호가 갱신되어서 새로 올라왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15 Sequoia beta 3&lt;/li&gt;
&lt;li&gt;iOS 18 beta 3&lt;/li&gt;
&lt;li&gt;iPadOS 18 beta 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 버전들은 이모티콘 관련 기능에 문제가 있는지 최신 업데이트 사항이 제거되고 이전 beta 2 시절의 내용으로 돌아간 듯하다.&lt;/p&gt;
&lt;p&gt;그 외에 현재 메이저 버전의 마이너 업데이트의 네 번째 개발자 베타 버전들도 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6 beta 4&lt;/li&gt;
&lt;li&gt;iOS 17.6 beta 4&lt;/li&gt;
&lt;li&gt;iPadOS 17.6 beta 4&lt;/li&gt;
&lt;li&gt;visionOS 1.3 beta 4&lt;/li&gt;
&lt;li&gt;watchOS 10.6 beta 4&lt;/li&gt;
&lt;li&gt;tvOS 17.6 beta 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그 외에 아래의 릴리즈 소식들이 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari Technology Preview 199&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;이제 게임 뿐만 아니라 에뮬도?&lt;/strong&gt;&lt;br/&gt;
애플이 PC 에뮬레이터 앱을 승인했다. 지난 '저작권 사유로 거부되었다'는 소식이 전해진 이후로 이해할 수 없다는 평가가 많았었는데 그래서인지 애플이 자세를 바꾼 모양이다. 어쨌든 이제 게임 에뮬레이터 뿐만 아니라 PC 에뮬레이터도 앱스토어에 대거 진출할 듯하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iOS 18&lt;/strong&gt;&lt;br/&gt;
iOS 18의 사진 앱에 '복구된 앨범' 기능이 생기는 듯하다. 여기에는 손실되거나 훼손된 사진이 복구되어 분류되는 것으로 추측된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;br/&gt;
애플이 최근 Youtube 자막 등의 콘텐츠를 무단으로 AI 학습에 사용했다는 의혹이 제기되었다. 이에 대해 애플은 OpenELM 학습은 연구 목적이며 자사의 애플지능(Apple Intelligence) 서비스와는 관련이 없다고 밝혔다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AAPL&lt;/strong&gt;&lt;br/&gt;
애플의 인도 매출이 33% 가량 급증했다고 한다. 애플(AAPL)의 시가총액은 3.62조 달러를 돌파하며 다시 세계에서 가장 가치있는 기업이 되었다. 다만 iPhone의 매출 서프라이즈를 점치는 컨센서스가 많은 와중에 애플이 정작 iPhone 16 주문을 늘리지는 않을 것이라는 루머도 전해지고 있다.&lt;/p&gt;
&lt;h2&gt;기타 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iPhone 17에는 TSMC의 차세대 2nm 공정으로 제작된 칩이 사용될 가능성이 있다는 루머가 나왔다가 다시 가능성이 낮다는 루머도 나왔다.&lt;/li&gt;
&lt;li&gt;M5가 탑재될 맥북 모델들에는 신형 컴팩트 카메라 모듈이 사용될 듯하다.&lt;/li&gt;
&lt;li&gt;iPhone의 공간 절약형 내부 디자인 개발이 연기되어 iPhone 17에서나 적용될 가능성이 있는 모양이다.&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;h2&gt;소프트웨어 릴리즈&lt;/h2&gt;
&lt;p&gt;차세대 OS들의 공개 베타가 슬슬 시작되고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15 Sequoia public beta 1&lt;/li&gt;
&lt;li&gt;iOS 18 public beta 1&lt;/li&gt;
&lt;li&gt;iPadOS 18 public beta 1&lt;/li&gt;
&lt;li&gt;watchOS 11 public beta 1&lt;/li&gt;
&lt;li&gt;tvOS 18 public beta 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;앞서 공개되었던 개발자 베타 3에서 아래의 OS들은 빌드 번호가 갱신되어서 새로 올라왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15 Sequoia beta 3&lt;/li&gt;
&lt;li&gt;iOS 18 beta 3&lt;/li&gt;
&lt;li&gt;iPadOS 18 beta 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 버전들은 이모티콘 관련 기능에 문제가 있는지 최신 업데이트 사항이 제거되고 이전 beta 2 시절의 내용으로 돌아간 듯하다.&lt;/p&gt;
&lt;p&gt;그 외에 현재 메이저 버전의 마이너 업데이트의 네 번째 개발자 베타 버전들도 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6 beta 4&lt;/li&gt;
&lt;li&gt;iOS 17.6 beta 4&lt;/li&gt;
&lt;li&gt;iPadOS 17.6 beta 4&lt;/li&gt;
&lt;li&gt;visionOS 1.3 beta 4&lt;/li&gt;
&lt;li&gt;watchOS 10.6 beta 4&lt;/li&gt;
&lt;li&gt;tvOS 17.6 beta 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그 외에 아래의 릴리즈 소식들이 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari Technology Preview 199&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;이제 게임 뿐만 아니라 에뮬도?&lt;/strong&gt;&lt;br/&gt;
애플이 PC 에뮬레이터 앱을 승인했다. 지난 '저작권 사유로 거부되었다'는 소식이 전해진 이후로 이해할 수 없다는 평가가 많았었는데 그래서인지 애플이 자세를 바꾼 모양이다. 어쨌든 이제 게임 에뮬레이터 뿐만 아니라 PC 에뮬레이터도 앱스토어에 대거 진출할 듯하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iOS 18&lt;/strong&gt;&lt;br/&gt;
iOS 18의 사진 앱에 '복구된 앨범' 기능이 생기는 듯하다. 여기에는 손실되거나 훼손된 사진이 복구되어 분류되는 것으로 추측된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;br/&gt;
애플이 최근 Youtube 자막 등의 콘텐츠를 무단으로 AI 학습에 사용했다는 의혹이 제기되었다. 이에 대해 애플은 OpenELM 학습은 연구 목적이며 자사의 애플지능(Apple Intelligence) 서비스와는 관련이 없다고 밝혔다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AAPL&lt;/strong&gt;&lt;br/&gt;
애플의 인도 매출이 33% 가량 급증했다고 한다. 애플(AAPL)의 시가총액은 3.62조 달러를 돌파하며 다시 세계에서 가장 가치있는 기업이 되었다. 다만 iPhone의 매출 서프라이즈를 점치는 컨센서스가 많은 와중에 애플이 정작 iPhone 16 주문을 늘리지는 않을 것이라는 루머도 전해지고 있다.&lt;/p&gt;
&lt;h2&gt;기타 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iPhone 17에는 TSMC의 차세대 2nm 공정으로 제작된 칩이 사용될 가능성이 있다는 루머가 나왔다가 다시 가능성이 낮다는 루머도 나왔다.&lt;/li&gt;
&lt;li&gt;M5가 탑재될 맥북 모델들에는 신형 컴팩트 카메라 모듈이 사용될 듯하다.&lt;/li&gt;
&lt;li&gt;iPhone의 공간 절약형 내부 디자인 개발이 연기되어 iPhone 17에서나 적용될 가능성이 있는 모양이다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240721-00.html</guid>
      <pubDate>Sun, 21 Jul 2024 21:18:00 +0900</pubDate>
    </item>
    <item>
      <title>토스증권 VS KB증권, WTS 유사성 분쟁?</title>
      <link>https://seorenn.github.io/log/20240720-00.html</link>
      <description>&lt;p&gt;뉴스 피드를 읽다 아주 익숙한 단어가 보였다. 제목이 무려 'KB증권 VS 토스증권, WTS 유사성 두고 법적분쟁'이다. 정말이지 군침이 도는 읽고 싶은 제목이다. 그러니 링크를 클릭해 볼 수밖에 없었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;KB증권 측은 19일 “토스증권 WTS의 사용자인터페이스(UI)와 사용자경험(UX)과 관련 부분이 자사 WTS인 ‘M-able와이드’와 유사한 면이 많다고 판단했다”며 가처분 신청을 제기했다고 밝혔다. (&lt;a href="https://www.edaily.co.kr/News/Read?newsId=03079926638956160&amp;amp;mediaCodeNo=257" target="_blank"&gt;출처📎&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;둘 다 주력 WTS로 사용하는 입장에서는 KB증권에겐 좀 미안하지만 KB증권이 주장하는 바를 전혀 이해할 수가 없다. 이 둘은 추구하는 UX도 다르고 그래서 UI도 다르고 기능성 조차도 다르다. 닮았다고 해봤자 다크모드 색상 팔레트 정도가 비슷할 뿐이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="KB증권의 WTS인 마블와이드" src="../upload/202407202340-cfc6417e.png" /&gt;
&lt;em&gt;KB증권의 WTS인 마블와이드는 배치가 꽤 자유로운 편이지만 일부 불편하고 문제점도 많다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;둘 중 선호하는 것 하나를 꼽으라면 고민할 것도 없이 토스증권의 WTS를 꼽고 싶다. 상대적으로 편하고 미려하고 빠르고 정보의 질도 더 좋다. 비교할 걸 비교해야 할 텐데 KB증권 측은 무슨 생각으로 이러는 것인가 개인적으로는 이해가 잘 안 될 정도다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="토스증권 WTS" src="../upload/202407202341-acf345a9.png" /&gt;
&lt;em&gt;토스증권의 WTS는 자유도가 약간 떨어지지만 UX를 잘 따른 편리한 UI 구성을 갖추고 있다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;물론 이 사건과는 별개로 토스증권이든 KB증권이든 모두 응원한다. WTS를 내놓았다는 것만으로도 충분히 호감가는 증권사다. 그저 좀 더 사이좋게 지냈으면 좋겠다. 물론 맥 앱을 내놓은 한국투자증권도 응원한다. 반쪽짜리 WTS만 제공하는 미래에셋증권이나 쓸 수 없는 쓰레기 같은 키움증권에 비하면 선녀 같은 증권사들이다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;뉴스 피드를 읽다 아주 익숙한 단어가 보였다. 제목이 무려 'KB증권 VS 토스증권, WTS 유사성 두고 법적분쟁'이다. 정말이지 군침이 도는 읽고 싶은 제목이다. 그러니 링크를 클릭해 볼 수밖에 없었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;KB증권 측은 19일 “토스증권 WTS의 사용자인터페이스(UI)와 사용자경험(UX)과 관련 부분이 자사 WTS인 ‘M-able와이드’와 유사한 면이 많다고 판단했다”며 가처분 신청을 제기했다고 밝혔다. (&lt;a href="https://www.edaily.co.kr/News/Read?newsId=03079926638956160&amp;amp;mediaCodeNo=257" target="_blank"&gt;출처📎&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;둘 다 주력 WTS로 사용하는 입장에서는 KB증권에겐 좀 미안하지만 KB증권이 주장하는 바를 전혀 이해할 수가 없다. 이 둘은 추구하는 UX도 다르고 그래서 UI도 다르고 기능성 조차도 다르다. 닮았다고 해봤자 다크모드 색상 팔레트 정도가 비슷할 뿐이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="KB증권의 WTS인 마블와이드" src="../upload/202407202340-cfc6417e.png" /&gt;
&lt;em&gt;KB증권의 WTS인 마블와이드는 배치가 꽤 자유로운 편이지만 일부 불편하고 문제점도 많다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;둘 중 선호하는 것 하나를 꼽으라면 고민할 것도 없이 토스증권의 WTS를 꼽고 싶다. 상대적으로 편하고 미려하고 빠르고 정보의 질도 더 좋다. 비교할 걸 비교해야 할 텐데 KB증권 측은 무슨 생각으로 이러는 것인가 개인적으로는 이해가 잘 안 될 정도다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="토스증권 WTS" src="../upload/202407202341-acf345a9.png" /&gt;
&lt;em&gt;토스증권의 WTS는 자유도가 약간 떨어지지만 UX를 잘 따른 편리한 UI 구성을 갖추고 있다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;물론 이 사건과는 별개로 토스증권이든 KB증권이든 모두 응원한다. WTS를 내놓았다는 것만으로도 충분히 호감가는 증권사다. 그저 좀 더 사이좋게 지냈으면 좋겠다. 물론 맥 앱을 내놓은 한국투자증권도 응원한다. 반쪽짜리 WTS만 제공하는 미래에셋증권이나 쓸 수 없는 쓰레기 같은 키움증권에 비하면 선녀 같은 증권사들이다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240720-00.html</guid>
      <pubDate>Sat, 20 Jul 2024 23:44:00 +0900</pubDate>
    </item>
    <item>
      <title>Swift에서 딜레이 후 코드 호출하기</title>
      <link>https://seorenn.github.io/article/swift-run-after-delay.html</link>
      <description>&lt;p&gt;이 글에서는 Swift에서 UI를 멈추지 않게 하면서 특정 시간 동안 기다린 후 비동기로 코드를 실행시키는 방법 일부를 정리한다. 모든 방법이 아닌 개인적인 선호로 골랐다는 점에 주의하자.&lt;/p&gt;
&lt;h2&gt;타이머를 사용해 딜레이 후 호출하기&lt;/h2&gt;
&lt;p&gt;어쩌면 가장 직관적인 방법으로 &lt;code&gt;Timer&lt;/code&gt;를 이용하는 방법이 있다. Objective-C에서는 &lt;code&gt;NSTimer&lt;/code&gt;라 불리는 클래스와 동일하다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;Timer.scheduledTimer(withTimeInterval: 3, repeats: false) { timer in
    print(&amp;quot;3 seconds have passed&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;타이머를 생성해서 돌리는 방법은 여러가지가 있지만 위의 방식이 가장 편한 것 같았다. 필요하다면 반복(repeats)도 지정할 수 있으니 딜레이 말고도 여러 용도로 쓸 수도 있다.&lt;/p&gt;
&lt;h2&gt;GCD를 이용해 딜레이 후 호출하기&lt;/h2&gt;
&lt;p&gt;GCD(Grand Central Dispatch)의 디스패치 큐에는 &lt;code&gt;asyncAfter&lt;/code&gt;라는 용도에 딱 맞는 메서드가 제공된다. &lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
    print(&amp;quot;3 seconds have passed&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;asyncAfter&lt;/code&gt;의 경우 딜레이 시간을 정의할 때 약간 난해할 수도 있는데 &lt;code&gt;DispatchTime.now()&lt;/code&gt;를 알고 있다면 크게 어려울 것 없이 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;다만 위 코드는 메인 스레드에서 동작하는 만큼 동작하는 코드에 따라 UI에 영향을 줄 수도 있으니 아래와 같이 글로벌 큐를 이용하는 방식이 적절하지 않을까 생각된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;DispatchQueue.global().asyncAfter(deadline: .now() + 3) {
    DispatchQueue.main.async {
        print(&amp;quot;3 seconds have passed&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 기다리는 동안 다른 일을 더 해도 UI에 큰 무리를 안 주면서 원하는 대로 동작한다. 다만 UI에 영향을 끼치는 코드는 메인 스레드에서 돌아가도록 주의해야 하는 점은 잊지 말자.&lt;/p&gt;
&lt;p&gt;물론 위의 방식들이 정석에 가깝지만, 좀 더 단순하게 하려면 아래와 같이 그냥 쉬었다가(sleep) 하는 방법도 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;DispatchQueue.global().async {
    Thread.sleep(forTimeInterval: 3)
    DispatchQueue.main.async {
        print(&amp;quot;3 seconds have passed&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;글로벌 디스패치큐는 백그라운드 스레드에서 돌아가기 때문에 사용할 수 있는 단순한 코드다. 사람에 따라 '무식한' 방법이라고 평가할 수도 있겠지만 어떻게 보면 특징이나 용도를 잘 활용한 기능으로 볼 수도 있어서 '단순한' 방법이라 표현하는 게 맞을 것 같다. 어쨌든 잘 동작하고 별 문제도 없으니 말이다.&lt;/p&gt;
&lt;h2&gt;Task&lt;/h2&gt;
&lt;p&gt;Swift Concurrency 지원으로 추가된 비동기 루틴을 지원하는 &lt;code&gt;Task&lt;/code&gt;를 활용하면 역시 쉬었다가 처리하는 방식의 '단순한' 방법을 쓸 수도 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;Task {
    try await Task.sleep(nanoseconds: 3000000000)
    print(&amp;quot;3 seconds have passed&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Task&lt;/code&gt; 기반은 취소가 가능하다는 장점이 있다. 태스크 취소를 하려면 아래와 같이 해당 태스크 인스턴스에서 &lt;code&gt;cancel()&lt;/code&gt; 메서드를 호출해 주면 된다. 다만 이 글의 주제에서 벗어나기 때문에 더 자세한 소개는 생략한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;let delayedTask = Task {
    try await Task.sleep(nanoseconds: 300000000000)
    print(&amp;quot;300 seconds have passed&amp;quot;)
}

...

// 해당 태스크를 취소해야 할 필요가 있을 때
delayedTask.cancel()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;태스크 내에서의 딜레이(sleep) 명령으로 &lt;code&gt;Thread.sleep()&lt;/code&gt;을 쓸 수 있는지는 잘 모르겠지만, 취소를 위해서는 반드시 &lt;code&gt;Task.sleep()&lt;/code&gt;을 써야 한다는 것 정도만 알아두자.&lt;/p&gt;
&lt;h2&gt;사족&lt;/h2&gt;
&lt;p&gt;GCD를 이용할 수 있으니 당연히 Thread나 OperationQueue를 이용할 수도 있지 않겠나라고 할 수도 있는데 맞다. 사실 이 둘도 위의 예와 거의 동일한 동작을 만들 수 있다. 하지만 가장 심플한 예는 아무래도 위에서 거론한 방식들 같다. 즉 이 외에도 여러 방법이 있을 수도 있으니 상황에 맞는 특수한 방법은 직접 찾아보자.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;이 글에서는 Swift에서 UI를 멈추지 않게 하면서 특정 시간 동안 기다린 후 비동기로 코드를 실행시키는 방법 일부를 정리한다. 모든 방법이 아닌 개인적인 선호로 골랐다는 점에 주의하자.&lt;/p&gt;
&lt;h2&gt;타이머를 사용해 딜레이 후 호출하기&lt;/h2&gt;
&lt;p&gt;어쩌면 가장 직관적인 방법으로 &lt;code&gt;Timer&lt;/code&gt;를 이용하는 방법이 있다. Objective-C에서는 &lt;code&gt;NSTimer&lt;/code&gt;라 불리는 클래스와 동일하다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;Timer.scheduledTimer(withTimeInterval: 3, repeats: false) { timer in
    print(&amp;quot;3 seconds have passed&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;타이머를 생성해서 돌리는 방법은 여러가지가 있지만 위의 방식이 가장 편한 것 같았다. 필요하다면 반복(repeats)도 지정할 수 있으니 딜레이 말고도 여러 용도로 쓸 수도 있다.&lt;/p&gt;
&lt;h2&gt;GCD를 이용해 딜레이 후 호출하기&lt;/h2&gt;
&lt;p&gt;GCD(Grand Central Dispatch)의 디스패치 큐에는 &lt;code&gt;asyncAfter&lt;/code&gt;라는 용도에 딱 맞는 메서드가 제공된다. &lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
    print(&amp;quot;3 seconds have passed&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;asyncAfter&lt;/code&gt;의 경우 딜레이 시간을 정의할 때 약간 난해할 수도 있는데 &lt;code&gt;DispatchTime.now()&lt;/code&gt;를 알고 있다면 크게 어려울 것 없이 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;다만 위 코드는 메인 스레드에서 동작하는 만큼 동작하는 코드에 따라 UI에 영향을 줄 수도 있으니 아래와 같이 글로벌 큐를 이용하는 방식이 적절하지 않을까 생각된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;DispatchQueue.global().asyncAfter(deadline: .now() + 3) {
    DispatchQueue.main.async {
        print(&amp;quot;3 seconds have passed&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 기다리는 동안 다른 일을 더 해도 UI에 큰 무리를 안 주면서 원하는 대로 동작한다. 다만 UI에 영향을 끼치는 코드는 메인 스레드에서 돌아가도록 주의해야 하는 점은 잊지 말자.&lt;/p&gt;
&lt;p&gt;물론 위의 방식들이 정석에 가깝지만, 좀 더 단순하게 하려면 아래와 같이 그냥 쉬었다가(sleep) 하는 방법도 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;DispatchQueue.global().async {
    Thread.sleep(forTimeInterval: 3)
    DispatchQueue.main.async {
        print(&amp;quot;3 seconds have passed&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;글로벌 디스패치큐는 백그라운드 스레드에서 돌아가기 때문에 사용할 수 있는 단순한 코드다. 사람에 따라 '무식한' 방법이라고 평가할 수도 있겠지만 어떻게 보면 특징이나 용도를 잘 활용한 기능으로 볼 수도 있어서 '단순한' 방법이라 표현하는 게 맞을 것 같다. 어쨌든 잘 동작하고 별 문제도 없으니 말이다.&lt;/p&gt;
&lt;h2&gt;Task&lt;/h2&gt;
&lt;p&gt;Swift Concurrency 지원으로 추가된 비동기 루틴을 지원하는 &lt;code&gt;Task&lt;/code&gt;를 활용하면 역시 쉬었다가 처리하는 방식의 '단순한' 방법을 쓸 수도 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;Task {
    try await Task.sleep(nanoseconds: 3000000000)
    print(&amp;quot;3 seconds have passed&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Task&lt;/code&gt; 기반은 취소가 가능하다는 장점이 있다. 태스크 취소를 하려면 아래와 같이 해당 태스크 인스턴스에서 &lt;code&gt;cancel()&lt;/code&gt; 메서드를 호출해 주면 된다. 다만 이 글의 주제에서 벗어나기 때문에 더 자세한 소개는 생략한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;let delayedTask = Task {
    try await Task.sleep(nanoseconds: 300000000000)
    print(&amp;quot;300 seconds have passed&amp;quot;)
}

...

// 해당 태스크를 취소해야 할 필요가 있을 때
delayedTask.cancel()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;태스크 내에서의 딜레이(sleep) 명령으로 &lt;code&gt;Thread.sleep()&lt;/code&gt;을 쓸 수 있는지는 잘 모르겠지만, 취소를 위해서는 반드시 &lt;code&gt;Task.sleep()&lt;/code&gt;을 써야 한다는 것 정도만 알아두자.&lt;/p&gt;
&lt;h2&gt;사족&lt;/h2&gt;
&lt;p&gt;GCD를 이용할 수 있으니 당연히 Thread나 OperationQueue를 이용할 수도 있지 않겠나라고 할 수도 있는데 맞다. 사실 이 둘도 위의 예와 거의 동일한 동작을 만들 수 있다. 하지만 가장 심플한 예는 아무래도 위에서 거론한 방식들 같다. 즉 이 외에도 여러 방법이 있을 수도 있으니 상황에 맞는 특수한 방법은 직접 찾아보자.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/swift-run-after-delay.html</guid>
      <pubDate>Fri, 19 Jul 2024 14:48:00 +0900</pubDate>
    </item>
    <item>
      <title>체코 원전 잭팟이라더니 주가는 왜 비실거릴까?</title>
      <link>https://seorenn.github.io/log/20240718-00.html</link>
      <description>&lt;p&gt;오랜만에 한국 원자력 수출에 좋은 소식이 떴다. 체코 원전 수주 소식이 들려온 것이다. 최소 15조 원 이상의 가치라며 말이다.&lt;/p&gt;
&lt;p&gt;그런데 정작 수주 소식이 들리자 관련 기업들의 주가는 호들갑은 커녕 차익실현 분위기가 강하다. 정확히 말해서 오전 까지는 분위기가 참 좋아 보였는데 오후가 되니 급격하게 사그라들었다고 보는 게 맞을 것 같다.&lt;/p&gt;
&lt;p&gt;일단 확실하게 알아야 할 것은 아직 '수주'가 아니라는 점이다. 정확히 말해 한국 기업들이 우선협상대상자가 되었다는 것이고 이제 체코 정부와 1:1로 협상해야 한다는 이야기다. 언론에서 24조 원 어치이니 최소 15조 원 이라니 뭐라니 하는 표현은 다 이유가 있는 것이었다. 물론 우선협상대상자가 되면 이후 별 문제 없으면 계약으로 진행된다고 볼 수는 있다. 뒤엎기에는 좀 멀리 간 것이니 말이다.&lt;/p&gt;
&lt;p&gt;또 한가지 문제는 바로 원전의 사이클이 너무 길다는 것이다. 원전 건설에는 4~5년 혹은 그 이상을 바라봐야 할 지도 모를 초장기 사업이다. 조선도 길다고 하는데 원전은 그 이상이니 실제로 돈이 되려면 오랜 시간이 걸릴 지도 모른다.&lt;/p&gt;
&lt;p&gt;따라서 이번 우선협상대상자 선정 소식 만으로 주가가 폭등하는 것 자체가 이상한 것이긴 하다. 그저 수주 가능성이 테마가 되었고 그 테마가 끝난 것이라 생각된다.&lt;/p&gt;
&lt;p&gt;물론 그렇다고 해도 모멘텀이 완전히 사라진 건 아닐 것이다. 그게 실적으로 나타나려면 오래 걸리니 조정이 왔을 때 담아놓고 기다리면 수익으로 이어질 가능성은 높을 것 같다. 중간에 별 삽질만 없다면 말이다.&lt;/p&gt;
&lt;p&gt;그런데 SMR은 과연 괜찮을까? 알려진 바로 모듈형의 경우 짧으면 1년 정도가 걸린다고 하니 SMR 쪽이 압도적으로 짧기는 하다. 문제가 있다면 아직 기술 개발 중이라는 점이겠지만 말이다.&lt;/p&gt;
&lt;p&gt;어쨌거나 추측성 이야기이니 너무 심각하게 보진 말자. 그리고 체코 원전 사업이 잘 진행 되었으면 좋겠다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;오랜만에 한국 원자력 수출에 좋은 소식이 떴다. 체코 원전 수주 소식이 들려온 것이다. 최소 15조 원 이상의 가치라며 말이다.&lt;/p&gt;
&lt;p&gt;그런데 정작 수주 소식이 들리자 관련 기업들의 주가는 호들갑은 커녕 차익실현 분위기가 강하다. 정확히 말해서 오전 까지는 분위기가 참 좋아 보였는데 오후가 되니 급격하게 사그라들었다고 보는 게 맞을 것 같다.&lt;/p&gt;
&lt;p&gt;일단 확실하게 알아야 할 것은 아직 '수주'가 아니라는 점이다. 정확히 말해 한국 기업들이 우선협상대상자가 되었다는 것이고 이제 체코 정부와 1:1로 협상해야 한다는 이야기다. 언론에서 24조 원 어치이니 최소 15조 원 이라니 뭐라니 하는 표현은 다 이유가 있는 것이었다. 물론 우선협상대상자가 되면 이후 별 문제 없으면 계약으로 진행된다고 볼 수는 있다. 뒤엎기에는 좀 멀리 간 것이니 말이다.&lt;/p&gt;
&lt;p&gt;또 한가지 문제는 바로 원전의 사이클이 너무 길다는 것이다. 원전 건설에는 4~5년 혹은 그 이상을 바라봐야 할 지도 모를 초장기 사업이다. 조선도 길다고 하는데 원전은 그 이상이니 실제로 돈이 되려면 오랜 시간이 걸릴 지도 모른다.&lt;/p&gt;
&lt;p&gt;따라서 이번 우선협상대상자 선정 소식 만으로 주가가 폭등하는 것 자체가 이상한 것이긴 하다. 그저 수주 가능성이 테마가 되었고 그 테마가 끝난 것이라 생각된다.&lt;/p&gt;
&lt;p&gt;물론 그렇다고 해도 모멘텀이 완전히 사라진 건 아닐 것이다. 그게 실적으로 나타나려면 오래 걸리니 조정이 왔을 때 담아놓고 기다리면 수익으로 이어질 가능성은 높을 것 같다. 중간에 별 삽질만 없다면 말이다.&lt;/p&gt;
&lt;p&gt;그런데 SMR은 과연 괜찮을까? 알려진 바로 모듈형의 경우 짧으면 1년 정도가 걸린다고 하니 SMR 쪽이 압도적으로 짧기는 하다. 문제가 있다면 아직 기술 개발 중이라는 점이겠지만 말이다.&lt;/p&gt;
&lt;p&gt;어쨌거나 추측성 이야기이니 너무 심각하게 보진 말자. 그리고 체코 원전 사업이 잘 진행 되었으면 좋겠다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240718-00.html</guid>
      <pubDate>Thu, 18 Jul 2024 16:47:00 +0900</pubDate>
    </item>
    <item>
      <title>Xcode 및 Swift 프로젝트에서 컴파일러 플래그 추가하기</title>
      <link>https://seorenn.github.io/article/xcode-swift-compiler-flag.html</link>
      <description>&lt;p&gt;하나의 소스 코드로 여러 일을 처리하고 싶은 욕심은 어떤 프로그래머나 가지고 있을 것 같다. 그 중 C 등의 컴파일 되는 언어에서 유래한 흔한 방식으로 바로 전처리기(Proprocessor)를 활용하는 방법이 있다. 코드가 아닌 빌드 도구 차원에서 빌드하는 코드가 어떻게 동작할 지를 결정할 수 있는 좋은 방법이니 말이다.&lt;/p&gt;
&lt;p&gt;그렇다면 Xcode에서 작업 중인 Swift 프로젝트에서는 이런 전처리기 플래그를 어떻게 추가하면 좋을까?&lt;/p&gt;
&lt;p&gt;물론 Xcode에서 쉽게 할 수 있게 방법은 갖춰 놓고 있다. 그저 직관적으로 쉽게 할 수 있는 방법이 없을 뿐이다. 그렇다고 어려운 건 절대로 아니다.&lt;/p&gt;
&lt;h2&gt;Swift 프로젝트에 컴파일러 플래그 추가하기&lt;/h2&gt;
&lt;p&gt;플래그를 추가하기 위해서 Xcode에서 해당 프로젝트의 Target을 선택한 후 Build Settings에서 아래와 같은 루트로 혹은 검색으로 Other Swift Flags 항목을 찾아보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build Settings - Swift Compiler - Custom Flags - Other Swift Flags&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;여기에서 원하는 빌드 환경에서 &lt;code&gt;+&lt;/code&gt; 버튼을 눌러서 원하는 플래그를 &lt;code&gt;-D&lt;/code&gt; 옵션을 붙여서 추가해주자. 예를 들어 &lt;code&gt;SPECIAL_FEATURE&lt;/code&gt;라는 플래그를 추가해 주고 싶다면 &lt;code&gt;-DSPECIAL_FEATURE&lt;/code&gt;라고 적어주면 된다. 두 개 이상 추가하고 싶다면 각 플래그 이름마다 이렇게 &lt;code&gt;-D&lt;/code&gt;를 앞에 붙여서 계속 추가해 주면 된다. &lt;em&gt;물론 &lt;code&gt;-D&lt;/code&gt; 뿐만 아니라 다양한 컴파일러 옵션을 사용할 수도 있지만 이 글의 주제는 어디까지나 플래그 추가다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이후 Swift에서 &lt;code&gt;#if&lt;/code&gt;를 이용해 이 플래그가 정의되었을 경우의 동작을 코딩할 수 있다. 예를 들어 위에서처럼 플래그에 &lt;code&gt;-DSPECIAL_FEATURE&lt;/code&gt;를 추가한 경우 아래와 같은 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;#if SPECIAL_FEATURE
useSpecialFeature()
#else
useNormalFeature()
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C에 익숙하다면 왜 &lt;code&gt;#ifdef&lt;/code&gt;나 &lt;code&gt;#if defined()&lt;/code&gt;가 아닌가 고민할 수도 있겠지만 Swift에선 이렇게 하면 되니 괜히 고민하지 말자. 난이도도 한 번만 해보면 참 간단한 일이라고 느낄 것이다.&lt;/p&gt;
&lt;h2&gt;트러블슈팅&lt;/h2&gt;
&lt;p&gt;플래그를 추가하고 빌드하는데 아래와 같은 오류를 만날 수도 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Conditional compilation flags must be valid Swift identifiers (rather than ' FLAGNAME')&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 오류는 뭔가를 잘못 적은 것 같다는 의미로 이해하면 된다. 혹시 플래그를 추가할 때 &lt;code&gt;-DNAME&lt;/code&gt; 형식이 아닌 &lt;code&gt;-D NAME&lt;/code&gt; 등 이상한 형식으로 입력되지 않았나 확인해 보자. 기본적으로 &lt;code&gt;-D&lt;/code&gt; 옵션 뒤에 공백 없이 플래그 이름이 바로 나열되어야 한다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;하나의 소스 코드로 여러 일을 처리하고 싶은 욕심은 어떤 프로그래머나 가지고 있을 것 같다. 그 중 C 등의 컴파일 되는 언어에서 유래한 흔한 방식으로 바로 전처리기(Proprocessor)를 활용하는 방법이 있다. 코드가 아닌 빌드 도구 차원에서 빌드하는 코드가 어떻게 동작할 지를 결정할 수 있는 좋은 방법이니 말이다.&lt;/p&gt;
&lt;p&gt;그렇다면 Xcode에서 작업 중인 Swift 프로젝트에서는 이런 전처리기 플래그를 어떻게 추가하면 좋을까?&lt;/p&gt;
&lt;p&gt;물론 Xcode에서 쉽게 할 수 있게 방법은 갖춰 놓고 있다. 그저 직관적으로 쉽게 할 수 있는 방법이 없을 뿐이다. 그렇다고 어려운 건 절대로 아니다.&lt;/p&gt;
&lt;h2&gt;Swift 프로젝트에 컴파일러 플래그 추가하기&lt;/h2&gt;
&lt;p&gt;플래그를 추가하기 위해서 Xcode에서 해당 프로젝트의 Target을 선택한 후 Build Settings에서 아래와 같은 루트로 혹은 검색으로 Other Swift Flags 항목을 찾아보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build Settings - Swift Compiler - Custom Flags - Other Swift Flags&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;여기에서 원하는 빌드 환경에서 &lt;code&gt;+&lt;/code&gt; 버튼을 눌러서 원하는 플래그를 &lt;code&gt;-D&lt;/code&gt; 옵션을 붙여서 추가해주자. 예를 들어 &lt;code&gt;SPECIAL_FEATURE&lt;/code&gt;라는 플래그를 추가해 주고 싶다면 &lt;code&gt;-DSPECIAL_FEATURE&lt;/code&gt;라고 적어주면 된다. 두 개 이상 추가하고 싶다면 각 플래그 이름마다 이렇게 &lt;code&gt;-D&lt;/code&gt;를 앞에 붙여서 계속 추가해 주면 된다. &lt;em&gt;물론 &lt;code&gt;-D&lt;/code&gt; 뿐만 아니라 다양한 컴파일러 옵션을 사용할 수도 있지만 이 글의 주제는 어디까지나 플래그 추가다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이후 Swift에서 &lt;code&gt;#if&lt;/code&gt;를 이용해 이 플래그가 정의되었을 경우의 동작을 코딩할 수 있다. 예를 들어 위에서처럼 플래그에 &lt;code&gt;-DSPECIAL_FEATURE&lt;/code&gt;를 추가한 경우 아래와 같은 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;#if SPECIAL_FEATURE
useSpecialFeature()
#else
useNormalFeature()
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C에 익숙하다면 왜 &lt;code&gt;#ifdef&lt;/code&gt;나 &lt;code&gt;#if defined()&lt;/code&gt;가 아닌가 고민할 수도 있겠지만 Swift에선 이렇게 하면 되니 괜히 고민하지 말자. 난이도도 한 번만 해보면 참 간단한 일이라고 느낄 것이다.&lt;/p&gt;
&lt;h2&gt;트러블슈팅&lt;/h2&gt;
&lt;p&gt;플래그를 추가하고 빌드하는데 아래와 같은 오류를 만날 수도 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Conditional compilation flags must be valid Swift identifiers (rather than ' FLAGNAME')&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 오류는 뭔가를 잘못 적은 것 같다는 의미로 이해하면 된다. 혹시 플래그를 추가할 때 &lt;code&gt;-DNAME&lt;/code&gt; 형식이 아닌 &lt;code&gt;-D NAME&lt;/code&gt; 등 이상한 형식으로 입력되지 않았나 확인해 보자. 기본적으로 &lt;code&gt;-D&lt;/code&gt; 옵션 뒤에 공백 없이 플래그 이름이 바로 나열되어야 한다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/xcode-swift-compiler-flag.html</guid>
      <pubDate>Wed, 17 Jul 2024 16:47:00 +0900</pubDate>
    </item>
    <item>
      <title>SwiftUI에서 바인딩 매개변수를 일반 타입의 값으로 넘기기</title>
      <link>https://seorenn.github.io/article/swift-fix-cannot-convert-to-binding.html</link>
      <description>&lt;p&gt;SwiftUI로 뷰를 만들다 해당 뷰를 테스트 해야 할 일이 있을 수 있다. 예를 들자면 프리뷰(SwiftUI Preview)용 코드를 작성할 때 등등 말이다. 그래서 시험용으로 몇몇 변수의 값을 하드코딩으로 넘기는 경우도 허다할 것이다.&lt;/p&gt;
&lt;p&gt;그런데 이런 경우 아래와 같은 형식의 오류를 종종 볼 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cannot convert value of type 'FooBar' to expected argument type 'Binding&amp;lt;FooBar&amp;gt;'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;직역하면 특정 타입의 값을 원하는 바인딩 타입으로 변환할 수 없다라는 의미다. 참고로 &lt;code&gt;FooBar&lt;/code&gt;로 표기한 부분에는 실제로 사용된 타입이 표시되는 부분이니 오해하지 말자. 사용하는 타입에 따라 메시지는 당연히 바뀔 것이다.&lt;/p&gt;
&lt;p&gt;어쨌거나 이 오류의 원인은 &lt;code&gt;@Binding&lt;/code&gt; 등으로 표기된 프로퍼티의 값으로 넘겨야 할 값을 그냥 정적인 값으로 넘겼기 때문에 발생한다.&lt;/p&gt;
&lt;p&gt;따라서 해결 방법 중 가장 직관적인(?) 방법은 넘기려는 값을 &lt;code&gt;@State&lt;/code&gt; 등의 프로퍼티로 생성해서 바인딩 가능하게 넘기는 방법이 있을 것이다. 물론 그게 귀찮으니 이런 글이 탄생했지만 말이다.&lt;/p&gt;
&lt;h2&gt;그 외에 가장 간단한 해결 방법&lt;/h2&gt;
&lt;p&gt;이럴 때를 위해 &lt;code&gt;Binding.constant&lt;/code&gt;가 제공된다. 어려울 것 없이 넘기려는 값을 매개변수로 넣어서 '바인딩 타입으로 값을 한번 감싸서 전달'하는 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;MyViewController(name: .constant(&amp;quot;Temporary Name&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그렇게 하면 간단하게 해결된다.&lt;/p&gt;
&lt;p&gt;물론 이렇게 하면 SwiftUI 특유의 바인딩의 제대로 된 기능을 활용하지 못 한다는 점을 기억하자. 단순히 테스트 혹은 프리뷰 용도로만 활용하기엔 괜찮은 방법 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;SwiftUI로 뷰를 만들다 해당 뷰를 테스트 해야 할 일이 있을 수 있다. 예를 들자면 프리뷰(SwiftUI Preview)용 코드를 작성할 때 등등 말이다. 그래서 시험용으로 몇몇 변수의 값을 하드코딩으로 넘기는 경우도 허다할 것이다.&lt;/p&gt;
&lt;p&gt;그런데 이런 경우 아래와 같은 형식의 오류를 종종 볼 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cannot convert value of type 'FooBar' to expected argument type 'Binding&amp;lt;FooBar&amp;gt;'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;직역하면 특정 타입의 값을 원하는 바인딩 타입으로 변환할 수 없다라는 의미다. 참고로 &lt;code&gt;FooBar&lt;/code&gt;로 표기한 부분에는 실제로 사용된 타입이 표시되는 부분이니 오해하지 말자. 사용하는 타입에 따라 메시지는 당연히 바뀔 것이다.&lt;/p&gt;
&lt;p&gt;어쨌거나 이 오류의 원인은 &lt;code&gt;@Binding&lt;/code&gt; 등으로 표기된 프로퍼티의 값으로 넘겨야 할 값을 그냥 정적인 값으로 넘겼기 때문에 발생한다.&lt;/p&gt;
&lt;p&gt;따라서 해결 방법 중 가장 직관적인(?) 방법은 넘기려는 값을 &lt;code&gt;@State&lt;/code&gt; 등의 프로퍼티로 생성해서 바인딩 가능하게 넘기는 방법이 있을 것이다. 물론 그게 귀찮으니 이런 글이 탄생했지만 말이다.&lt;/p&gt;
&lt;h2&gt;그 외에 가장 간단한 해결 방법&lt;/h2&gt;
&lt;p&gt;이럴 때를 위해 &lt;code&gt;Binding.constant&lt;/code&gt;가 제공된다. 어려울 것 없이 넘기려는 값을 매개변수로 넣어서 '바인딩 타입으로 값을 한번 감싸서 전달'하는 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;MyViewController(name: .constant(&amp;quot;Temporary Name&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그렇게 하면 간단하게 해결된다.&lt;/p&gt;
&lt;p&gt;물론 이렇게 하면 SwiftUI 특유의 바인딩의 제대로 된 기능을 활용하지 못 한다는 점을 기억하자. 단순히 테스트 혹은 프리뷰 용도로만 활용하기엔 괜찮은 방법 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/swift-fix-cannot-convert-to-binding.html</guid>
      <pubDate>Tue, 16 Jul 2024 13:47:00 +0900</pubDate>
    </item>
    <item>
      <title>투싼 하이브리드 개인적인 평가</title>
      <link>https://seorenn.github.io/article/tucson-hev-nx4-facelift-review.html</link>
      <description>&lt;p&gt;투싼 하이브리드(NX4 HEV PE, 부분변경 모델) 전륜 모델을 2024년 1월 구입하여 지금껏 계속 운행하고 있다. 이 글은 이 차의 장단점이나 평가를 간단히 정리해 보는 글이며 지속적으로 업데이트 될 예정이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="더 뉴 투싼" src="../upload/202407152138-a18f7cbb.png" /&gt;
&lt;em&gt;더 뉴 투싼 (현대자동차)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;전반적인 승차감&lt;/h2&gt;
&lt;p&gt;딱히 다른 고급차나 대형차를 충분히 몰아본 경험이 없는 개인으로써 투싼 하이브리드 - 이하 투싼하브 - 는 굉장히 만족스럽다고 평가한다.&lt;/p&gt;
&lt;p&gt;다만 조수석에 앉은 동승자는 썩 마음에 들지는 않은 승차감인 모양이다. 덕분에 혹시나 나중에 투싼에 질리게 되었을 때 더 큰 차로 바꿀 명분을 자연스럽게 획득했다.&lt;/p&gt;
&lt;p&gt;뒷좌석에는 아이들이 주로 타는데 일단 좀 몰다 보면 잠에 들긴 해서 그나마 안심하고는 있다. 하지만 큰 애는 카시트가 답답하다고 하면서 잘 안 타려고 하는 게 혹시 승차감 때문인가 싶어서 좀 마음에 걸린다.&lt;/p&gt;
&lt;p&gt;세단과 SUV의 승차감 비교는 대체로 무의미한 일이니 하지 말자.&lt;/p&gt;
&lt;h2&gt;성능&lt;/h2&gt;
&lt;p&gt;패밀리카로써 더 이상의 성능이 필요할까? 조용하고 힘세고 빠르다. 초 고각 언덕도 무리 없이 올라갔고 고속도로에서도 충분히 넘치는 가속력이었다. 심지어 4인이 타고 짐도 가득 실었어도 힘이 달린다는 느낌을 받은 적은 한 번도 없었다.&lt;/p&gt;
&lt;p&gt;아마도 1.6T HEV 조합에서 가장 최적의 성능을 내는 한계 차종이 이 투싼 급이지 않을까 생각된다. 커뮤니티의 평가이긴 했지만 투싼보다 높은 급의 세그먼트에선 1.6T HEV의 힘의 부족이 느껴진다는 평가가 종종 보이니 말이다.&lt;/p&gt;
&lt;h2&gt;언덕 오르기&lt;/h2&gt;
&lt;p&gt;평범한 언덕 말고 초고경사 언덕을 오를 일이 가끔 있는데 옛날에 몰던 오래된 차로는 상당히 곤욕스러운 일이었다. 얼마나 언덕이 심하면 브레이크에서 발을 떼면 후진 풀악셀을 밟는 느낌이었으니 말이다. 그래서 옛날 차로는 브레이크에서 발을 떼서 엑셀로 발을 옮기는 순간이 너무나 긴장되고 무서웠던 순간이 많았다.&lt;/p&gt;
&lt;p&gt;하지만 투싼은 밀림방지 기능도 있는 데다 오토홀드를 쓸 수도 있어서 언덕에서 상대적으로 덜 무서웠다. 아직까지 오토홀드 없이도 그렇게 밀린다는 느낌을 받은 적은 없는 것 같다. 다만 급경사의 길에서 주차하는 등 정방향이 아닌 상황에서는 약간씩 밀리는 경우가 있기는 하다.&lt;/p&gt;
&lt;h2&gt;고속도로 주행&lt;/h2&gt;
&lt;p&gt;주행감이나 승차감, 소음 면에서는 딱히 서술할 게 없을 것 같다. 고속으로 달리는 환경에선 고급 차량이 아닌 이상 큰 차이는 없을 것 같다. &lt;/p&gt;
&lt;p&gt;고속도로에서 스마트 크루즈 컨트롤(스마트CC)을 켜니 졸린다. 이건 너무나 큰 단점(?)이다. 물론 그만큼 편하다는 말이다. 시내만 달리다 갑자기 전용도로나 고속도로에 나가면 온 몸과 기분이 편해진다.&lt;/p&gt;
&lt;p&gt;다만 조향 보조 기능 혹은 차로 이탈 방지 기능 덕분에 좀 위험한 순간이 있었다. 예를 들어 어떤 자동차 전용도로에서 커브길에 차선이 끊긴 구간을 지나간 적이 있었는데 차가 멋대로 코너 바깥쪽으로 갑자기 핸들을 돌리길래 식겁하는 줄 알았다. 이래서 운행 보조구나 라고 절실히 느꼈다.&lt;/p&gt;
&lt;p&gt;약간의 단점이 더 있다면 인터페이스 같다. 주행 보조 버튼을 누르는 순간 스마트CC를 비롯한 온갖 주행 보조 기능이 켜지는 건 당연히 좋다. 하지만 이 버튼을 다시 눌러서 비활성화 시키면 크루즈 컨트롤만 비활성화 되는 것은 여전히 이상하다고 생각된다. 하다못해 차로중앙유지도 함께 비활성화 되었으면 좋겠다.&lt;/p&gt;
&lt;p&gt;고속도로주행보조는 HDA2가 아닌 HDA1이라 차선 자동 변경 기능은 없고 대신 깜빡이를 넣으면 속도를 더 올리는 등으로 보조해 줬는데 개인적인 운행 스타일에 맞지는 않았다. 그래서 차선 변경할 때는 그냥 액셀이나 브레이크 살짝으로 일부러 스마트CC를 비활성화 한 뒤 수동으로 끼어들고 다시 스마트CC를 활성화하는 식으로 운행했다. 어차피 스마트CC를 쓰는 사람이 차선을 자주 바꿀 이유는 없을 것 같고 말이다.&lt;/p&gt;
&lt;p&gt;이 기능에서 가장 큰 단점은 정전식 센서가 없어서 스티어링 휠을 자주 흔들어 줘야 한다는 점 같다. 직선으로 쭈욱 가는데 스티어링 휠을 흔들어야 한다는 건 오히려 위험해지게 만드는 행위가 아닐지 생각해 봐야 할 것 같다.&lt;/p&gt;
&lt;h2&gt;연비&lt;/h2&gt;
&lt;p&gt;주로 시내 짧은 거리를 운행했으며 장거리는 정말 가끔 운행하는 입장에서 최저 기록은 8.8 km/L, 최고 기록은 55.4 km/L로 찍혔다. 너무 천차만별인 것 같은데 주행거리나 속도 등 여러 변수가 존재한다. &lt;/p&gt;
&lt;p&gt;다만 누적 연비는 10 km/L 수준으로 처참하게 낮은데 아무래도 주행하지 않고 공회전 하는 경우가 많아서 그런 모양이다. 특히 아직 새 차 냄새가 완전히 빠지지 않아서 시동을 걸고도 출발하지 않고 창문을 열고 한참을 기다리는 경우가 잦았으니 어쩔 수 없을 것 같다.&lt;/p&gt;
&lt;p&gt;고속도로가 포함된 장거리의 경우에는 대체로 14km/L 이상은 나와주는 편이지만 4인 탑승 기준으로는 18km/L 이상 뽑는 것은 좀 무리라는 느낌도 들었다.&lt;/p&gt;
&lt;p&gt;관련된 설정으로 회생제동은 과거에는 1 레벨로 설정하고 다녔지만 지금은 0 레벨 즉 기본 상태로 사용 중이다. 이렇게 해도 타력주행 시 작게나마 충전이 되고 약간 브레이킹 시 회생제동이 잘 걸린다. 그 외에 스마트 회생제동은 시내 주행 시에만 자동 레벨로 아주 간혹 사용할 때도 있었지만 동승객이 있는 경우는 사용하지 않는 편이다.&lt;/p&gt;
&lt;h2&gt;어라운드 뷰&lt;/h2&gt;
&lt;p&gt;어라운드 뷰는 차량 주변을 3D로 합성해서 보여주는 멋지고 정말 돈 값을 하는 옵션이다. 안 그래도 아파트 주차장이 좁아서 주차 라인도 협소한데 여기에 딱 맞게 넣을 때 큰 역할을 한다. 예전에는 내려서 눈으로 보고 삐져나가 있으면 다시 타서 이동시키고 별 X랄을 했어야 했는데 말이다.&lt;/p&gt;
&lt;p&gt;종종 좁은 골목길이나 차량이 빡빡한 주차장에 갇힐(?) 때가 있는데 거리 센서와 함께 이 어라운드 뷰를 잘 이용해 차를 안전하게 탈출(?)시키는 등 정말 큰 도움이 될 때도 있었다. 이 정도면 이미 돈 값은 하는 옵션이다.&lt;/p&gt;
&lt;p&gt;다만 한 밤 중에는 돈 값을 못 할 때가 많다. 아무래도 주변이 어두워서 잘 보이지 않는데 차선도 잘 보일 리가 없다. 밤에 간접적으로 빛을 비춰줄 특수한 조명 시스템이 있었으면 좋겠다는 생각이 든다.&lt;/p&gt;
&lt;p&gt;참고로 어라운드 뷰는 인스퍼레이션 트림의 경우 파킹어시스트 옵션에 포함되어 있다.&lt;/p&gt;
&lt;h2&gt;긴급 제동&lt;/h2&gt;
&lt;p&gt;긴급 제동이 동작하면 굉장히 위험한 순간일 것 같은데 뭐 틀린 건 아니다. 다만 개인적인 경험으론 그렇게 위험한 경우는 아니었다. 예를 들어 후진 중 뒤에 사람이 갑자기 나타나 지나간다거나, 후진 주차 중 뒤차에 너무 가까이 붙었을 때 등 긴급제동에 도움을 받았다. 하지만 어차피 아주 천천히 움직이던 상황이라 그렇게 위험하진 않은 상황이기도 했었다.&lt;/p&gt;
&lt;p&gt;뭐 하여간 이 긴급제동도 돈 값을 하는 옵션 같다. 아 옵션이 아니라 기본 기능인가?&lt;/p&gt;
&lt;p&gt;참고로 긴급제동이 걸릴 만큼 사물과 가까운 상황에서는 다시 긴급 제동을 걸어주지는 않는 모양이다. 쓰라린 경험(?)으로 익힌 교훈이다.&lt;/p&gt;
&lt;h2&gt;변속 충격&lt;/h2&gt;
&lt;p&gt;전반적으로 변속 과정이 잘 느껴지지 않을 정도로 가속이나 감속 시 이질감을 느끼지 못 했다.&lt;/p&gt;
&lt;p&gt;특이한 점으로 저속의 어느 구간에서 모터가 약간 치고 나가는 듯한 느낌을 받을 때도 있었다. 다만 자주 겪지는 않았고 무엇보다 해당 구간은 짧은 영역의 RPM에 한해서만 나타나는 듯했다. 어쩌면 모터와 엔진이 함께 돌아가다 엔진이 꺼지며 모터가 약간 힘을 더 내는 구간에서 그렇게 느껴지는 것일지도 모르겠다.&lt;/p&gt;
&lt;p&gt;비슷하게 오르막길에서 액셀을 약하게 밟아서 속도를 아주 부드럽게 서서히 줄여갈 경우 내연기관이 꺼지는 순간 역시 모터가 갑자기 살짝 강하게 개입되는 느낌을 받을 때도 있다. 하지만 아이가 동승하고 있지 않다면 이렇게 심하게 부드러운 운행을 할 이유는 없을 것 같아서 별 문제는 아니라고 생각된다.&lt;/p&gt;
&lt;h2&gt;소음&lt;/h2&gt;
&lt;p&gt;페이스리프트 전의 투싼 하이브리드의 단점 중 가볍게 하나 꼽히는 게 내연기관이 개입될 때 소음이 크게 느껴진다는 평가가 있었다. 그래서 페이스리프트 된 더 뉴 투싼 하이브리드도 그러지 않을까 생각했다.&lt;/p&gt;
&lt;p&gt;그런데 더 뉴 투싼 하이브리드를 몰아보면서 갑자기 소음이 커진다거나 시끄럽다거나 하는 느낌을 못 받았다. 엔진이 개입될 때의 소리도 갑자기 커지는 게 아니라 부드럽게 커지는 느낌이었다. 어쩌면 엔진오일 증가 문제 때문에 이전에 비해 엔진이 더 자주 개입하는 걸 수도 있다. 고속도로에 진입해서 급하게 가속할 때도 소음이 갑자기 커진다는 느낌을 받지는 못했다.&lt;/p&gt;
&lt;p&gt;엔진 소리 자체도 불쾌감보다는 오히려 기분 좋은 경쾌감이 느껴지는 사운드라고 생각한다.&lt;/p&gt;
&lt;p&gt;물론 소음이 작은 것은 아니다. 창문을 열어놓은 상태에서 시동이 걸리면 상당히 시끄럽기는 하다. 그리고 뒷좌석에서는 소음을 상대적으로 크게 느낄 가능성은 있다. 2중 접합 유리는 앞 좌석에만 있으니 말이다.&lt;/p&gt;
&lt;h2&gt;전체적인 공간&lt;/h2&gt;
&lt;p&gt;투싼 급이면 4인 가족 패밀리카로 충분한 공간이라고 생각한다. 아직까지 실내가 좁아서 불만족스러웠던 경험이 없었다.&lt;/p&gt;
&lt;p&gt;다만 4인 패밀리카로써는 약간의 조건이 있다. 바로 유모차는 한 대만 싣는다는 조건이다. 만약 아이가 둘인데 나이 차이가 별로 안 나거나 쌍둥이라서 유모차를 2대 혹은 대형 사이즈나 왜건 등을 실어야 한다면 안타깝지만 이보다 더 큰 급의 차량은 선택이 아닌 필수인 것 같다. 하지만 아이가 둘이라도 한 명은 유모차를 안 타도 될 만큼 나이가 들었다는 가정에서는 충분히 4인 가족 패밀리카로 손색이 없는 공간인 것 같다.&lt;/p&gt;
&lt;p&gt;어쨌든 최대한 짐을 많이 실었을 때는 유모차 하나, 27인치 모니터 3대가 들어갈 만한 크기의 골판지 상자, 마트에서 주는 쇼핑백 하나 정도가 들어가고도 룸 미러를 보는 데 문제가 없었다.&lt;/p&gt;
&lt;h2&gt;트렁크&lt;/h2&gt;
&lt;p&gt;투싼 뒤에서 트렁크를 직접 열 때는 간단히 버튼 하나만 누르면 쑥 자동으로 열리고 다시 버튼 하나만 누르면 자동으로 닫히는데, 이런 걸 경험해 보지 못한 이에겐 참으로 신문물이다. 정말 편하다.&lt;/p&gt;
&lt;p&gt;그런데 스마트키나 운전석에서 열 때는 왜 한 번에 자동이 아닌 꾹 누르고 있어야 하는지는 좀 불만스러웠다. 물론 안전 때문이라고는 하지만 열릴 때 자동으로 문제가 있으면 멈추도록 만드는 게 상품성은 확실히 좋았을 텐데 말이다. 닫힐 때도 뭔가 걸리면 자동으로 멈추게 하는 것 정도는 기본이 되어야 하지 않을까 생각되기도 했다.&lt;/p&gt;
&lt;p&gt;어쨌든 편하고 아직까지 안전 문제와 관련한 이벤트도 없었기에 당장은 만족하는 편이다.&lt;/p&gt;
&lt;p&gt;트렁크 공간은 이미 서술했다시피 넓다고 생각하면 넓지만, 아주 큰 짐을 넣을 때면 작게 느껴지는 건 어쩔 수 없을 것 같기도 하다. 하지만 SUV의 장점, 즉 뒷좌석 폴딩으로 확 넓어지는 트렁크 공간을 체감할 수도 있으니 무작정 실망할 필요는 없을 것 같다. 그저 뒷좌석 모두가 카시트에 점령되지만 않는다면 말이지만 말이다.&lt;/p&gt;
&lt;h2&gt;블랙박스(feat. 빌트인캠2)&lt;/h2&gt;
&lt;p&gt;사제 블랙박스를 달 필요가 없을 정도로 충분한 기능을 제공한다. 약간의 이벤트에도 해당 이벤트가 어디서 발생했는지 표시해 주는 등 차 안에서 블랙박스의 내용을 볼 때도 충분하다.&lt;/p&gt;
&lt;p&gt;주차 중에도 차체에 충격이 있을 경우 자동으로 녹화가 되고 이를 블루링크 앱을 통해 알림을 받고 아예 원격으로도 볼 수 있게 해 준다는 점은 정말 신세계인 것 같다. 하지만 그 충격이란게 대부분 주변에 큰 차가 지나간 경우라서 어떨 때는 왜 이렇게 민감한가 생각되기도 한다.&lt;/p&gt;
&lt;p&gt;다만 약간 불편한 점이 있다면 블루링크 앱에서 자꾸 ‘녹화가 잘 끝났다’는 알림을 보내오는 게 귀찮다는 점 정도일 것 같다.&lt;/p&gt;
&lt;p&gt;어쨌든 가성비 측면에서도 제법 효율적이라고 생각되는 옵션 같다.&lt;/p&gt;
&lt;h2&gt;베이비 모드&lt;/h2&gt;
&lt;p&gt;드라이브 모드를 베이비 모드 - 정확히는 MY DRIVE를 베이비 모드로 세팅한 경우 - 로 세팅하고 운행하면 확실히 출발 때가 답답하다는 것을 느끼긴 했다. 좋게 말하자면 정말 부드럽게 출발한다.&lt;/p&gt;
&lt;p&gt;다만 멈출 때나 과속방지턱을 넘을 때는 얼마나 차이가 있는 지는 아직도 잘 모르겠다.&lt;/p&gt;
&lt;p&gt;앞서 언급했다시피 간혹 답답하다는 느낌이 들 때도 있어서 항상 사용하지는 않지만 아이들이 타고 있고 가끔 컨디션이 별로라고 느껴질 때는 해당 모드를 설장하는 편이다.&lt;/p&gt;
&lt;h2&gt;HUD&lt;/h2&gt;
&lt;p&gt;HUD가 있으니 클러스터를 거의 안 보는 것 같다. 해봤자 남은 주행 가능 거리나 기름 양 확인할 때, 회생제동 잘 되나 혹은 회생제동 레벨이 얼마인지 확인할 때가 아니면 클러스터를 볼 일이 없는 수준이니 말이다. 그만큼 확실히 편하고 돈 값을 하는 기능이다. 특히 전방 주시 시점에서 시점을 크게 안 옮겨도 되니 안전 측면에서도 정말 중요한 옵션이라고 생각된다.&lt;/p&gt;
&lt;p&gt;지금은 좀 익숙해진 것 같지만 여전히 HUD가 맺히는 초점이 잘 안 맞는 것 같은 건 완벽하게 적응되지는 않는 것 같다. 하지만 인식에 문제가 있는 수준은 아니라서 별 불만은 없는 편이다.&lt;/p&gt;
&lt;h2&gt;후면 깜빡이&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;더 뉴 투싼의 가장 큰 단점은 후면 깜빡이 위치&lt;/strong&gt;인 것은 변함이 없다. 아마도 투싼 구입을 꺼리는 요소 두 가지를 꼽으라면 디자인 취향을 빼면 이 후면 깜박이 위치가 가장 큰 원인일 것이다.&lt;/p&gt;
&lt;p&gt;그런데 지금에 와서 이렇게 낮은 후면 깜빡이도 그렇게 큰 문제는 아니다라고도 느껴진다. 아직도 끼어들기 하다가 신경질적인 반응을 받아 본 적은 없다. 그리고 직접 운전할 때 깜빡이가 낮은 차가 끼어든다고 위험했을 법한 상황은 아직 겪은 적이 없다. 그리고 깜빡이가 높든 낮든 갑자기 끼어드는 차는 어쨌든 위험천만했다. 역시 사람은 적응의 동물이라 깜빡이가 낮아도 다 적응하게 되어있다.&lt;/p&gt;
&lt;p&gt;개인적인 경험으로도 앞 차의 후면 깜빡이가 너무 낮아서 짜증나는 상황을 겪은 적은 없었기도 하다. 깜빡이 위치든 뭐든 무엇보다 중요한 것은 안전운전 그리고 방어운전이다.&lt;/p&gt;
&lt;h2&gt;보닛&lt;/h2&gt;
&lt;p&gt;보닛(본네트)은 차를 인수하고 난 뒤 바로 궁금해서 열어본 적이 한 번 있었다. 보닛 자체는 꽤나 무거웠다. 고정시키려면 꼬챙이를 걸어야 해서 불편했고 꼬챙이가 구부려져 갑자기 보닛 뚜껑이 떨어질 것 같은 불안감이 느껴지기도 했다.&lt;/p&gt;
&lt;p&gt;그런데 보닛을 직접 열 일이 얼마나 될까 생각해 보니 이 정도 불편함은 그냥 잊혔다. 어차피 보닛을 자주 열 사람은 아무래도 정비사일 테니 말이다.&lt;/p&gt;
&lt;h2&gt;외장&lt;/h2&gt;
&lt;p&gt;외장 색상이 아마존 메탈릭 그레이인데 직사광선이 없는 곳에서는 어두운 회색에 까깝게 보이지만 빛에 따라서 녹색과 펄이 비쳐 보이는 독특한 색상이다.&lt;/p&gt;
&lt;p&gt;이런 다크 그레이 계열 색상은 특히 오염에 강하다고 느끼고 있다. 주변에 다니는 투싼을 통해 적어도 흰색에 비해 회색이 오염이 심하게 튀지 않고 검은색에 비해서도 더러워졌다는 느낌을 덜 받는 것 같다. 그래서 개인적으로는 차를 대충 몰려는 사람에게는 회색 계열 색상을 추천하고 싶다. 강력한 이미지의 그릴과 따로 노는 느낌의 흰색과 빨간색은 특히 안 어울리는 것 같기도 하고 말이다.&lt;/p&gt;
&lt;p&gt;그래서 아직도 세차장에 가보지 않았지만 차 상태는 깨끗하다고 느껴진다. 그저 먼지만 털고 물왁스로 정말 어쩌다 한번 닦았고 유리만 전용 세정제로 닦아주고 있다. 차가 너무 커서 세차할 엄두가 잘 안나기도 하고 말이다. 더 큰 차는 도대체 어떻게 닦아야 되나 모르겠다.&lt;/p&gt;
&lt;h2&gt;결론&lt;/h2&gt;
&lt;p&gt;더 뉴 투싼 하이브리드는 짐이 그렇게 많지는 않은 4인 가족이 타기에 무난하고 크기도 구축 아파트 주차장 라인에 꽉 차게 들어가는 아슬아슬한 크기에 연비도 좋고 성능도 무난한 한마디로 ‘적당한’ 패밀리 카다. 물론 혼자 타기에도, 배우자나 이성 친구와 타기에도 더없이 좋은 차 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;투싼 하이브리드(NX4 HEV PE, 부분변경 모델) 전륜 모델을 2024년 1월 구입하여 지금껏 계속 운행하고 있다. 이 글은 이 차의 장단점이나 평가를 간단히 정리해 보는 글이며 지속적으로 업데이트 될 예정이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="더 뉴 투싼" src="../upload/202407152138-a18f7cbb.png" /&gt;
&lt;em&gt;더 뉴 투싼 (현대자동차)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;전반적인 승차감&lt;/h2&gt;
&lt;p&gt;딱히 다른 고급차나 대형차를 충분히 몰아본 경험이 없는 개인으로써 투싼 하이브리드 - 이하 투싼하브 - 는 굉장히 만족스럽다고 평가한다.&lt;/p&gt;
&lt;p&gt;다만 조수석에 앉은 동승자는 썩 마음에 들지는 않은 승차감인 모양이다. 덕분에 혹시나 나중에 투싼에 질리게 되었을 때 더 큰 차로 바꿀 명분을 자연스럽게 획득했다.&lt;/p&gt;
&lt;p&gt;뒷좌석에는 아이들이 주로 타는데 일단 좀 몰다 보면 잠에 들긴 해서 그나마 안심하고는 있다. 하지만 큰 애는 카시트가 답답하다고 하면서 잘 안 타려고 하는 게 혹시 승차감 때문인가 싶어서 좀 마음에 걸린다.&lt;/p&gt;
&lt;p&gt;세단과 SUV의 승차감 비교는 대체로 무의미한 일이니 하지 말자.&lt;/p&gt;
&lt;h2&gt;성능&lt;/h2&gt;
&lt;p&gt;패밀리카로써 더 이상의 성능이 필요할까? 조용하고 힘세고 빠르다. 초 고각 언덕도 무리 없이 올라갔고 고속도로에서도 충분히 넘치는 가속력이었다. 심지어 4인이 타고 짐도 가득 실었어도 힘이 달린다는 느낌을 받은 적은 한 번도 없었다.&lt;/p&gt;
&lt;p&gt;아마도 1.6T HEV 조합에서 가장 최적의 성능을 내는 한계 차종이 이 투싼 급이지 않을까 생각된다. 커뮤니티의 평가이긴 했지만 투싼보다 높은 급의 세그먼트에선 1.6T HEV의 힘의 부족이 느껴진다는 평가가 종종 보이니 말이다.&lt;/p&gt;
&lt;h2&gt;언덕 오르기&lt;/h2&gt;
&lt;p&gt;평범한 언덕 말고 초고경사 언덕을 오를 일이 가끔 있는데 옛날에 몰던 오래된 차로는 상당히 곤욕스러운 일이었다. 얼마나 언덕이 심하면 브레이크에서 발을 떼면 후진 풀악셀을 밟는 느낌이었으니 말이다. 그래서 옛날 차로는 브레이크에서 발을 떼서 엑셀로 발을 옮기는 순간이 너무나 긴장되고 무서웠던 순간이 많았다.&lt;/p&gt;
&lt;p&gt;하지만 투싼은 밀림방지 기능도 있는 데다 오토홀드를 쓸 수도 있어서 언덕에서 상대적으로 덜 무서웠다. 아직까지 오토홀드 없이도 그렇게 밀린다는 느낌을 받은 적은 없는 것 같다. 다만 급경사의 길에서 주차하는 등 정방향이 아닌 상황에서는 약간씩 밀리는 경우가 있기는 하다.&lt;/p&gt;
&lt;h2&gt;고속도로 주행&lt;/h2&gt;
&lt;p&gt;주행감이나 승차감, 소음 면에서는 딱히 서술할 게 없을 것 같다. 고속으로 달리는 환경에선 고급 차량이 아닌 이상 큰 차이는 없을 것 같다. &lt;/p&gt;
&lt;p&gt;고속도로에서 스마트 크루즈 컨트롤(스마트CC)을 켜니 졸린다. 이건 너무나 큰 단점(?)이다. 물론 그만큼 편하다는 말이다. 시내만 달리다 갑자기 전용도로나 고속도로에 나가면 온 몸과 기분이 편해진다.&lt;/p&gt;
&lt;p&gt;다만 조향 보조 기능 혹은 차로 이탈 방지 기능 덕분에 좀 위험한 순간이 있었다. 예를 들어 어떤 자동차 전용도로에서 커브길에 차선이 끊긴 구간을 지나간 적이 있었는데 차가 멋대로 코너 바깥쪽으로 갑자기 핸들을 돌리길래 식겁하는 줄 알았다. 이래서 운행 보조구나 라고 절실히 느꼈다.&lt;/p&gt;
&lt;p&gt;약간의 단점이 더 있다면 인터페이스 같다. 주행 보조 버튼을 누르는 순간 스마트CC를 비롯한 온갖 주행 보조 기능이 켜지는 건 당연히 좋다. 하지만 이 버튼을 다시 눌러서 비활성화 시키면 크루즈 컨트롤만 비활성화 되는 것은 여전히 이상하다고 생각된다. 하다못해 차로중앙유지도 함께 비활성화 되었으면 좋겠다.&lt;/p&gt;
&lt;p&gt;고속도로주행보조는 HDA2가 아닌 HDA1이라 차선 자동 변경 기능은 없고 대신 깜빡이를 넣으면 속도를 더 올리는 등으로 보조해 줬는데 개인적인 운행 스타일에 맞지는 않았다. 그래서 차선 변경할 때는 그냥 액셀이나 브레이크 살짝으로 일부러 스마트CC를 비활성화 한 뒤 수동으로 끼어들고 다시 스마트CC를 활성화하는 식으로 운행했다. 어차피 스마트CC를 쓰는 사람이 차선을 자주 바꿀 이유는 없을 것 같고 말이다.&lt;/p&gt;
&lt;p&gt;이 기능에서 가장 큰 단점은 정전식 센서가 없어서 스티어링 휠을 자주 흔들어 줘야 한다는 점 같다. 직선으로 쭈욱 가는데 스티어링 휠을 흔들어야 한다는 건 오히려 위험해지게 만드는 행위가 아닐지 생각해 봐야 할 것 같다.&lt;/p&gt;
&lt;h2&gt;연비&lt;/h2&gt;
&lt;p&gt;주로 시내 짧은 거리를 운행했으며 장거리는 정말 가끔 운행하는 입장에서 최저 기록은 8.8 km/L, 최고 기록은 55.4 km/L로 찍혔다. 너무 천차만별인 것 같은데 주행거리나 속도 등 여러 변수가 존재한다. &lt;/p&gt;
&lt;p&gt;다만 누적 연비는 10 km/L 수준으로 처참하게 낮은데 아무래도 주행하지 않고 공회전 하는 경우가 많아서 그런 모양이다. 특히 아직 새 차 냄새가 완전히 빠지지 않아서 시동을 걸고도 출발하지 않고 창문을 열고 한참을 기다리는 경우가 잦았으니 어쩔 수 없을 것 같다.&lt;/p&gt;
&lt;p&gt;고속도로가 포함된 장거리의 경우에는 대체로 14km/L 이상은 나와주는 편이지만 4인 탑승 기준으로는 18km/L 이상 뽑는 것은 좀 무리라는 느낌도 들었다.&lt;/p&gt;
&lt;p&gt;관련된 설정으로 회생제동은 과거에는 1 레벨로 설정하고 다녔지만 지금은 0 레벨 즉 기본 상태로 사용 중이다. 이렇게 해도 타력주행 시 작게나마 충전이 되고 약간 브레이킹 시 회생제동이 잘 걸린다. 그 외에 스마트 회생제동은 시내 주행 시에만 자동 레벨로 아주 간혹 사용할 때도 있었지만 동승객이 있는 경우는 사용하지 않는 편이다.&lt;/p&gt;
&lt;h2&gt;어라운드 뷰&lt;/h2&gt;
&lt;p&gt;어라운드 뷰는 차량 주변을 3D로 합성해서 보여주는 멋지고 정말 돈 값을 하는 옵션이다. 안 그래도 아파트 주차장이 좁아서 주차 라인도 협소한데 여기에 딱 맞게 넣을 때 큰 역할을 한다. 예전에는 내려서 눈으로 보고 삐져나가 있으면 다시 타서 이동시키고 별 X랄을 했어야 했는데 말이다.&lt;/p&gt;
&lt;p&gt;종종 좁은 골목길이나 차량이 빡빡한 주차장에 갇힐(?) 때가 있는데 거리 센서와 함께 이 어라운드 뷰를 잘 이용해 차를 안전하게 탈출(?)시키는 등 정말 큰 도움이 될 때도 있었다. 이 정도면 이미 돈 값은 하는 옵션이다.&lt;/p&gt;
&lt;p&gt;다만 한 밤 중에는 돈 값을 못 할 때가 많다. 아무래도 주변이 어두워서 잘 보이지 않는데 차선도 잘 보일 리가 없다. 밤에 간접적으로 빛을 비춰줄 특수한 조명 시스템이 있었으면 좋겠다는 생각이 든다.&lt;/p&gt;
&lt;p&gt;참고로 어라운드 뷰는 인스퍼레이션 트림의 경우 파킹어시스트 옵션에 포함되어 있다.&lt;/p&gt;
&lt;h2&gt;긴급 제동&lt;/h2&gt;
&lt;p&gt;긴급 제동이 동작하면 굉장히 위험한 순간일 것 같은데 뭐 틀린 건 아니다. 다만 개인적인 경험으론 그렇게 위험한 경우는 아니었다. 예를 들어 후진 중 뒤에 사람이 갑자기 나타나 지나간다거나, 후진 주차 중 뒤차에 너무 가까이 붙었을 때 등 긴급제동에 도움을 받았다. 하지만 어차피 아주 천천히 움직이던 상황이라 그렇게 위험하진 않은 상황이기도 했었다.&lt;/p&gt;
&lt;p&gt;뭐 하여간 이 긴급제동도 돈 값을 하는 옵션 같다. 아 옵션이 아니라 기본 기능인가?&lt;/p&gt;
&lt;p&gt;참고로 긴급제동이 걸릴 만큼 사물과 가까운 상황에서는 다시 긴급 제동을 걸어주지는 않는 모양이다. 쓰라린 경험(?)으로 익힌 교훈이다.&lt;/p&gt;
&lt;h2&gt;변속 충격&lt;/h2&gt;
&lt;p&gt;전반적으로 변속 과정이 잘 느껴지지 않을 정도로 가속이나 감속 시 이질감을 느끼지 못 했다.&lt;/p&gt;
&lt;p&gt;특이한 점으로 저속의 어느 구간에서 모터가 약간 치고 나가는 듯한 느낌을 받을 때도 있었다. 다만 자주 겪지는 않았고 무엇보다 해당 구간은 짧은 영역의 RPM에 한해서만 나타나는 듯했다. 어쩌면 모터와 엔진이 함께 돌아가다 엔진이 꺼지며 모터가 약간 힘을 더 내는 구간에서 그렇게 느껴지는 것일지도 모르겠다.&lt;/p&gt;
&lt;p&gt;비슷하게 오르막길에서 액셀을 약하게 밟아서 속도를 아주 부드럽게 서서히 줄여갈 경우 내연기관이 꺼지는 순간 역시 모터가 갑자기 살짝 강하게 개입되는 느낌을 받을 때도 있다. 하지만 아이가 동승하고 있지 않다면 이렇게 심하게 부드러운 운행을 할 이유는 없을 것 같아서 별 문제는 아니라고 생각된다.&lt;/p&gt;
&lt;h2&gt;소음&lt;/h2&gt;
&lt;p&gt;페이스리프트 전의 투싼 하이브리드의 단점 중 가볍게 하나 꼽히는 게 내연기관이 개입될 때 소음이 크게 느껴진다는 평가가 있었다. 그래서 페이스리프트 된 더 뉴 투싼 하이브리드도 그러지 않을까 생각했다.&lt;/p&gt;
&lt;p&gt;그런데 더 뉴 투싼 하이브리드를 몰아보면서 갑자기 소음이 커진다거나 시끄럽다거나 하는 느낌을 못 받았다. 엔진이 개입될 때의 소리도 갑자기 커지는 게 아니라 부드럽게 커지는 느낌이었다. 어쩌면 엔진오일 증가 문제 때문에 이전에 비해 엔진이 더 자주 개입하는 걸 수도 있다. 고속도로에 진입해서 급하게 가속할 때도 소음이 갑자기 커진다는 느낌을 받지는 못했다.&lt;/p&gt;
&lt;p&gt;엔진 소리 자체도 불쾌감보다는 오히려 기분 좋은 경쾌감이 느껴지는 사운드라고 생각한다.&lt;/p&gt;
&lt;p&gt;물론 소음이 작은 것은 아니다. 창문을 열어놓은 상태에서 시동이 걸리면 상당히 시끄럽기는 하다. 그리고 뒷좌석에서는 소음을 상대적으로 크게 느낄 가능성은 있다. 2중 접합 유리는 앞 좌석에만 있으니 말이다.&lt;/p&gt;
&lt;h2&gt;전체적인 공간&lt;/h2&gt;
&lt;p&gt;투싼 급이면 4인 가족 패밀리카로 충분한 공간이라고 생각한다. 아직까지 실내가 좁아서 불만족스러웠던 경험이 없었다.&lt;/p&gt;
&lt;p&gt;다만 4인 패밀리카로써는 약간의 조건이 있다. 바로 유모차는 한 대만 싣는다는 조건이다. 만약 아이가 둘인데 나이 차이가 별로 안 나거나 쌍둥이라서 유모차를 2대 혹은 대형 사이즈나 왜건 등을 실어야 한다면 안타깝지만 이보다 더 큰 급의 차량은 선택이 아닌 필수인 것 같다. 하지만 아이가 둘이라도 한 명은 유모차를 안 타도 될 만큼 나이가 들었다는 가정에서는 충분히 4인 가족 패밀리카로 손색이 없는 공간인 것 같다.&lt;/p&gt;
&lt;p&gt;어쨌든 최대한 짐을 많이 실었을 때는 유모차 하나, 27인치 모니터 3대가 들어갈 만한 크기의 골판지 상자, 마트에서 주는 쇼핑백 하나 정도가 들어가고도 룸 미러를 보는 데 문제가 없었다.&lt;/p&gt;
&lt;h2&gt;트렁크&lt;/h2&gt;
&lt;p&gt;투싼 뒤에서 트렁크를 직접 열 때는 간단히 버튼 하나만 누르면 쑥 자동으로 열리고 다시 버튼 하나만 누르면 자동으로 닫히는데, 이런 걸 경험해 보지 못한 이에겐 참으로 신문물이다. 정말 편하다.&lt;/p&gt;
&lt;p&gt;그런데 스마트키나 운전석에서 열 때는 왜 한 번에 자동이 아닌 꾹 누르고 있어야 하는지는 좀 불만스러웠다. 물론 안전 때문이라고는 하지만 열릴 때 자동으로 문제가 있으면 멈추도록 만드는 게 상품성은 확실히 좋았을 텐데 말이다. 닫힐 때도 뭔가 걸리면 자동으로 멈추게 하는 것 정도는 기본이 되어야 하지 않을까 생각되기도 했다.&lt;/p&gt;
&lt;p&gt;어쨌든 편하고 아직까지 안전 문제와 관련한 이벤트도 없었기에 당장은 만족하는 편이다.&lt;/p&gt;
&lt;p&gt;트렁크 공간은 이미 서술했다시피 넓다고 생각하면 넓지만, 아주 큰 짐을 넣을 때면 작게 느껴지는 건 어쩔 수 없을 것 같기도 하다. 하지만 SUV의 장점, 즉 뒷좌석 폴딩으로 확 넓어지는 트렁크 공간을 체감할 수도 있으니 무작정 실망할 필요는 없을 것 같다. 그저 뒷좌석 모두가 카시트에 점령되지만 않는다면 말이지만 말이다.&lt;/p&gt;
&lt;h2&gt;블랙박스(feat. 빌트인캠2)&lt;/h2&gt;
&lt;p&gt;사제 블랙박스를 달 필요가 없을 정도로 충분한 기능을 제공한다. 약간의 이벤트에도 해당 이벤트가 어디서 발생했는지 표시해 주는 등 차 안에서 블랙박스의 내용을 볼 때도 충분하다.&lt;/p&gt;
&lt;p&gt;주차 중에도 차체에 충격이 있을 경우 자동으로 녹화가 되고 이를 블루링크 앱을 통해 알림을 받고 아예 원격으로도 볼 수 있게 해 준다는 점은 정말 신세계인 것 같다. 하지만 그 충격이란게 대부분 주변에 큰 차가 지나간 경우라서 어떨 때는 왜 이렇게 민감한가 생각되기도 한다.&lt;/p&gt;
&lt;p&gt;다만 약간 불편한 점이 있다면 블루링크 앱에서 자꾸 ‘녹화가 잘 끝났다’는 알림을 보내오는 게 귀찮다는 점 정도일 것 같다.&lt;/p&gt;
&lt;p&gt;어쨌든 가성비 측면에서도 제법 효율적이라고 생각되는 옵션 같다.&lt;/p&gt;
&lt;h2&gt;베이비 모드&lt;/h2&gt;
&lt;p&gt;드라이브 모드를 베이비 모드 - 정확히는 MY DRIVE를 베이비 모드로 세팅한 경우 - 로 세팅하고 운행하면 확실히 출발 때가 답답하다는 것을 느끼긴 했다. 좋게 말하자면 정말 부드럽게 출발한다.&lt;/p&gt;
&lt;p&gt;다만 멈출 때나 과속방지턱을 넘을 때는 얼마나 차이가 있는 지는 아직도 잘 모르겠다.&lt;/p&gt;
&lt;p&gt;앞서 언급했다시피 간혹 답답하다는 느낌이 들 때도 있어서 항상 사용하지는 않지만 아이들이 타고 있고 가끔 컨디션이 별로라고 느껴질 때는 해당 모드를 설장하는 편이다.&lt;/p&gt;
&lt;h2&gt;HUD&lt;/h2&gt;
&lt;p&gt;HUD가 있으니 클러스터를 거의 안 보는 것 같다. 해봤자 남은 주행 가능 거리나 기름 양 확인할 때, 회생제동 잘 되나 혹은 회생제동 레벨이 얼마인지 확인할 때가 아니면 클러스터를 볼 일이 없는 수준이니 말이다. 그만큼 확실히 편하고 돈 값을 하는 기능이다. 특히 전방 주시 시점에서 시점을 크게 안 옮겨도 되니 안전 측면에서도 정말 중요한 옵션이라고 생각된다.&lt;/p&gt;
&lt;p&gt;지금은 좀 익숙해진 것 같지만 여전히 HUD가 맺히는 초점이 잘 안 맞는 것 같은 건 완벽하게 적응되지는 않는 것 같다. 하지만 인식에 문제가 있는 수준은 아니라서 별 불만은 없는 편이다.&lt;/p&gt;
&lt;h2&gt;후면 깜빡이&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;더 뉴 투싼의 가장 큰 단점은 후면 깜빡이 위치&lt;/strong&gt;인 것은 변함이 없다. 아마도 투싼 구입을 꺼리는 요소 두 가지를 꼽으라면 디자인 취향을 빼면 이 후면 깜박이 위치가 가장 큰 원인일 것이다.&lt;/p&gt;
&lt;p&gt;그런데 지금에 와서 이렇게 낮은 후면 깜빡이도 그렇게 큰 문제는 아니다라고도 느껴진다. 아직도 끼어들기 하다가 신경질적인 반응을 받아 본 적은 없다. 그리고 직접 운전할 때 깜빡이가 낮은 차가 끼어든다고 위험했을 법한 상황은 아직 겪은 적이 없다. 그리고 깜빡이가 높든 낮든 갑자기 끼어드는 차는 어쨌든 위험천만했다. 역시 사람은 적응의 동물이라 깜빡이가 낮아도 다 적응하게 되어있다.&lt;/p&gt;
&lt;p&gt;개인적인 경험으로도 앞 차의 후면 깜빡이가 너무 낮아서 짜증나는 상황을 겪은 적은 없었기도 하다. 깜빡이 위치든 뭐든 무엇보다 중요한 것은 안전운전 그리고 방어운전이다.&lt;/p&gt;
&lt;h2&gt;보닛&lt;/h2&gt;
&lt;p&gt;보닛(본네트)은 차를 인수하고 난 뒤 바로 궁금해서 열어본 적이 한 번 있었다. 보닛 자체는 꽤나 무거웠다. 고정시키려면 꼬챙이를 걸어야 해서 불편했고 꼬챙이가 구부려져 갑자기 보닛 뚜껑이 떨어질 것 같은 불안감이 느껴지기도 했다.&lt;/p&gt;
&lt;p&gt;그런데 보닛을 직접 열 일이 얼마나 될까 생각해 보니 이 정도 불편함은 그냥 잊혔다. 어차피 보닛을 자주 열 사람은 아무래도 정비사일 테니 말이다.&lt;/p&gt;
&lt;h2&gt;외장&lt;/h2&gt;
&lt;p&gt;외장 색상이 아마존 메탈릭 그레이인데 직사광선이 없는 곳에서는 어두운 회색에 까깝게 보이지만 빛에 따라서 녹색과 펄이 비쳐 보이는 독특한 색상이다.&lt;/p&gt;
&lt;p&gt;이런 다크 그레이 계열 색상은 특히 오염에 강하다고 느끼고 있다. 주변에 다니는 투싼을 통해 적어도 흰색에 비해 회색이 오염이 심하게 튀지 않고 검은색에 비해서도 더러워졌다는 느낌을 덜 받는 것 같다. 그래서 개인적으로는 차를 대충 몰려는 사람에게는 회색 계열 색상을 추천하고 싶다. 강력한 이미지의 그릴과 따로 노는 느낌의 흰색과 빨간색은 특히 안 어울리는 것 같기도 하고 말이다.&lt;/p&gt;
&lt;p&gt;그래서 아직도 세차장에 가보지 않았지만 차 상태는 깨끗하다고 느껴진다. 그저 먼지만 털고 물왁스로 정말 어쩌다 한번 닦았고 유리만 전용 세정제로 닦아주고 있다. 차가 너무 커서 세차할 엄두가 잘 안나기도 하고 말이다. 더 큰 차는 도대체 어떻게 닦아야 되나 모르겠다.&lt;/p&gt;
&lt;h2&gt;결론&lt;/h2&gt;
&lt;p&gt;더 뉴 투싼 하이브리드는 짐이 그렇게 많지는 않은 4인 가족이 타기에 무난하고 크기도 구축 아파트 주차장 라인에 꽉 차게 들어가는 아슬아슬한 크기에 연비도 좋고 성능도 무난한 한마디로 ‘적당한’ 패밀리 카다. 물론 혼자 타기에도, 배우자나 이성 친구와 타기에도 더없이 좋은 차 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/tucson-hev-nx4-facelift-review.html</guid>
      <pubDate>Mon, 15 Jul 2024 21:21:00 +0900</pubDate>
    </item>
    <item>
      <title>한 주간의 애플 소식들 24-07-14</title>
      <link>https://seorenn.github.io/log/20240714-00.html</link>
      <description>&lt;h2&gt;소프트웨어 릴리즈 소식들&lt;/h2&gt;
&lt;p&gt;차세대 애플 플랫폼 OS 들의 세 번째 개발자 베타가 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15 Sequoia beta 3: &lt;em&gt;macOS 15 beta 3는 명확한 이유는 알 수 없지만 홀로 수 일 늦게 공개되었다.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;iOS 18 beta 3: 써드파티 앱 아이콘의 다크모드 자동 적용, 동적 배경화면 색상 자동 변경 지원, RCS 지원 통신사 추가, Apple TV 앱에 InSight 기능 추가 등&lt;/li&gt;
&lt;li&gt;iPadOS 18 beta 3: Apple TV 앱에 InSight 기능 추가, Freeform Scenes 추가 등&lt;/li&gt;
&lt;li&gt;visionOS 2 beta 3&lt;/li&gt;
&lt;li&gt;watchOS 11 beta 3&lt;/li&gt;
&lt;li&gt;tvOS 18 beta 3: InSight 기능 추가 등&lt;/li&gt;
&lt;li&gt;Xcode 16 beta 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;언급된 항목을 제외하곤 이전 베타와 비교해서 어떤 차이가 있는 지는 알려지지 않았다. 아마도 기능은 확정되었을 것 같고 이제는 버그 수정 위주로 개발이 진행되지 않을까 추측된다. &lt;/p&gt;
&lt;p&gt;참고로 visionOS 2의 공개 베타는 나오지 않을 가능성도 있다고 한다.&lt;/p&gt;
&lt;p&gt;그 외에 현재 안정 버전의 마이너 업데이트들도 세 번째 개발자 베타가 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6 beta 3&lt;/li&gt;
&lt;li&gt;iOS 17.6 beta 3&lt;/li&gt;
&lt;li&gt;iPadOS 17.6 beta 3&lt;/li&gt;
&lt;li&gt;visionOS 1.3 beta 3&lt;/li&gt;
&lt;li&gt;watchOS 10.6 beta 3&lt;/li&gt;
&lt;li&gt;tvOS 17.6 beta 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 버전들도 명확한 업데이트 내역이 알려지지 않고 있다. 처음부터 예상되었던 '버그 패치 수준의 업데이트일 것'이라는 예측은 아직도 틀리지 않은 것 같다. 어쨌거나 이 버전들도 개발자 베타 공개 수 일 후 공공 베타가 공개되었다.&lt;/p&gt;
&lt;p&gt;그 외에도 아래의 릴리즈 소식이 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AirPods Pro 2 Firmware 7A5244b Beta &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;br/&gt;
애플지능이 결합된 새로운 시리는 내년 봄은 되어야 볼 수 있을 것 같다. 한편 애플은 OpenAI의 참관인(observer) 지위를 포기했다고 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;맥 점유율 부활&lt;/strong&gt;&lt;br/&gt;
맥 출하량이 전년비 6% 성장했다고 한다. 지난 실적에서 슬슬 PC 수요가 부활하는 듯한 모습이 보이더니 PC 부문엣서 가장 강한 성장세를 보이며 9%의 시장점유율을 달성했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPhone 관련 루머들&lt;/strong&gt;&lt;br/&gt;
iPhone 16에서 Face ID 시스템이 대대적으로 개편될 가능성이 제기되었다. 그 외에 충전 시스템도 개선되어서 40W 유선 충전, 20W 무선 충전이 지원될 가능성이 있다. 카메라 광학줌은 프로맥스 급에서도 여전히 5배 줌이 탑재될 것 같고 테트라프리즘 카메라는 아이폰 17 프로맥스에나 탑재될 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iOS 18&lt;/strong&gt;&lt;br/&gt;
iOS 18에는 집중이나 휴식 모드용 새로운 배경음이 추가되었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NFC 개방?!&lt;/strong&gt;&lt;br/&gt;
아이폰 교통카드 관련 이미지 정보가 유출되면서 아이폰의 한국 교통카드 지원이 머지 않았다는 루머가 돌았다. 유럽에서는 아이폰에 삼성페이가 들어오는 등 NFC 개방이 진행된다고 하며 동시에 EU의 애플페이 반독점 조사가 종결 되었다고 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;끝이 없는 반독점 규제&lt;/strong&gt;&lt;br/&gt;
유럽에서 거액의 벌금을 내야 할 처지에 몰린 애플이 이제는 인도에서도 비슷한 규제로 압력을 받을 가능성이 보인다. 유럽을 따라 이런 흐름을 보이는 국가들이 점점 많아질 것으로 보이는데 애플의 한 발 빠른 대처가 필요해 보인다.&lt;/p&gt;
&lt;h2&gt;기타 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;차세대 애플워치 SE는 가격을 낮추기 위해 플라스틱을 사용할 것이란 전만이 제기되었다.&lt;/li&gt;
&lt;li&gt;애플지능을 결합한 테이블탑 로봇에 대한 루머가 나오기 시작했다.&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;h2&gt;소프트웨어 릴리즈 소식들&lt;/h2&gt;
&lt;p&gt;차세대 애플 플랫폼 OS 들의 세 번째 개발자 베타가 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15 Sequoia beta 3: &lt;em&gt;macOS 15 beta 3는 명확한 이유는 알 수 없지만 홀로 수 일 늦게 공개되었다.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;iOS 18 beta 3: 써드파티 앱 아이콘의 다크모드 자동 적용, 동적 배경화면 색상 자동 변경 지원, RCS 지원 통신사 추가, Apple TV 앱에 InSight 기능 추가 등&lt;/li&gt;
&lt;li&gt;iPadOS 18 beta 3: Apple TV 앱에 InSight 기능 추가, Freeform Scenes 추가 등&lt;/li&gt;
&lt;li&gt;visionOS 2 beta 3&lt;/li&gt;
&lt;li&gt;watchOS 11 beta 3&lt;/li&gt;
&lt;li&gt;tvOS 18 beta 3: InSight 기능 추가 등&lt;/li&gt;
&lt;li&gt;Xcode 16 beta 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;언급된 항목을 제외하곤 이전 베타와 비교해서 어떤 차이가 있는 지는 알려지지 않았다. 아마도 기능은 확정되었을 것 같고 이제는 버그 수정 위주로 개발이 진행되지 않을까 추측된다. &lt;/p&gt;
&lt;p&gt;참고로 visionOS 2의 공개 베타는 나오지 않을 가능성도 있다고 한다.&lt;/p&gt;
&lt;p&gt;그 외에 현재 안정 버전의 마이너 업데이트들도 세 번째 개발자 베타가 공개되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6 beta 3&lt;/li&gt;
&lt;li&gt;iOS 17.6 beta 3&lt;/li&gt;
&lt;li&gt;iPadOS 17.6 beta 3&lt;/li&gt;
&lt;li&gt;visionOS 1.3 beta 3&lt;/li&gt;
&lt;li&gt;watchOS 10.6 beta 3&lt;/li&gt;
&lt;li&gt;tvOS 17.6 beta 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 버전들도 명확한 업데이트 내역이 알려지지 않고 있다. 처음부터 예상되었던 '버그 패치 수준의 업데이트일 것'이라는 예측은 아직도 틀리지 않은 것 같다. 어쨌거나 이 버전들도 개발자 베타 공개 수 일 후 공공 베타가 공개되었다.&lt;/p&gt;
&lt;p&gt;그 외에도 아래의 릴리즈 소식이 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AirPods Pro 2 Firmware 7A5244b Beta &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;br/&gt;
애플지능이 결합된 새로운 시리는 내년 봄은 되어야 볼 수 있을 것 같다. 한편 애플은 OpenAI의 참관인(observer) 지위를 포기했다고 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;맥 점유율 부활&lt;/strong&gt;&lt;br/&gt;
맥 출하량이 전년비 6% 성장했다고 한다. 지난 실적에서 슬슬 PC 수요가 부활하는 듯한 모습이 보이더니 PC 부문엣서 가장 강한 성장세를 보이며 9%의 시장점유율을 달성했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPhone 관련 루머들&lt;/strong&gt;&lt;br/&gt;
iPhone 16에서 Face ID 시스템이 대대적으로 개편될 가능성이 제기되었다. 그 외에 충전 시스템도 개선되어서 40W 유선 충전, 20W 무선 충전이 지원될 가능성이 있다. 카메라 광학줌은 프로맥스 급에서도 여전히 5배 줌이 탑재될 것 같고 테트라프리즘 카메라는 아이폰 17 프로맥스에나 탑재될 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iOS 18&lt;/strong&gt;&lt;br/&gt;
iOS 18에는 집중이나 휴식 모드용 새로운 배경음이 추가되었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NFC 개방?!&lt;/strong&gt;&lt;br/&gt;
아이폰 교통카드 관련 이미지 정보가 유출되면서 아이폰의 한국 교통카드 지원이 머지 않았다는 루머가 돌았다. 유럽에서는 아이폰에 삼성페이가 들어오는 등 NFC 개방이 진행된다고 하며 동시에 EU의 애플페이 반독점 조사가 종결 되었다고 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;끝이 없는 반독점 규제&lt;/strong&gt;&lt;br/&gt;
유럽에서 거액의 벌금을 내야 할 처지에 몰린 애플이 이제는 인도에서도 비슷한 규제로 압력을 받을 가능성이 보인다. 유럽을 따라 이런 흐름을 보이는 국가들이 점점 많아질 것으로 보이는데 애플의 한 발 빠른 대처가 필요해 보인다.&lt;/p&gt;
&lt;h2&gt;기타 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;차세대 애플워치 SE는 가격을 낮추기 위해 플라스틱을 사용할 것이란 전만이 제기되었다.&lt;/li&gt;
&lt;li&gt;애플지능을 결합한 테이블탑 로봇에 대한 루머가 나오기 시작했다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240714-00.html</guid>
      <pubDate>Sun, 14 Jul 2024 21:16:00 +0900</pubDate>
    </item>
    <item>
      <title>파이썬 예외 처리 정리</title>
      <link>https://seorenn.github.io/article/python-exceptions.html</link>
      <description>&lt;p&gt;이 글은 Python의 예외(Exceptions) 처리의 가장 기초적인 부분을 정리한다. 참고로 문법은 버전 3.x 이후이며 2.x 버전에서도 문법은 비슷하지만 약간 느슨(?)할 수도 있다.&lt;/p&gt;
&lt;h2&gt;예외 처리 기본 구조&lt;/h2&gt;
&lt;p&gt;파이썬의 예외 처리의 가장 기본 키워드는 &lt;code&gt;try&lt;/code&gt;와 &lt;code&gt;except&lt;/code&gt;다. 대충 아래와 같은 식으로 쓸 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except:
    print(&amp;quot;ERROR: 뭔가 에러가 났어요!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;try&lt;/code&gt; 블록 내부에서 예외가 발생할지도 모를 코드를 배치하면 여기 안에서 예와가 발생할 경우 그 아래의 &lt;code&gt;except&lt;/code&gt; 블록으로 플로우가 넘어가면서 예외를 처리할 수 있다. 여기서 오류를 처리하던지 프로그램을 종료시키던지 아니면 그저 로그만 남기고 넘어갈 수도 있다.&lt;/p&gt;
&lt;p&gt;가장 기본적인 구조는 위와 같지만 요즘은 이렇게 쓰면 아마 누군가(?) 경고를 날려 줄 것이다. 정확히 말하자면 파이썬 커뮤니티에서는 명확한 예외의 이름을 명시하는 것을 추천하고 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except ValueError:
    print(&amp;quot;Value Error!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 &lt;code&gt;do_what()&lt;/code&gt;에서 발생되는 예외 중 &lt;code&gt;ValueError&lt;/code&gt; 예외가 발생하면 &lt;code&gt;except&lt;/code&gt; 블록으로 진입되어 처리할 수 있으나 이 외의 예외는 &lt;code&gt;except&lt;/code&gt; 블록으로 진입되지 않는데 만약 더 상위에 따로 예외를 처리하는 코드가 없으면 프로그램 자체가 예외를 발생시키며 강제 종료된다.&lt;/p&gt;
&lt;p&gt;예외 이름을 명시하더라도 약간 부족할 수 있다. 좀 더 정확한 예외 원인을 알려주는 경우가 있으니 예외 인스턴스를 받아서 처리해보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except ValueError as e:
    print(f&amp;quot;Value Error: {e}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 경우 &lt;code&gt;ValueError&lt;/code&gt;라는 예외에서 넘겨주는 문자열이 있을 경우 화면에 표시가 된다. 다만 이 부분은 예외 클래스에 따라 좀 더 적합한 방식이 있을 수도 있다.&lt;/p&gt;
&lt;p&gt;만약 한 예외가 아니라 여러 예외를 처리하고 싶다면 아래와 같이 &lt;code&gt;except&lt;/code&gt;를 계속 나열할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except ValueError:
    print(&amp;quot;Value Error!&amp;quot;)
except AttributeError:
    print(&amp;quot;Attribute Error!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 여러 예외를 처리하되 각각의 예외의 상황에 맞게 처리가 가능하다.&lt;/p&gt;
&lt;p&gt;아니면 여러 예외를 하나의 동일한 코드로 처리하고 싶다면 아래와 같이 여러 예외를 하나의 &lt;code&gt;except&lt;/code&gt;로 처리할 수도 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except (ValueError, AttributeError):
    print(&amp;quot;Value or Attribute Error!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 경우 경우 &lt;code&gt;ValueError&lt;/code&gt; 혹은 &lt;code&gt;AttributeError&lt;/code&gt; 둘 중 하나의 예외가 발생하면 &lt;code&gt;except&lt;/code&gt; 안의 구문이 실행된다. 만약 이 경우에서도 상세한 메시지를 구하는 등 예외 인스턴스를 얻고 싶다면 아래와 같이 좀 더 코드를 추가할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except (ValueError, AttributeError) as e:
    print(f&amp;quot;Something Error: {e}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;예외 발생시키기&lt;/h2&gt;
&lt;p&gt;예외는 &lt;code&gt;raise&lt;/code&gt; 커맨드로 발생시킬 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;raise ValueError()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;예외 클래스는 보통은 첫 인자로 문자열 메시지를 넣을 수 있게 구성된 경우가 많다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;raise ValueError(&amp;quot;The value is invalid&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;사용자 정의 예외&lt;/h2&gt;
&lt;p&gt;개인이 만든 기능에는 당연히 개인이 정의한 오류가 발생할 수 있다. 따라서 당연하게도 예외 클래스 또한 원하는 대로 별도로 디자인할 수 있다.&lt;/p&gt;
&lt;p&gt;아래는 &lt;code&gt;TestException&lt;/code&gt; 이라는 예외를 만들고 이를 일부러 발생시키는 예제다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class TestException(Exception):
    pass

def test():
    raise TestException()

try:
    test()
except TestException as e:
    print(f'TestException: {e}')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TestException&lt;/code&gt; 클래스 정의에서 볼 수 있듯이 예외 클래스는 &lt;code&gt;Exception&lt;/code&gt;을 상속 받은 클래스라 보면 된다.&lt;/p&gt;
&lt;p&gt;이 예외 클래스에 메시지 기능을 간단히 추가하고자 한다면 문자열 변환 메소드를 추가해 주는 방법이 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class TestException(Exception):
    def __str__(self):
        return &amp;quot;TestException&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 좀 더 예외 다운 예외 클래스로 만들고 싶다면 별도의 메시지를 전달 받을 수 있는 편이 좋을 것 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class TestException(Exception):
    def __init__(self, message=&amp;quot;&amp;quot;):
        self.message = message
    def __str__(self):
        return f&amp;quot;TestException {self.message}&amp;quot;

def test():
    raise TestException(&amp;quot;Some Error&amp;quot;)

try:
    test()
except Exception as e:
    print(f'Exception: {e}')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아마 기본적인 예외 클래스의 골격은 이런 형태면 될 것 같다.&lt;/p&gt;
&lt;h2&gt;예외 발생 시 트레이스백을 그대로 출력하기&lt;/h2&gt;
&lt;p&gt;예외가 발생할 경우 상세한 트레이스백(traceback) - 혹은 스택트레이스(stack trace) - 메시지를 콘솔에 표시해서 에러에 대처하는게 디버깅에 매우 유용하다. 이런 경우 &lt;code&gt;traceback&lt;/code&gt; 모듈의 &lt;code&gt;print_exc()&lt;/code&gt;함수를 이용할 수 있다. 예를 들자면 이런 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;import traceback

try:
    do_what()
except Exception:
    traceback.print_exc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 구현하면 &lt;code&gt;try&lt;/code&gt; 블록 안에서 예외가 발생할 경우 상세한 트레이스백이 콘솔에 표시된다.&lt;/p&gt;
&lt;p&gt;만약 이 트레이스백 등을 포함한 전체 예외 메시지를 로그로 남기기 위해 문자열로 받고 싶다면 &lt;code&gt;format_exc()&lt;/code&gt; 함수를 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;import traceback

try:
    do_what()
except Exception:
    stacktrace = traceback.format_exc()
    log(stacktrace)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드에서 &lt;code&gt;log()&lt;/code&gt;라는 함수는 임의로 정의한 로그를 기록하는 함수다. 이런 식으로 상세한 예외 상황 메시지를 출력하거나 전달할 수 있다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;이 글은 Python의 예외(Exceptions) 처리의 가장 기초적인 부분을 정리한다. 참고로 문법은 버전 3.x 이후이며 2.x 버전에서도 문법은 비슷하지만 약간 느슨(?)할 수도 있다.&lt;/p&gt;
&lt;h2&gt;예외 처리 기본 구조&lt;/h2&gt;
&lt;p&gt;파이썬의 예외 처리의 가장 기본 키워드는 &lt;code&gt;try&lt;/code&gt;와 &lt;code&gt;except&lt;/code&gt;다. 대충 아래와 같은 식으로 쓸 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except:
    print(&amp;quot;ERROR: 뭔가 에러가 났어요!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;try&lt;/code&gt; 블록 내부에서 예외가 발생할지도 모를 코드를 배치하면 여기 안에서 예와가 발생할 경우 그 아래의 &lt;code&gt;except&lt;/code&gt; 블록으로 플로우가 넘어가면서 예외를 처리할 수 있다. 여기서 오류를 처리하던지 프로그램을 종료시키던지 아니면 그저 로그만 남기고 넘어갈 수도 있다.&lt;/p&gt;
&lt;p&gt;가장 기본적인 구조는 위와 같지만 요즘은 이렇게 쓰면 아마 누군가(?) 경고를 날려 줄 것이다. 정확히 말하자면 파이썬 커뮤니티에서는 명확한 예외의 이름을 명시하는 것을 추천하고 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except ValueError:
    print(&amp;quot;Value Error!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 &lt;code&gt;do_what()&lt;/code&gt;에서 발생되는 예외 중 &lt;code&gt;ValueError&lt;/code&gt; 예외가 발생하면 &lt;code&gt;except&lt;/code&gt; 블록으로 진입되어 처리할 수 있으나 이 외의 예외는 &lt;code&gt;except&lt;/code&gt; 블록으로 진입되지 않는데 만약 더 상위에 따로 예외를 처리하는 코드가 없으면 프로그램 자체가 예외를 발생시키며 강제 종료된다.&lt;/p&gt;
&lt;p&gt;예외 이름을 명시하더라도 약간 부족할 수 있다. 좀 더 정확한 예외 원인을 알려주는 경우가 있으니 예외 인스턴스를 받아서 처리해보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except ValueError as e:
    print(f&amp;quot;Value Error: {e}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 경우 &lt;code&gt;ValueError&lt;/code&gt;라는 예외에서 넘겨주는 문자열이 있을 경우 화면에 표시가 된다. 다만 이 부분은 예외 클래스에 따라 좀 더 적합한 방식이 있을 수도 있다.&lt;/p&gt;
&lt;p&gt;만약 한 예외가 아니라 여러 예외를 처리하고 싶다면 아래와 같이 &lt;code&gt;except&lt;/code&gt;를 계속 나열할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except ValueError:
    print(&amp;quot;Value Error!&amp;quot;)
except AttributeError:
    print(&amp;quot;Attribute Error!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 여러 예외를 처리하되 각각의 예외의 상황에 맞게 처리가 가능하다.&lt;/p&gt;
&lt;p&gt;아니면 여러 예외를 하나의 동일한 코드로 처리하고 싶다면 아래와 같이 여러 예외를 하나의 &lt;code&gt;except&lt;/code&gt;로 처리할 수도 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except (ValueError, AttributeError):
    print(&amp;quot;Value or Attribute Error!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 경우 경우 &lt;code&gt;ValueError&lt;/code&gt; 혹은 &lt;code&gt;AttributeError&lt;/code&gt; 둘 중 하나의 예외가 발생하면 &lt;code&gt;except&lt;/code&gt; 안의 구문이 실행된다. 만약 이 경우에서도 상세한 메시지를 구하는 등 예외 인스턴스를 얻고 싶다면 아래와 같이 좀 더 코드를 추가할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;try:
    do_what()
except (ValueError, AttributeError) as e:
    print(f&amp;quot;Something Error: {e}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;예외 발생시키기&lt;/h2&gt;
&lt;p&gt;예외는 &lt;code&gt;raise&lt;/code&gt; 커맨드로 발생시킬 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;raise ValueError()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;예외 클래스는 보통은 첫 인자로 문자열 메시지를 넣을 수 있게 구성된 경우가 많다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;raise ValueError(&amp;quot;The value is invalid&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;사용자 정의 예외&lt;/h2&gt;
&lt;p&gt;개인이 만든 기능에는 당연히 개인이 정의한 오류가 발생할 수 있다. 따라서 당연하게도 예외 클래스 또한 원하는 대로 별도로 디자인할 수 있다.&lt;/p&gt;
&lt;p&gt;아래는 &lt;code&gt;TestException&lt;/code&gt; 이라는 예외를 만들고 이를 일부러 발생시키는 예제다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class TestException(Exception):
    pass

def test():
    raise TestException()

try:
    test()
except TestException as e:
    print(f'TestException: {e}')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TestException&lt;/code&gt; 클래스 정의에서 볼 수 있듯이 예외 클래스는 &lt;code&gt;Exception&lt;/code&gt;을 상속 받은 클래스라 보면 된다.&lt;/p&gt;
&lt;p&gt;이 예외 클래스에 메시지 기능을 간단히 추가하고자 한다면 문자열 변환 메소드를 추가해 주는 방법이 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class TestException(Exception):
    def __str__(self):
        return &amp;quot;TestException&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 좀 더 예외 다운 예외 클래스로 만들고 싶다면 별도의 메시지를 전달 받을 수 있는 편이 좋을 것 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class TestException(Exception):
    def __init__(self, message=&amp;quot;&amp;quot;):
        self.message = message
    def __str__(self):
        return f&amp;quot;TestException {self.message}&amp;quot;

def test():
    raise TestException(&amp;quot;Some Error&amp;quot;)

try:
    test()
except Exception as e:
    print(f'Exception: {e}')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아마 기본적인 예외 클래스의 골격은 이런 형태면 될 것 같다.&lt;/p&gt;
&lt;h2&gt;예외 발생 시 트레이스백을 그대로 출력하기&lt;/h2&gt;
&lt;p&gt;예외가 발생할 경우 상세한 트레이스백(traceback) - 혹은 스택트레이스(stack trace) - 메시지를 콘솔에 표시해서 에러에 대처하는게 디버깅에 매우 유용하다. 이런 경우 &lt;code&gt;traceback&lt;/code&gt; 모듈의 &lt;code&gt;print_exc()&lt;/code&gt;함수를 이용할 수 있다. 예를 들자면 이런 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;import traceback

try:
    do_what()
except Exception:
    traceback.print_exc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 구현하면 &lt;code&gt;try&lt;/code&gt; 블록 안에서 예외가 발생할 경우 상세한 트레이스백이 콘솔에 표시된다.&lt;/p&gt;
&lt;p&gt;만약 이 트레이스백 등을 포함한 전체 예외 메시지를 로그로 남기기 위해 문자열로 받고 싶다면 &lt;code&gt;format_exc()&lt;/code&gt; 함수를 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;import traceback

try:
    do_what()
except Exception:
    stacktrace = traceback.format_exc()
    log(stacktrace)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드에서 &lt;code&gt;log()&lt;/code&gt;라는 함수는 임의로 정의한 로그를 기록하는 함수다. 이런 식으로 상세한 예외 상황 메시지를 출력하거나 전달할 수 있다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/python-exceptions.html</guid>
      <pubDate>Sat, 13 Jul 2024 17:47:00 +0900</pubDate>
    </item>
    <item>
      <title>미국 6월 PPI가 망한 것 같은데 미장은 왜 저럴까?</title>
      <link>https://seorenn.github.io/log/20240712-01.html</link>
      <description>&lt;p&gt;오늘은 미국 6월 PPI가 발표되었다. 제목에도 적었지만 예상보다는 좀 높게 나왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 헤드라인 PPI MoM 0.2% (+0.2%), YoY 2.6% (+0.2%)&lt;/li&gt;
&lt;li&gt;미국 5월 근원 PPI MoM 0.4% (+0.1%), YoY 3.0% (+0.4%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;헤드라인과 근원 지표 모두 지난 달보다 오른 데다 예상치 보다도 다 높게 나와버렸다. 이러면 조만간의 CPI에 안 좋은 영향을 끼칠 가능성이 있다.&lt;/p&gt;
&lt;p&gt;그런데 주식시장은 왜인지 신경 안 쓰는 분위기다. 오랜만에 3대 지수가 모두 오름세를 보이며 랠리를 다시 시작하는 듯한 느낌까지 받았다.&lt;/p&gt;
&lt;p&gt;왜 이러는 걸까? 도무지 이해가 안 된다.&lt;/p&gt;
&lt;p&gt;물론 PPI 자체는 연준이 신경 쓰지는 않는 것 같기에 무시해도 될 짇도 모른다. 하지만 소외되긴 했어도 CPI의 선행지표이기도 한데 이렇게 넘어가도 되는 걸까?&lt;/p&gt;
&lt;p&gt;물론 이번주 주식시장이 끝나기까지 아직 시간이 많이 남았기에 어떻게 될 지는 모르는 일이긴 하다. 거기다 FedWatch를 보니 9월 인하 확률이 지난 파월 청문회 때 보다 더 높아졌다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;내가 보지 못한 무엇인가가 있는 것일까?&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded>&lt;p&gt;오늘은 미국 6월 PPI가 발표되었다. 제목에도 적었지만 예상보다는 좀 높게 나왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 헤드라인 PPI MoM 0.2% (+0.2%), YoY 2.6% (+0.2%)&lt;/li&gt;
&lt;li&gt;미국 5월 근원 PPI MoM 0.4% (+0.1%), YoY 3.0% (+0.4%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;헤드라인과 근원 지표 모두 지난 달보다 오른 데다 예상치 보다도 다 높게 나와버렸다. 이러면 조만간의 CPI에 안 좋은 영향을 끼칠 가능성이 있다.&lt;/p&gt;
&lt;p&gt;그런데 주식시장은 왜인지 신경 안 쓰는 분위기다. 오랜만에 3대 지수가 모두 오름세를 보이며 랠리를 다시 시작하는 듯한 느낌까지 받았다.&lt;/p&gt;
&lt;p&gt;왜 이러는 걸까? 도무지 이해가 안 된다.&lt;/p&gt;
&lt;p&gt;물론 PPI 자체는 연준이 신경 쓰지는 않는 것 같기에 무시해도 될 짇도 모른다. 하지만 소외되긴 했어도 CPI의 선행지표이기도 한데 이렇게 넘어가도 되는 걸까?&lt;/p&gt;
&lt;p&gt;물론 이번주 주식시장이 끝나기까지 아직 시간이 많이 남았기에 어떻게 될 지는 모르는 일이긴 하다. 거기다 FedWatch를 보니 9월 인하 확률이 지난 파월 청문회 때 보다 더 높아졌다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;내가 보지 못한 무엇인가가 있는 것일까?&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240712-01.html</guid>
      <pubDate>Fri, 12 Jul 2024 23:28:00 +0900</pubDate>
    </item>
    <item>
      <title>어쩌면 끔찍한 이야기</title>
      <link>https://seorenn.github.io/log/20240712-00.html</link>
      <description>&lt;p&gt;아이가 어린이집에 가야 할 시간에 있었던 작고 사소하지만 끔찍한 이야기다.&lt;/p&gt;
&lt;p&gt;아이는 준비를 다 마쳤는데 오늘도 뭔가를 먹으면서 가고 싶다고 한다. 밖에서 뭔가 먹는 걸 굉장히 즐기는 시기 같다. 어쨌든 늘 그랬다시피 작은 비닐 지퍼백을 하나 꺼내서 여기다 늘 먹던 젤리를 3개만 담게 했다.&lt;/p&gt;
&lt;p&gt;여기까진 평화로웠는데, 갑자기 아이가 어린이집까지 차를 태워 달라고 떼를 쓴다. 지구영웅은 가까운 거리를 걸어간다고 설득해도 통하지 않았다.&lt;/p&gt;
&lt;p&gt;어쩔 수 없이 걸어가도 15분도 안 걸리는 거리를 차를 끌고 가게 되었다. &lt;/p&gt;
&lt;p&gt;주차장에 도착해서 아이를 카시트에 앉혔다. 예전에 그렇게 차에 타기 싫어하던 아이의 모습은 어디 간 것일까. 그래도 이 모습은 다행이라면 다행이다.&lt;/p&gt;
&lt;p&gt;어쨌든 운전석에 앉았다. 그리고 시동을 걸고 출발했다. 이대로 조심히 운전해서 느긋하게 갔다 오면 될 터였다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"흘렸어!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;출발한지 얼마 안 되어 뒷좌석에서 갑자기 울린 외침이었다. 아이가 지퍼백에 담아 둔 젤리를 꺼내다 흘린 모양이다.&lt;/p&gt;
&lt;p&gt;'주우면 되겠지'라는 단순한 생각이 들고 이후 몇 개를 흘렸는지 물어봤다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"두 개!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;p&gt;'어쨌든 주우면 되겠지. 흘렸다고 안 우는 것만 해도 어디일까.'&lt;/p&gt;
&lt;p&gt;가까운 거리라 금새 어린이집에 도착했다. 대충 차를 대놓고 아이를 어린이집에 데려갔다. 원하는 바를 이룬 아이는 순순히 선생님 손을 잡고 어린이집으로 들어갔다.&lt;/p&gt;
&lt;p&gt;찰나의 평화를 즐긴 후 다시 차에 돌아와 뒷좌석 카시트 주변을 살펴봤다. 2개나 흘렸다던 젤리를 찾기 위해서다. &lt;/p&gt;
&lt;p&gt;그리고 한참을 뒤적거리다 결국 하나를 찾았다.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;문제가 있다면 나머지 하나를 아직도 찾지 못 했다는 점이다.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;뜨거운 여름, 지하 주차장 따위 없는 오래된 아파트 지상 주차장에 차를 대놓고 있어야 하는 상황에 젤리가 차 안 어딘가에 떨어져 있다. 이 정도 더위면 차 안은 엄청 뜨거워지고 젤리는 녹아 내릴 것이다. 녹아내려서 시트에 끈적하게 달라붙어 나중에 청소도 쉽지 않게 하고 냄새도 나게 하고 벌레도 꼬이게 할 지도 모를 젤리가 어딘가에 숨어있다.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;'끔찍하다.'&lt;/p&gt;
&lt;p&gt;'살려줘.'&lt;/p&gt;
&lt;p&gt;'으앙.'&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;아이가 어린이집에 가야 할 시간에 있었던 작고 사소하지만 끔찍한 이야기다.&lt;/p&gt;
&lt;p&gt;아이는 준비를 다 마쳤는데 오늘도 뭔가를 먹으면서 가고 싶다고 한다. 밖에서 뭔가 먹는 걸 굉장히 즐기는 시기 같다. 어쨌든 늘 그랬다시피 작은 비닐 지퍼백을 하나 꺼내서 여기다 늘 먹던 젤리를 3개만 담게 했다.&lt;/p&gt;
&lt;p&gt;여기까진 평화로웠는데, 갑자기 아이가 어린이집까지 차를 태워 달라고 떼를 쓴다. 지구영웅은 가까운 거리를 걸어간다고 설득해도 통하지 않았다.&lt;/p&gt;
&lt;p&gt;어쩔 수 없이 걸어가도 15분도 안 걸리는 거리를 차를 끌고 가게 되었다. &lt;/p&gt;
&lt;p&gt;주차장에 도착해서 아이를 카시트에 앉혔다. 예전에 그렇게 차에 타기 싫어하던 아이의 모습은 어디 간 것일까. 그래도 이 모습은 다행이라면 다행이다.&lt;/p&gt;
&lt;p&gt;어쨌든 운전석에 앉았다. 그리고 시동을 걸고 출발했다. 이대로 조심히 운전해서 느긋하게 갔다 오면 될 터였다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"흘렸어!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;출발한지 얼마 안 되어 뒷좌석에서 갑자기 울린 외침이었다. 아이가 지퍼백에 담아 둔 젤리를 꺼내다 흘린 모양이다.&lt;/p&gt;
&lt;p&gt;'주우면 되겠지'라는 단순한 생각이 들고 이후 몇 개를 흘렸는지 물어봤다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"두 개!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;p&gt;'어쨌든 주우면 되겠지. 흘렸다고 안 우는 것만 해도 어디일까.'&lt;/p&gt;
&lt;p&gt;가까운 거리라 금새 어린이집에 도착했다. 대충 차를 대놓고 아이를 어린이집에 데려갔다. 원하는 바를 이룬 아이는 순순히 선생님 손을 잡고 어린이집으로 들어갔다.&lt;/p&gt;
&lt;p&gt;찰나의 평화를 즐긴 후 다시 차에 돌아와 뒷좌석 카시트 주변을 살펴봤다. 2개나 흘렸다던 젤리를 찾기 위해서다. &lt;/p&gt;
&lt;p&gt;그리고 한참을 뒤적거리다 결국 하나를 찾았다.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;문제가 있다면 나머지 하나를 아직도 찾지 못 했다는 점이다.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;뜨거운 여름, 지하 주차장 따위 없는 오래된 아파트 지상 주차장에 차를 대놓고 있어야 하는 상황에 젤리가 차 안 어딘가에 떨어져 있다. 이 정도 더위면 차 안은 엄청 뜨거워지고 젤리는 녹아 내릴 것이다. 녹아내려서 시트에 끈적하게 달라붙어 나중에 청소도 쉽지 않게 하고 냄새도 나게 하고 벌레도 꼬이게 할 지도 모를 젤리가 어딘가에 숨어있다.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;'끔찍하다.'&lt;/p&gt;
&lt;p&gt;'살려줘.'&lt;/p&gt;
&lt;p&gt;'으앙.'&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240712-00.html</guid>
      <pubDate>Fri, 12 Jul 2024 10:12:00 +0900</pubDate>
    </item>
    <item>
      <title>CPI가 잘 나왔지만 뭐 어쩌라는 걸까</title>
      <link>https://seorenn.github.io/log/20240711-02.html</link>
      <description>&lt;p&gt;미국의 6월 CPI가 발표되었다. 정리하자면 아주 잘 나왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 헤드라인 CPI MoM -0.1% (-0.1%), YoY 3.0% (-0.3%)&lt;/li&gt;
&lt;li&gt;미국 6월 근원 CPI MoM 0.1% (-0.1%), YoY 3.3% (-0.1%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;무려 전월비 헤드라인 CPI가 역성장했다. 물가가 오히려 떨어졌다는 말인데 상당히 이례적인 일이다. 아마도 끈질겼던 주거비 둔화가 나타나고 있는 모양이다.&lt;/p&gt;
&lt;p&gt;그 외에 특징이 있다면 모든 지표가 예상치를 하회했다는 점 같다.&lt;/p&gt;
&lt;p&gt;같이 발표된 실업수당청구건수는 예상보다 낮게 나오면서 죽지 않는 노동시장에 대한 노이로제가 또 발동되는 거 아닌가 약간은 걱정스럽기도 하다.&lt;/p&gt;
&lt;p&gt;그렇다면 실제 시장의 반응은 어떨까. &lt;/p&gt;
&lt;p&gt;최근 많이 올라서인지 아니면 실업수당 때문인지 나스닥과 S&amp;amp;P500은 떨어지고 있는 것 같다. 이는 국장에 긍정적인 요소는 아닐 것 같다.&lt;/p&gt;
&lt;p&gt;반대로 다우지수 쪽은 최근 하락세가 길었던 만큼 반대로 오르는 것처럼 보이기도 하지만 국장에 큰 의미는 없을 것 같다. &lt;/p&gt;
&lt;p&gt;그런데 금리에 민감한 러셀2000이 제법 오르고 있다. 그리고 코스피는 이 녀석과 비슷하게 움직일 때가 많다. 이대로 마감 된다면 내일 국장은 나쁘진 않을 지도 모른다. &lt;/p&gt;
&lt;p&gt;그런데 필라델피아 반도체 지수는 또 떨어지고 있다. 이러면 삼성전자와 하이닉스 등 반도체 주가가 안 좋고 결국 내일 국장은 또한 안 좋을 수 있다. &lt;/p&gt;
&lt;p&gt;파월 청문회를 좋게 해석하는 건지 미 국채들도 잘 팔리면서 금리가 제법 떨어지고 있다. 덕분에 달러지수도 떨어지고 그래서 원달러 환율도 내려가는 긍정적인 효과가 보이고 있다. 그리고 이러면 내일 국장은 좋은 분위기가 나올 수도 있다.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;아 도대체 뭐 어쩌라는 걸까. 세상 참 편하게 살기 어렵다. 뭐 하나 공식에 딱 맞게 떨어지는 모두가 돈을 버는 공평한 세상... 따위 없는 게 당연하겠지. &lt;/p&gt;
&lt;p&gt;매크로는 역시나 큰 추세만 보는 게 맞을 것 같다. 내일 국장이 어떻게 될지 아니 당장 미장은 어떻게 될지 생각해서 뭐 할까. 예측 보다는 역시 모든 상황 대비에 신경 쓰는 게 맞을 것 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;미국의 6월 CPI가 발표되었다. 정리하자면 아주 잘 나왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 헤드라인 CPI MoM -0.1% (-0.1%), YoY 3.0% (-0.3%)&lt;/li&gt;
&lt;li&gt;미국 6월 근원 CPI MoM 0.1% (-0.1%), YoY 3.3% (-0.1%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;무려 전월비 헤드라인 CPI가 역성장했다. 물가가 오히려 떨어졌다는 말인데 상당히 이례적인 일이다. 아마도 끈질겼던 주거비 둔화가 나타나고 있는 모양이다.&lt;/p&gt;
&lt;p&gt;그 외에 특징이 있다면 모든 지표가 예상치를 하회했다는 점 같다.&lt;/p&gt;
&lt;p&gt;같이 발표된 실업수당청구건수는 예상보다 낮게 나오면서 죽지 않는 노동시장에 대한 노이로제가 또 발동되는 거 아닌가 약간은 걱정스럽기도 하다.&lt;/p&gt;
&lt;p&gt;그렇다면 실제 시장의 반응은 어떨까. &lt;/p&gt;
&lt;p&gt;최근 많이 올라서인지 아니면 실업수당 때문인지 나스닥과 S&amp;amp;P500은 떨어지고 있는 것 같다. 이는 국장에 긍정적인 요소는 아닐 것 같다.&lt;/p&gt;
&lt;p&gt;반대로 다우지수 쪽은 최근 하락세가 길었던 만큼 반대로 오르는 것처럼 보이기도 하지만 국장에 큰 의미는 없을 것 같다. &lt;/p&gt;
&lt;p&gt;그런데 금리에 민감한 러셀2000이 제법 오르고 있다. 그리고 코스피는 이 녀석과 비슷하게 움직일 때가 많다. 이대로 마감 된다면 내일 국장은 나쁘진 않을 지도 모른다. &lt;/p&gt;
&lt;p&gt;그런데 필라델피아 반도체 지수는 또 떨어지고 있다. 이러면 삼성전자와 하이닉스 등 반도체 주가가 안 좋고 결국 내일 국장은 또한 안 좋을 수 있다. &lt;/p&gt;
&lt;p&gt;파월 청문회를 좋게 해석하는 건지 미 국채들도 잘 팔리면서 금리가 제법 떨어지고 있다. 덕분에 달러지수도 떨어지고 그래서 원달러 환율도 내려가는 긍정적인 효과가 보이고 있다. 그리고 이러면 내일 국장은 좋은 분위기가 나올 수도 있다.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;아 도대체 뭐 어쩌라는 걸까. 세상 참 편하게 살기 어렵다. 뭐 하나 공식에 딱 맞게 떨어지는 모두가 돈을 버는 공평한 세상... 따위 없는 게 당연하겠지. &lt;/p&gt;
&lt;p&gt;매크로는 역시나 큰 추세만 보는 게 맞을 것 같다. 내일 국장이 어떻게 될지 아니 당장 미장은 어떻게 될지 생각해서 뭐 할까. 예측 보다는 역시 모든 상황 대비에 신경 쓰는 게 맞을 것 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240711-02.html</guid>
      <pubDate>Thu, 11 Jul 2024 23:44:00 +0900</pubDate>
    </item>
    <item>
      <title>중요하지만 왠지 소외된 한국 기준금리 동결 소식</title>
      <link>https://seorenn.github.io/log/20240711-01.html</link>
      <description>&lt;p&gt;한국은행 금통위는 상당히 중요한 이벤트임에도 &lt;a href="../log/20240711-00.html"&gt;파월 청문회&lt;/a&gt; 소식에 개인적으로 뇌리에서 잊혀져 버렸다. 어쨌든 간에 오늘 금통위가 있었고 결과야 다들 예상하던 그거가 나왔다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;한국은행은 금융통화위원회를 통해 기준금리를 3.5%로 만장일치로 동결 결정하였다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;동결 결정 자체가 어떻든 이제는 인하 의견이 얼마나 나오는 지가 핵심이 된 듯하다. 마침 물가도 잡히고 것처럼 보이기도 하니 인하 의견이 더 나올 시점인 것 같기도 하다.&lt;/p&gt;
&lt;p&gt;정리하자면 금통위원 6인 중 4인은 향후 3개월 간 동결, 2인은 3개월 내 인하 의견을 냈다고 한다. 인하 의견이 좀 더 늘었다는 점에서 이제 다음 혹은 다다음 회의 부터는 인하 확률이 높아질 수도 있다는 말일 거다.&lt;/p&gt;
&lt;p&gt;하지만 이창용 총재도 인터뷰를 통해 밝혔다시피 인하가 실제로 언제 이뤄질지는 알 수가 없을 것 같다. 적어도 미국이 먼저 인하해야 그나마 인하 여력이 생길 테니 베팅은 그 이후로 하는 게 당연해 보인다.&lt;/p&gt;
&lt;p&gt;거기다 최근 가계부채가 다시 오르는 조짐을 보이는 것에도 한은은 어떻게든 대처를 해야 할 테고 말이다.&lt;/p&gt;
&lt;p&gt;그럼 9월은 미국 인하, 10월은 한국 인하 이렇게 봐도 될까? 베팅할 수 있다면 작게 해보고 싶기는 하지만 요즘 생활이 쪼들리니 참아야 할 것 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;한국은행 금통위는 상당히 중요한 이벤트임에도 &lt;a href="../log/20240711-00.html"&gt;파월 청문회&lt;/a&gt; 소식에 개인적으로 뇌리에서 잊혀져 버렸다. 어쨌든 간에 오늘 금통위가 있었고 결과야 다들 예상하던 그거가 나왔다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;한국은행은 금융통화위원회를 통해 기준금리를 3.5%로 만장일치로 동결 결정하였다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;동결 결정 자체가 어떻든 이제는 인하 의견이 얼마나 나오는 지가 핵심이 된 듯하다. 마침 물가도 잡히고 것처럼 보이기도 하니 인하 의견이 더 나올 시점인 것 같기도 하다.&lt;/p&gt;
&lt;p&gt;정리하자면 금통위원 6인 중 4인은 향후 3개월 간 동결, 2인은 3개월 내 인하 의견을 냈다고 한다. 인하 의견이 좀 더 늘었다는 점에서 이제 다음 혹은 다다음 회의 부터는 인하 확률이 높아질 수도 있다는 말일 거다.&lt;/p&gt;
&lt;p&gt;하지만 이창용 총재도 인터뷰를 통해 밝혔다시피 인하가 실제로 언제 이뤄질지는 알 수가 없을 것 같다. 적어도 미국이 먼저 인하해야 그나마 인하 여력이 생길 테니 베팅은 그 이후로 하는 게 당연해 보인다.&lt;/p&gt;
&lt;p&gt;거기다 최근 가계부채가 다시 오르는 조짐을 보이는 것에도 한은은 어떻게든 대처를 해야 할 테고 말이다.&lt;/p&gt;
&lt;p&gt;그럼 9월은 미국 인하, 10월은 한국 인하 이렇게 봐도 될까? 베팅할 수 있다면 작게 해보고 싶기는 하지만 요즘 생활이 쪼들리니 참아야 할 것 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240711-01.html</guid>
      <pubDate>Thu, 11 Jul 2024 15:18:00 +0900</pubDate>
    </item>
    <item>
      <title>이번 청문회 파월의 발언은 어땠나</title>
      <link>https://seorenn.github.io/log/20240711-00.html</link>
      <description>&lt;p&gt;연 이틀간 미 국회에서 열린 금융 관련 청문회가 화제를 모았다. 당연하게도 전 세계 경제에 막대한 영향을 끼치는 연준의 수장이 출석하기 때문이었다. 이미 잘 알려졌지만 그의 발언이 어땠는지 대충 정리해 보려고 한다.&lt;/p&gt;
&lt;h2&gt;첫째날 상원 청문회&lt;/h2&gt;
&lt;p&gt;정치의 장이기도 한 국회인 만큼 다분히 정치적인 공격이 많은 곳이었지만 파월은 이곳에서 정치적으로 중립적이며 연준 의장으로써도 모호한 자세를 취했다. 아마도 "나는 어쨌든 중립이어야 한다"라고 주장하는 듯했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여기저기 잘 피해다니는 '비둘기 도법 Lv Max'을 구사하시는 파월 형님이셨다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;대충 정리하자면 아래의 발언들이 있었다. 직역도 의역도 아니라 개인적으로 알아듣기 좋게 완전히 바꾼 문장도 있음에 주의하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최근 지표는 긍정적이나 데이터를 더 봐야 한다.&lt;/li&gt;
&lt;li&gt;지속되는 고금리는 경제에 위해를 가할 것이다.&lt;/li&gt;
&lt;li&gt;노동시장은 인플레이션의 위협적이지 않을 만큼 둔화되고 있다. 최근 실업률은 아직 양호한 수준이지만 더 올라가는 건 걱정스러운 일이.&lt;/li&gt;
&lt;li&gt;금리 인하 시기는 특정할 수 없지만 매 회의 때마다 결정될 수도 있다.&lt;/li&gt;
&lt;li&gt;향후 정책 방향에 대해 신호를 주지 않을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;둘째날 하원 청문회&lt;/h2&gt;
&lt;p&gt;다음 날은 하원 청문회였다. 여기서도 당연하겠지만 파월은 전날과 같은 자세를 굳히고 있었다. 유독 눈에 띄는 발언은 아래 하나로 정리할 수 있을 것 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인플레이션 목표치 2% 달성까지 기다리지 않을 것 (?!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;뭔가 좀 더 비둘기 적인 느낌이 된 것 같은데 어쩌면 이틀 째 이어지는 공격에 좀 시달린 것 같기도 하다. 안 그래도 최근 대선 때문에 스트레스를 많이 받고 있을 것 같은데 말이다.&lt;/p&gt;
&lt;h2&gt;정리&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;결론: '9월 인하' 카드가 테이블에 올라왔다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;그리고&lt;/h2&gt;
&lt;p&gt;적을 게 없으니 그냥 시장 반응이나 또 붙여봐야겠다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="FedWatch" src="../upload/202407111341-ecb781c0.png" /&gt;
&lt;em&gt;FedWatch&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;마지막으로 올렸던 베팅표에서 9월 인하 확률이 많이 올라가긴 했다. 다만 최근의 피크에서는 좀 낮아졌다는 소리를 들었는데 뭐 그래도 거기서 거기 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;연 이틀간 미 국회에서 열린 금융 관련 청문회가 화제를 모았다. 당연하게도 전 세계 경제에 막대한 영향을 끼치는 연준의 수장이 출석하기 때문이었다. 이미 잘 알려졌지만 그의 발언이 어땠는지 대충 정리해 보려고 한다.&lt;/p&gt;
&lt;h2&gt;첫째날 상원 청문회&lt;/h2&gt;
&lt;p&gt;정치의 장이기도 한 국회인 만큼 다분히 정치적인 공격이 많은 곳이었지만 파월은 이곳에서 정치적으로 중립적이며 연준 의장으로써도 모호한 자세를 취했다. 아마도 "나는 어쨌든 중립이어야 한다"라고 주장하는 듯했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여기저기 잘 피해다니는 '비둘기 도법 Lv Max'을 구사하시는 파월 형님이셨다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;대충 정리하자면 아래의 발언들이 있었다. 직역도 의역도 아니라 개인적으로 알아듣기 좋게 완전히 바꾼 문장도 있음에 주의하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최근 지표는 긍정적이나 데이터를 더 봐야 한다.&lt;/li&gt;
&lt;li&gt;지속되는 고금리는 경제에 위해를 가할 것이다.&lt;/li&gt;
&lt;li&gt;노동시장은 인플레이션의 위협적이지 않을 만큼 둔화되고 있다. 최근 실업률은 아직 양호한 수준이지만 더 올라가는 건 걱정스러운 일이.&lt;/li&gt;
&lt;li&gt;금리 인하 시기는 특정할 수 없지만 매 회의 때마다 결정될 수도 있다.&lt;/li&gt;
&lt;li&gt;향후 정책 방향에 대해 신호를 주지 않을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;둘째날 하원 청문회&lt;/h2&gt;
&lt;p&gt;다음 날은 하원 청문회였다. 여기서도 당연하겠지만 파월은 전날과 같은 자세를 굳히고 있었다. 유독 눈에 띄는 발언은 아래 하나로 정리할 수 있을 것 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인플레이션 목표치 2% 달성까지 기다리지 않을 것 (?!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;뭔가 좀 더 비둘기 적인 느낌이 된 것 같은데 어쩌면 이틀 째 이어지는 공격에 좀 시달린 것 같기도 하다. 안 그래도 최근 대선 때문에 스트레스를 많이 받고 있을 것 같은데 말이다.&lt;/p&gt;
&lt;h2&gt;정리&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;결론: '9월 인하' 카드가 테이블에 올라왔다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;그리고&lt;/h2&gt;
&lt;p&gt;적을 게 없으니 그냥 시장 반응이나 또 붙여봐야겠다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="FedWatch" src="../upload/202407111341-ecb781c0.png" /&gt;
&lt;em&gt;FedWatch&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;마지막으로 올렸던 베팅표에서 9월 인하 확률이 많이 올라가긴 했다. 다만 최근의 피크에서는 좀 낮아졌다는 소리를 들었는데 뭐 그래도 거기서 거기 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240711-00.html</guid>
      <pubDate>Thu, 11 Jul 2024 13:43:00 +0900</pubDate>
    </item>
    <item>
      <title>Poetry 소개 및 간단한 사용법 정리</title>
      <link>https://seorenn.github.io/article/python-poetry.html</link>
      <description>&lt;p&gt;Poetry는 Python용 패키징 겸 의존성 관리를 도와주는 도구로 pip나 virtualenv를 좀 더 포괄적으로 그리고 현대적으로 사용할 수 있게 도와준다. 이 Poetry의 사용법을 간단히 알아보자.&lt;/p&gt;
&lt;h2&gt;프로젝트 시작하기&lt;/h2&gt;
&lt;p&gt;Poetry는 당연하겠지만 프로젝트 단위로 사용할 수 있다. 그래서 사용하기 위해선 아래와 같이 &lt;code&gt;new&lt;/code&gt; 커맨드로 프로젝트를 생성해야 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry new PROJECT_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 몇몇 확인 단계를 거쳐 새로운 파이썬 프로젝트를 생성할 수 있다.&lt;/p&gt;
&lt;p&gt;만약 이미 존재하는 프로젝트에 Poetry 환경만 구성하고 싶다면 아래와 같이 &lt;code&gt;init&lt;/code&gt; 커맨드를 사용해 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 두 커맨드 모두 핵심으로 프로젝트 루트에 &lt;code&gt;pyproject.toml&lt;/code&gt;이라는 파일을 생성한다. 이름대로 프로젝트 정의 및 의존성 목록을 담은 중요한 파일이다.&lt;/p&gt;
&lt;h2&gt;의존성 관리하기&lt;/h2&gt;
&lt;p&gt;프로젝트에 의존성을 추가하려면 아래와 같이 &lt;code&gt;add&lt;/code&gt; 커맨드를 사용하면 된다. 여기에 특정 버전을 명시할 수도 있고, 개발 모드 전용 의존성일 경우 &lt;code&gt;--dev&lt;/code&gt; 플래그도 추가해 줄 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry add PACKAGE_NAME
poetry add ANOTHER_PACKAGE_NAME==x.y.z
poetry add --dev PACKAGE_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 명령들은 프로젝트의 virtualenv 환경에 자동으로 설치까지 진행된다.&lt;/p&gt;
&lt;p&gt;의존성 패키지를 삭제하려면 &lt;code&gt;remove&lt;/code&gt; 커맨드를 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;poetry remove PACKAGE_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 외에 사용하는 의존성 패키지들의 버전을 일괄적으로 업데이트 하려면 &lt;code&gt;update&lt;/code&gt; 커맨드를 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 &lt;code&gt;pyproject.toml&lt;/code&gt; 스펙에 적힌 한도 내에서 최신 버전으로 업데이트 된다.&lt;/p&gt;
&lt;h2&gt;수작업으로 의존성 관리하기&lt;/h2&gt;
&lt;p&gt;CLI 커맨드 보다 수작업을 좋아한다면 &lt;code&gt;pyproject.toml&lt;/code&gt; 파일을 열어서 직접 명시해 주는 방법도 있다. 예를 들자면 이런 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;[tool.poetry.dependencies]
python = &amp;quot;^3.8&amp;quot;
somepackage = &amp;quot;^3.10.0&amp;quot;

[tool.poetry.dev-dependencies]
pytest = &amp;quot;^5.2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;버전 앞에 붙인 꺽쇠(&lt;code&gt;^&lt;/code&gt;)의 의미는 '메이저 업데이트를 제외한 최신 버전' 이라는 의미이다. 즉 &lt;code&gt;^3.10.0&lt;/code&gt;이라는 의미는 &lt;code&gt;3.x.y&lt;/code&gt; 버전 중 가장 최신 버전을 사용한다는 의미다.&lt;/p&gt;
&lt;p&gt;이렇게 작성한 후 &lt;code&gt;install&lt;/code&gt; 커맨드를 사용하면 프로젝트의 virtualenv 환경에 일괄 패키지 설치가 가능하다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;poetry install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 커맨드를 보고 &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;라는 커맨드가 떠오른다면 정답이다. 즉 이 커맨드를 &lt;code&gt;poetry install&lt;/code&gt; 커맨드로 완전히 대체할 수 있다.&lt;/p&gt;
&lt;h2&gt;프로젝트 실행하기&lt;/h2&gt;
&lt;p&gt;프로젝트를 실행시키기 위해서는 &lt;code&gt;run&lt;/code&gt; 커맨드를 사용하면 된다. 예를 들어 실행시킬 엔트리포인트 파일이 &lt;code&gt;main.py&lt;/code&gt;라면 아래와 같은 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry run python main.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 경우 해당 프로젝트의 virtualenv 환경에서 &lt;code&gt;run&lt;/code&gt; 뒤의 커맨드가 실행되는 식이다.&lt;/p&gt;
&lt;h2&gt;virtualenv 셸 얻기&lt;/h2&gt;
&lt;p&gt;프로젝트의 virtualenv 환경에서 여러 가지를 시험해 보기 위해 셸을 얻고 싶다면 단순하게 &lt;code&gt;shell&lt;/code&gt; 커맨드를 사용하면 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry shell
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Docker와 Poetry&lt;/h2&gt;
&lt;p&gt;Poetry의 특징은 virtualenv 환경을 자동으로 통합하는 것이다. 그리고 Docker 컨테이너는 프로젝트 단위로 독립된 환경을 구축하려는 의도가 있다. 결과적으로 해당 프로젝트를 Docker 컨테이너 내에서 돌린다면 Poetry의 virtualenv 환경 통합 기능은 불필요할 수도 있다.&lt;/p&gt;
&lt;p&gt;그럴 때는 간단하게 아래 커맨드로 virtualenv 환경을 생성하지 않도록 설정해 줄 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry config virtualenvs.create false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 커맨드는 Poetry의 virtualenv를 비활성화 시키므로 &lt;code&gt;Dockerfile&lt;/code&gt; 등에 &lt;code&gt;poetry install&lt;/code&gt; 커맨드를 실행하기 전에 동작하도록 작성하면 될 것 같다.&lt;/p&gt;
&lt;h2&gt;기타&lt;/h2&gt;
&lt;p&gt;Poetry 자체를 업그레이드 하려면 &lt;code&gt;self update&lt;/code&gt; 커맨드를 사용해 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;poetry self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만 Homebrew 등의 다른 패키지 매니저를 통해 Poetry를 설치했다면 위 커맨드를 신경 쓸 필요는 없을 것 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;Poetry는 Python용 패키징 겸 의존성 관리를 도와주는 도구로 pip나 virtualenv를 좀 더 포괄적으로 그리고 현대적으로 사용할 수 있게 도와준다. 이 Poetry의 사용법을 간단히 알아보자.&lt;/p&gt;
&lt;h2&gt;프로젝트 시작하기&lt;/h2&gt;
&lt;p&gt;Poetry는 당연하겠지만 프로젝트 단위로 사용할 수 있다. 그래서 사용하기 위해선 아래와 같이 &lt;code&gt;new&lt;/code&gt; 커맨드로 프로젝트를 생성해야 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry new PROJECT_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 몇몇 확인 단계를 거쳐 새로운 파이썬 프로젝트를 생성할 수 있다.&lt;/p&gt;
&lt;p&gt;만약 이미 존재하는 프로젝트에 Poetry 환경만 구성하고 싶다면 아래와 같이 &lt;code&gt;init&lt;/code&gt; 커맨드를 사용해 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 두 커맨드 모두 핵심으로 프로젝트 루트에 &lt;code&gt;pyproject.toml&lt;/code&gt;이라는 파일을 생성한다. 이름대로 프로젝트 정의 및 의존성 목록을 담은 중요한 파일이다.&lt;/p&gt;
&lt;h2&gt;의존성 관리하기&lt;/h2&gt;
&lt;p&gt;프로젝트에 의존성을 추가하려면 아래와 같이 &lt;code&gt;add&lt;/code&gt; 커맨드를 사용하면 된다. 여기에 특정 버전을 명시할 수도 있고, 개발 모드 전용 의존성일 경우 &lt;code&gt;--dev&lt;/code&gt; 플래그도 추가해 줄 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry add PACKAGE_NAME
poetry add ANOTHER_PACKAGE_NAME==x.y.z
poetry add --dev PACKAGE_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 명령들은 프로젝트의 virtualenv 환경에 자동으로 설치까지 진행된다.&lt;/p&gt;
&lt;p&gt;의존성 패키지를 삭제하려면 &lt;code&gt;remove&lt;/code&gt; 커맨드를 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;poetry remove PACKAGE_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 외에 사용하는 의존성 패키지들의 버전을 일괄적으로 업데이트 하려면 &lt;code&gt;update&lt;/code&gt; 커맨드를 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 &lt;code&gt;pyproject.toml&lt;/code&gt; 스펙에 적힌 한도 내에서 최신 버전으로 업데이트 된다.&lt;/p&gt;
&lt;h2&gt;수작업으로 의존성 관리하기&lt;/h2&gt;
&lt;p&gt;CLI 커맨드 보다 수작업을 좋아한다면 &lt;code&gt;pyproject.toml&lt;/code&gt; 파일을 열어서 직접 명시해 주는 방법도 있다. 예를 들자면 이런 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;[tool.poetry.dependencies]
python = &amp;quot;^3.8&amp;quot;
somepackage = &amp;quot;^3.10.0&amp;quot;

[tool.poetry.dev-dependencies]
pytest = &amp;quot;^5.2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;버전 앞에 붙인 꺽쇠(&lt;code&gt;^&lt;/code&gt;)의 의미는 '메이저 업데이트를 제외한 최신 버전' 이라는 의미이다. 즉 &lt;code&gt;^3.10.0&lt;/code&gt;이라는 의미는 &lt;code&gt;3.x.y&lt;/code&gt; 버전 중 가장 최신 버전을 사용한다는 의미다.&lt;/p&gt;
&lt;p&gt;이렇게 작성한 후 &lt;code&gt;install&lt;/code&gt; 커맨드를 사용하면 프로젝트의 virtualenv 환경에 일괄 패키지 설치가 가능하다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;poetry install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 커맨드를 보고 &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;라는 커맨드가 떠오른다면 정답이다. 즉 이 커맨드를 &lt;code&gt;poetry install&lt;/code&gt; 커맨드로 완전히 대체할 수 있다.&lt;/p&gt;
&lt;h2&gt;프로젝트 실행하기&lt;/h2&gt;
&lt;p&gt;프로젝트를 실행시키기 위해서는 &lt;code&gt;run&lt;/code&gt; 커맨드를 사용하면 된다. 예를 들어 실행시킬 엔트리포인트 파일이 &lt;code&gt;main.py&lt;/code&gt;라면 아래와 같은 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry run python main.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 경우 해당 프로젝트의 virtualenv 환경에서 &lt;code&gt;run&lt;/code&gt; 뒤의 커맨드가 실행되는 식이다.&lt;/p&gt;
&lt;h2&gt;virtualenv 셸 얻기&lt;/h2&gt;
&lt;p&gt;프로젝트의 virtualenv 환경에서 여러 가지를 시험해 보기 위해 셸을 얻고 싶다면 단순하게 &lt;code&gt;shell&lt;/code&gt; 커맨드를 사용하면 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry shell
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Docker와 Poetry&lt;/h2&gt;
&lt;p&gt;Poetry의 특징은 virtualenv 환경을 자동으로 통합하는 것이다. 그리고 Docker 컨테이너는 프로젝트 단위로 독립된 환경을 구축하려는 의도가 있다. 결과적으로 해당 프로젝트를 Docker 컨테이너 내에서 돌린다면 Poetry의 virtualenv 환경 통합 기능은 불필요할 수도 있다.&lt;/p&gt;
&lt;p&gt;그럴 때는 간단하게 아래 커맨드로 virtualenv 환경을 생성하지 않도록 설정해 줄 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry config virtualenvs.create false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 커맨드는 Poetry의 virtualenv를 비활성화 시키므로 &lt;code&gt;Dockerfile&lt;/code&gt; 등에 &lt;code&gt;poetry install&lt;/code&gt; 커맨드를 실행하기 전에 동작하도록 작성하면 될 것 같다.&lt;/p&gt;
&lt;h2&gt;기타&lt;/h2&gt;
&lt;p&gt;Poetry 자체를 업그레이드 하려면 &lt;code&gt;self update&lt;/code&gt; 커맨드를 사용해 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;poetry self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만 Homebrew 등의 다른 패키지 매니저를 통해 Poetry를 설치했다면 위 커맨드를 신경 쓸 필요는 없을 것 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/python-poetry.html</guid>
      <pubDate>Tue, 09 Jul 2024 23:40:00 +0900</pubDate>
    </item>
    <item>
      <title>Emacs Lisp에서 비동기 호출 코드 작성하기</title>
      <link>https://seorenn.github.io/article/emacs-lisp-async-call.html</link>
      <description>&lt;p&gt;그렇게 자주 있는 일은 아니겠지만 이맥스의 UI를 얼려버릴 만큼 무거운 코드를 돌려야 할 일이 있다면 느낌이 어떨까. 이맥스가 얼어버리는 현상은 결코 유쾌하지는 못 할 것이다. 그동안 다른 작업도 못 하고 말이다.&lt;/p&gt;
&lt;p&gt;그렇다면 비동기로 호출하면 이런 문제를 해결할 수 있지 않을까? 간단하게 이맥스에서 비동기로 코드를 호출하는 방법을 정리해 보자.&lt;/p&gt;
&lt;h2&gt;run-with-idle-timer&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(run-with-idle-timer 3 nil #'my-function)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;run-with-idle-timer&lt;/code&gt; 함수는 지정된 시간이 지난 후 이맥스가 쉬는(idle) 도중에 지정한 함수를 비동기로 호출한다.&lt;/p&gt;
&lt;p&gt;두 번째 인자는 반복 여부라 원하는 반복 횟수를 적어줄 수도 있다.&lt;/p&gt;
&lt;h2&gt;run-with-timer&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(run-with-timer 3 nil #'my-function)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;run-with-timer&lt;/code&gt; 함수도 지정된 시간이 지난 후 지정한 함수를 비동기로 호출한다. 다만 이맥스가 쉬든 말든 무작정 호출하는 듯하다.&lt;/p&gt;
&lt;p&gt;역시나 두 번째 인자로 반복 횟수를 지정할 수 있다.&lt;/p&gt;
&lt;h2&gt;async.el&lt;/h2&gt;
&lt;p&gt;순수하게 비동기 호출만을 생각하고 외부 패키지에 대해 열려있다면(?) async.el 혹은 emacs-async라는 패키지를 사용할 수도 있다. 이 패키지 내의 &lt;code&gt;async-start&lt;/code&gt; 함수를 이용할 수 있다고 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고로 이 항목은 직접 돌려보진 않았고 그저 메모 목적으로 작성한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(async-start
  (lambda () (my-function)) 
  ;; callback
  (lambda (result) 
    (message &amp;quot;Result: %s&amp;quot; result)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 &lt;code&gt;async-start&lt;/code&gt; 함수는 두 개의 함수를 인자로 넘긴다. 첫 인자가 비동기로 호출할 함수이고 두 번째 인자는 비동기 실행 결과를 받아서 동작하는 함수다. 즉 위의 예의 경우 my-function이라는 함수가 비동기로 호출된 후 이 함수의 결과가 두 번째 인자의 함수에 첫 인자로 전달된다.&lt;/p&gt;
&lt;p&gt;만약 결과를 받을 필요가 없다면 무시(ignore) 심볼을 남겨주자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(async-start
  (lambda () (my-function)) 
  'ignore)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;쉴 시간 주기&lt;/h2&gt;
&lt;p&gt;이 항목은 비동기 처리 자체와는 관계가 없지만 약간의 덤이다. &lt;/p&gt;
&lt;p&gt;단순 비동기 호출이라도 과도한 작업은 당연하게도 이맥스를 얼려버리는 현상이 나타날 수밖에 없다. 이를 피하기 위해선 비동기 코드의 루프에서 쉴 시간을 조금씩 주는 편이 좋다. 예를 들자면 &lt;code&gt;sleep-for&lt;/code&gt; 함수가 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(sleep-for 1)  ;; wait for 1 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;쉬게만 한다면 위의 코드로도 충분하겠지만 좀 더 깔끔하게(?) 쉬려면 &lt;code&gt;sit-for&lt;/code&gt;를 사용하는 편이 좋다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(sit-for 1)  ;; redisplay and wait for 1 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sit-for&lt;/code&gt;는 &lt;code&gt;sleep-for&lt;/code&gt;와 비슷하지만 화면을 한번 갱신시켜 준다는 점이 특징이다.  그 외에 입력이 가능하게 되면 멈추는 등 비동기 작업 용도로는 &lt;code&gt;sleep-for&lt;/code&gt;에 비해 약간읜 전문적(?)인 느낌이다.&lt;/p&gt;
&lt;p&gt;참고로 쉬는 시간은 초(seconds) 단위인데 소수점 단위도 된다. 즉 0.1초나 0.01초 정도로 짧게 쉬는 것도 가능하다.&lt;/p&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jwiegley/emacs-async" target="_blank"&gt;emacs-async📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-single-quote.html"&gt;Emacs Lisp에서 작은따옴표의 의미&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-sharp-quote-sign.md.html"&gt;Emacs Lisp에서 샤프 작은따옴표(#') 기호의 의미&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;p&gt;그렇게 자주 있는 일은 아니겠지만 이맥스의 UI를 얼려버릴 만큼 무거운 코드를 돌려야 할 일이 있다면 느낌이 어떨까. 이맥스가 얼어버리는 현상은 결코 유쾌하지는 못 할 것이다. 그동안 다른 작업도 못 하고 말이다.&lt;/p&gt;
&lt;p&gt;그렇다면 비동기로 호출하면 이런 문제를 해결할 수 있지 않을까? 간단하게 이맥스에서 비동기로 코드를 호출하는 방법을 정리해 보자.&lt;/p&gt;
&lt;h2&gt;run-with-idle-timer&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(run-with-idle-timer 3 nil #'my-function)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;run-with-idle-timer&lt;/code&gt; 함수는 지정된 시간이 지난 후 이맥스가 쉬는(idle) 도중에 지정한 함수를 비동기로 호출한다.&lt;/p&gt;
&lt;p&gt;두 번째 인자는 반복 여부라 원하는 반복 횟수를 적어줄 수도 있다.&lt;/p&gt;
&lt;h2&gt;run-with-timer&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(run-with-timer 3 nil #'my-function)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;run-with-timer&lt;/code&gt; 함수도 지정된 시간이 지난 후 지정한 함수를 비동기로 호출한다. 다만 이맥스가 쉬든 말든 무작정 호출하는 듯하다.&lt;/p&gt;
&lt;p&gt;역시나 두 번째 인자로 반복 횟수를 지정할 수 있다.&lt;/p&gt;
&lt;h2&gt;async.el&lt;/h2&gt;
&lt;p&gt;순수하게 비동기 호출만을 생각하고 외부 패키지에 대해 열려있다면(?) async.el 혹은 emacs-async라는 패키지를 사용할 수도 있다. 이 패키지 내의 &lt;code&gt;async-start&lt;/code&gt; 함수를 이용할 수 있다고 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고로 이 항목은 직접 돌려보진 않았고 그저 메모 목적으로 작성한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(async-start
  (lambda () (my-function)) 
  ;; callback
  (lambda (result) 
    (message &amp;quot;Result: %s&amp;quot; result)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 &lt;code&gt;async-start&lt;/code&gt; 함수는 두 개의 함수를 인자로 넘긴다. 첫 인자가 비동기로 호출할 함수이고 두 번째 인자는 비동기 실행 결과를 받아서 동작하는 함수다. 즉 위의 예의 경우 my-function이라는 함수가 비동기로 호출된 후 이 함수의 결과가 두 번째 인자의 함수에 첫 인자로 전달된다.&lt;/p&gt;
&lt;p&gt;만약 결과를 받을 필요가 없다면 무시(ignore) 심볼을 남겨주자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(async-start
  (lambda () (my-function)) 
  'ignore)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;쉴 시간 주기&lt;/h2&gt;
&lt;p&gt;이 항목은 비동기 처리 자체와는 관계가 없지만 약간의 덤이다. &lt;/p&gt;
&lt;p&gt;단순 비동기 호출이라도 과도한 작업은 당연하게도 이맥스를 얼려버리는 현상이 나타날 수밖에 없다. 이를 피하기 위해선 비동기 코드의 루프에서 쉴 시간을 조금씩 주는 편이 좋다. 예를 들자면 &lt;code&gt;sleep-for&lt;/code&gt; 함수가 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(sleep-for 1)  ;; wait for 1 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;쉬게만 한다면 위의 코드로도 충분하겠지만 좀 더 깔끔하게(?) 쉬려면 &lt;code&gt;sit-for&lt;/code&gt;를 사용하는 편이 좋다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(sit-for 1)  ;; redisplay and wait for 1 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sit-for&lt;/code&gt;는 &lt;code&gt;sleep-for&lt;/code&gt;와 비슷하지만 화면을 한번 갱신시켜 준다는 점이 특징이다.  그 외에 입력이 가능하게 되면 멈추는 등 비동기 작업 용도로는 &lt;code&gt;sleep-for&lt;/code&gt;에 비해 약간읜 전문적(?)인 느낌이다.&lt;/p&gt;
&lt;p&gt;참고로 쉬는 시간은 초(seconds) 단위인데 소수점 단위도 된다. 즉 0.1초나 0.01초 정도로 짧게 쉬는 것도 가능하다.&lt;/p&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jwiegley/emacs-async" target="_blank"&gt;emacs-async📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-single-quote.html"&gt;Emacs Lisp에서 작은따옴표의 의미&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-sharp-quote-sign.md.html"&gt;Emacs Lisp에서 샤프 작은따옴표(#') 기호의 의미&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/emacs-lisp-async-call.html</guid>
      <pubDate>Mon, 08 Jul 2024 14:41:00 +0900</pubDate>
    </item>
    <item>
      <title>한 주간의 애플 소식들 24-07-07</title>
      <link>https://seorenn.github.io/log/20240707-00.html</link>
      <description>&lt;h2&gt;개발자 베타 릴리즈 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6 beta 2&lt;/li&gt;
&lt;li&gt;iOS 17.6 beta 2&lt;/li&gt;
&lt;li&gt;iPadOS 17.6 beta 2&lt;/li&gt;
&lt;li&gt;visionOS 1.3 beta 2&lt;/li&gt;
&lt;li&gt;watchOS 10.6 beta 2&lt;/li&gt;
&lt;li&gt;tvOS 17.6 beta 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모두 개발자 베타 형식으로 공개되어 수일 후 공공 베타로 전환되었다. 이전 베타와의 차이점은 버그 수정 외에 알려진 내역이 없다. 애초에 이 버전대는 마이너 업데이트 버전 형식을 띠고 있지만 사실상 버그 픽스 업데이트로 평가되고 있다.&lt;/p&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;AI 관련 소식들&lt;/strong&gt;&lt;br/&gt;
애플지능이 비전프로에도 언젠가 지원될 것 같다. 하지만 의외로 가장 유용할 것으로 보이는 홈팟에는 지원 가능성이 보이지 않는다. 사유로는 너무 적은 RAM이 꼽히는 듯하다. 그보다 더 성능 좋은 아이폰 14 이하 제품도 지원 안 되니 당연할 지도 모르겠다. 한편 물 건너 간 것으로 평가되던 구글과의 협업설이 다시 나오기 시작했다. 그리고 애플은 OpenAI 이사회 참관인(Observer) 자격을 얻었다고 한다. 애플지능 일부 기능의 유료화 가능성도 제기되고 있다. &lt;a href="../log/20240611-00.html"&gt;WWDC24&lt;/a&gt;를 통해 소개된 애플지능 기능은 일제히 가을에 보기는 힘들 것 같고 일부는 내년에야 볼 수 있을 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;구형이 된 제품들&lt;/strong&gt;&lt;br/&gt;
애플은 아이폰 X, 1세대 홈팟, 1세대 에어팟을 소위 '빈티지'로 분류했다. 빈티지의 경우 수리나 소프트웨어 지원이 끊기는 것은 아니지만 보통 2년 후에는 '구식' 제품으로 분류되어 공식 지원이 끝나게 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NFC 확장 가능?&lt;/strong&gt;&lt;br/&gt;
애플도 회원으로 있는 NFC 포럼에서는 여러 기능의 확장에 대해 의견이 오가고 있는 모양이다. 아직 애플은 아이폰이나 애플워치의 NFC를 개방하지도 않고 그래서 굉장히 제한적인 기능만 사용할 수 있는데, 유럽에서의 NFC 개방 움직임과 함께 이런 기능의 확장이 도입된다면 당연히 좋을 것이다. 애플도 회원사인 만큼 표준화가 된다면 애플도 이에 동의했다는 의미일 테고 말이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EU 파편화?&lt;/strong&gt;&lt;br/&gt;
EU 내에서 visionOS 1.2부터 대체 결제 옵션을 사용할 수 있다고 한다. 다른 OS들은 이미 지원하고 있었고 visionOS가 좀 늦었을 뿐이었다. 외부 결제를 쓸 수 있다 하더라도 애플 측에 수수료를 내야 하는 것은 여전히 특이하긴 하다. 하여간 유럽은 뭔가가 많이 다르다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;macOS 15 Sequoia, iOS 18, iPadOS 18&lt;/strong&gt;&lt;br/&gt;
macOS 15에 HDMI Passthrough가 지원되는데 주로 Dolby Atmos 오디오 재생을 위한 용도 같다. iOS 18의 날씨 앱도 조금씩 개선되는 듯하다. iPadOS 18에서는 이모티콘 입력이 개선된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;수리용이성&lt;/strong&gt;&lt;br/&gt;
뉴욕에서 수리권 준수 점검으로 애플의 제품 3개가 검사되었는데, 의외로 수리용이성에서 아이폰 15는 A 등급을 받았다. M3 맥북프로는 C 등급, 비전프로는 최악의 F 등급을 받았다. 다만 비전프로의 경우는 아직 수리 매뉴얼이나 부품 등을 구할 수 없다는 점이 최하 등급 받게 만든 이유인 듯하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;뒤끝이 긴 애플?&lt;/strong&gt;&lt;br/&gt;
에픽이 유럽 지역에서 자체 앱스토어를 통해 게임 업데이트를 제출했다는 소식이 얼마 전 전해졌었는데, 이제는 애플이 이를 고의로 지연시켰다고 에픽이 애플을 비난하는 소식이 알려졌다. 다만 현재 애플은 에픽의 대체 앱스토어 및 앱을 승인했다.&lt;/p&gt;
&lt;h2&gt;각종 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;비전프로의 염가판에는 당연하겠지만 크기가 크고 (즉 집적도가 낮고) 낮은 해상도의 디스플레이가 지원될 것 같다.&lt;/li&gt;
&lt;li&gt;아이폰 16 프로의 디스플레이는 밝기와 수명 개선을 위해 삼성의 M14 OLED 패널을 채택할 것으로 보인다. 카메라에는 5배 광학 줌이 지원될 것으로 보인다.&lt;/li&gt;
&lt;li&gt;아이폰 16 시리즈의 카메라 센서 공급망 개편에 관한 루머가 나왔다. 소문으론 삼성전자의 부품이 추가되지 않을까 예상되는 듯하다.&lt;/li&gt;
&lt;li&gt;일부에서 M4를 탑재한 일명 애플 TV 프로 제품을 출시해야 한다고 주장하는 듯하다. 일종의 게임 콘솔을 겸해서다.&lt;/li&gt;
&lt;li&gt;M5는 칩을 3차원으로 쌓는 TSMC의 SoIC 기술을 사용할 것으로 보인다.&lt;/li&gt;
&lt;li&gt;신형 아이패드로 유추되는 기기 식별자 4종이 발견되었다고 한다.&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;h2&gt;개발자 베타 릴리즈 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS 14.6 beta 2&lt;/li&gt;
&lt;li&gt;iOS 17.6 beta 2&lt;/li&gt;
&lt;li&gt;iPadOS 17.6 beta 2&lt;/li&gt;
&lt;li&gt;visionOS 1.3 beta 2&lt;/li&gt;
&lt;li&gt;watchOS 10.6 beta 2&lt;/li&gt;
&lt;li&gt;tvOS 17.6 beta 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모두 개발자 베타 형식으로 공개되어 수일 후 공공 베타로 전환되었다. 이전 베타와의 차이점은 버그 수정 외에 알려진 내역이 없다. 애초에 이 버전대는 마이너 업데이트 버전 형식을 띠고 있지만 사실상 버그 픽스 업데이트로 평가되고 있다.&lt;/p&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;AI 관련 소식들&lt;/strong&gt;&lt;br/&gt;
애플지능이 비전프로에도 언젠가 지원될 것 같다. 하지만 의외로 가장 유용할 것으로 보이는 홈팟에는 지원 가능성이 보이지 않는다. 사유로는 너무 적은 RAM이 꼽히는 듯하다. 그보다 더 성능 좋은 아이폰 14 이하 제품도 지원 안 되니 당연할 지도 모르겠다. 한편 물 건너 간 것으로 평가되던 구글과의 협업설이 다시 나오기 시작했다. 그리고 애플은 OpenAI 이사회 참관인(Observer) 자격을 얻었다고 한다. 애플지능 일부 기능의 유료화 가능성도 제기되고 있다. &lt;a href="../log/20240611-00.html"&gt;WWDC24&lt;/a&gt;를 통해 소개된 애플지능 기능은 일제히 가을에 보기는 힘들 것 같고 일부는 내년에야 볼 수 있을 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;구형이 된 제품들&lt;/strong&gt;&lt;br/&gt;
애플은 아이폰 X, 1세대 홈팟, 1세대 에어팟을 소위 '빈티지'로 분류했다. 빈티지의 경우 수리나 소프트웨어 지원이 끊기는 것은 아니지만 보통 2년 후에는 '구식' 제품으로 분류되어 공식 지원이 끝나게 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NFC 확장 가능?&lt;/strong&gt;&lt;br/&gt;
애플도 회원으로 있는 NFC 포럼에서는 여러 기능의 확장에 대해 의견이 오가고 있는 모양이다. 아직 애플은 아이폰이나 애플워치의 NFC를 개방하지도 않고 그래서 굉장히 제한적인 기능만 사용할 수 있는데, 유럽에서의 NFC 개방 움직임과 함께 이런 기능의 확장이 도입된다면 당연히 좋을 것이다. 애플도 회원사인 만큼 표준화가 된다면 애플도 이에 동의했다는 의미일 테고 말이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EU 파편화?&lt;/strong&gt;&lt;br/&gt;
EU 내에서 visionOS 1.2부터 대체 결제 옵션을 사용할 수 있다고 한다. 다른 OS들은 이미 지원하고 있었고 visionOS가 좀 늦었을 뿐이었다. 외부 결제를 쓸 수 있다 하더라도 애플 측에 수수료를 내야 하는 것은 여전히 특이하긴 하다. 하여간 유럽은 뭔가가 많이 다르다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;macOS 15 Sequoia, iOS 18, iPadOS 18&lt;/strong&gt;&lt;br/&gt;
macOS 15에 HDMI Passthrough가 지원되는데 주로 Dolby Atmos 오디오 재생을 위한 용도 같다. iOS 18의 날씨 앱도 조금씩 개선되는 듯하다. iPadOS 18에서는 이모티콘 입력이 개선된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;수리용이성&lt;/strong&gt;&lt;br/&gt;
뉴욕에서 수리권 준수 점검으로 애플의 제품 3개가 검사되었는데, 의외로 수리용이성에서 아이폰 15는 A 등급을 받았다. M3 맥북프로는 C 등급, 비전프로는 최악의 F 등급을 받았다. 다만 비전프로의 경우는 아직 수리 매뉴얼이나 부품 등을 구할 수 없다는 점이 최하 등급 받게 만든 이유인 듯하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;뒤끝이 긴 애플?&lt;/strong&gt;&lt;br/&gt;
에픽이 유럽 지역에서 자체 앱스토어를 통해 게임 업데이트를 제출했다는 소식이 얼마 전 전해졌었는데, 이제는 애플이 이를 고의로 지연시켰다고 에픽이 애플을 비난하는 소식이 알려졌다. 다만 현재 애플은 에픽의 대체 앱스토어 및 앱을 승인했다.&lt;/p&gt;
&lt;h2&gt;각종 루머 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;비전프로의 염가판에는 당연하겠지만 크기가 크고 (즉 집적도가 낮고) 낮은 해상도의 디스플레이가 지원될 것 같다.&lt;/li&gt;
&lt;li&gt;아이폰 16 프로의 디스플레이는 밝기와 수명 개선을 위해 삼성의 M14 OLED 패널을 채택할 것으로 보인다. 카메라에는 5배 광학 줌이 지원될 것으로 보인다.&lt;/li&gt;
&lt;li&gt;아이폰 16 시리즈의 카메라 센서 공급망 개편에 관한 루머가 나왔다. 소문으론 삼성전자의 부품이 추가되지 않을까 예상되는 듯하다.&lt;/li&gt;
&lt;li&gt;일부에서 M4를 탑재한 일명 애플 TV 프로 제품을 출시해야 한다고 주장하는 듯하다. 일종의 게임 콘솔을 겸해서다.&lt;/li&gt;
&lt;li&gt;M5는 칩을 3차원으로 쌓는 TSMC의 SoIC 기술을 사용할 것으로 보인다.&lt;/li&gt;
&lt;li&gt;신형 아이패드로 유추되는 기기 식별자 4종이 발견되었다고 한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240707-00.html</guid>
      <pubDate>Sun, 07 Jul 2024 21:10:00 +0900</pubDate>
    </item>
    <item>
      <title>Git에서 페이저 비활성화 하기</title>
      <link>https://seorenn.github.io/article/git-disable-pager.html</link>
      <description>&lt;p&gt;Git에서 페이저를 임시로 혹은 설정으로 비활성화 하는 방법을 간단히 알아보자.&lt;/p&gt;
&lt;h2&gt;페이저(Pager)&lt;/h2&gt;
&lt;p&gt;페이저(pager)란 less나 more 같은 CLI 도구로 터미널에서 로그나 변경사항을 볼 때 내용을 끊어서 볼 수 있게 해주거나 스크롤을 할 수 있게 해주는 등 긴 내용의 텍스트를 터미널에서 편하게 볼 수 있게 해주는 도구다.&lt;/p&gt;
&lt;p&gt;Git에서는 브랜치 목록이나 변경사항(diff) 등 여러 부분에서 기본적으로 페이저를 사용하도록 동작한다.&lt;/p&gt;
&lt;h2&gt;페이저 임시로 비활성화 하기&lt;/h2&gt;
&lt;p&gt;페이저는 편한 도구이지만 특정 상황, 예를 들어 다른 UNIX 유틸리티로 파이프를 통해 내용을 넘기려 할 때는 오히려 방해가 되는 요소다. 이런 경우는 페이저를 비활성화 하면 오히려 도움이 된다.&lt;/p&gt;
&lt;p&gt;페이저 비활성화는 &lt;code&gt;--no-pager&lt;/code&gt;라는 옵션으로 간단히 할 수 있다. 예를 들어 코드 변경 사항을 페이저 없이 보는 커맨드는 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git --no-pager diff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;참고로 &lt;code&gt;--no-pager&lt;/code&gt; 옵션은 위치에 따라 동작하지 않거나 없는 옵션이라고 하기도 하니 순서에 주의하자. 어쨌거나 필요한 커맨드 마다 매번 이 옵션을 입력하는 것은 번거롭기는 하다.&lt;/p&gt;
&lt;h2&gt;페이저 비활성화 설정하기&lt;/h2&gt;
&lt;p&gt;아예 페이저를 안 쓰겠다면 설정에서 비활성화 하는 방법이 있다.&lt;/p&gt;
&lt;p&gt;예를 들어 변경사항(diff) 커맨드에서 페이저를 비활성화 하고 싶다면 아래와 같이 설정할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git config --global pager.diff false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 외에도 다양한 설정이 있으므로 필요한 부분은 찾아보자.&lt;/p&gt;
&lt;p&gt;다만 Git을 터미널에서 쓰는 경우가 잦다면 추천하기는 좀 힘든 설정 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;Git에서 페이저를 임시로 혹은 설정으로 비활성화 하는 방법을 간단히 알아보자.&lt;/p&gt;
&lt;h2&gt;페이저(Pager)&lt;/h2&gt;
&lt;p&gt;페이저(pager)란 less나 more 같은 CLI 도구로 터미널에서 로그나 변경사항을 볼 때 내용을 끊어서 볼 수 있게 해주거나 스크롤을 할 수 있게 해주는 등 긴 내용의 텍스트를 터미널에서 편하게 볼 수 있게 해주는 도구다.&lt;/p&gt;
&lt;p&gt;Git에서는 브랜치 목록이나 변경사항(diff) 등 여러 부분에서 기본적으로 페이저를 사용하도록 동작한다.&lt;/p&gt;
&lt;h2&gt;페이저 임시로 비활성화 하기&lt;/h2&gt;
&lt;p&gt;페이저는 편한 도구이지만 특정 상황, 예를 들어 다른 UNIX 유틸리티로 파이프를 통해 내용을 넘기려 할 때는 오히려 방해가 되는 요소다. 이런 경우는 페이저를 비활성화 하면 오히려 도움이 된다.&lt;/p&gt;
&lt;p&gt;페이저 비활성화는 &lt;code&gt;--no-pager&lt;/code&gt;라는 옵션으로 간단히 할 수 있다. 예를 들어 코드 변경 사항을 페이저 없이 보는 커맨드는 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git --no-pager diff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;참고로 &lt;code&gt;--no-pager&lt;/code&gt; 옵션은 위치에 따라 동작하지 않거나 없는 옵션이라고 하기도 하니 순서에 주의하자. 어쨌거나 필요한 커맨드 마다 매번 이 옵션을 입력하는 것은 번거롭기는 하다.&lt;/p&gt;
&lt;h2&gt;페이저 비활성화 설정하기&lt;/h2&gt;
&lt;p&gt;아예 페이저를 안 쓰겠다면 설정에서 비활성화 하는 방법이 있다.&lt;/p&gt;
&lt;p&gt;예를 들어 변경사항(diff) 커맨드에서 페이저를 비활성화 하고 싶다면 아래와 같이 설정할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git config --global pager.diff false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 외에도 다양한 설정이 있으므로 필요한 부분은 찾아보자.&lt;/p&gt;
&lt;p&gt;다만 Git을 터미널에서 쓰는 경우가 잦다면 추천하기는 좀 힘든 설정 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/git-disable-pager.html</guid>
      <pubDate>Sat, 06 Jul 2024 23:04:00 +0900</pubDate>
    </item>
    <item>
      <title>미국 임금 및 고용 지표는 정말 뭔가를 가리키는 듯</title>
      <link>https://seorenn.github.io/log/20240705-00.html</link>
      <description>&lt;p&gt;어제에 이어 오늘도 고용과 관련해 상당히 중요한 지표들이 발표되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 평균 시간당 임금 MoM 0.3% (-0.1%), YoY 3.9% (-0.2%)&lt;/li&gt;
&lt;li&gt;미국 6월 비농업고용지수 206K (-12K) 예상치 상회&lt;/li&gt;
&lt;li&gt;미국 6월 실업률 4.1% (+0.1%) 예상치 상회&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;전반적으로 고용시장의 둔화가 어제에 이어 또 나타났다. 비농업고용지수가 예상치를 상회하긴 했지만 그래도 이전에 비해 악화된 것은 사실이다.&lt;/p&gt;
&lt;p&gt;특히 실업률이 튀는 것은 가볍게 볼 일은 아닐 것 같다. 왠지 오르는 속도가 빨라졌다는 느낌도 든다.&lt;/p&gt;
&lt;p&gt;연준의 책무가 물가와 고용이기 때문에 점점 금리 인하의 명분이 쌓여가고 있다. 채권 금리들도 일제히 떨어지며 입을 맞추는 것 같다. 그 덕분인지 오늘 ATH를 찍는 빅테크 종목들이 제법 보인다. 물론 정확한 방향은 아직은 모르는 일이고 유독 빅테크 위주로만 오르고 있다는 점에서도 그렇게 긍정적인 것은 또 아닌 것 같기도 하다.&lt;/p&gt;
&lt;p&gt;국장에는 좋은 분위기만 전달 되었으면 좋겠는데 많이 불안해 보인다. 러셀2000도 하락하고 있고 AI 관련주들도 하락하는 모양이다. 미리 마음의 준비(?)를 하고 있자. &lt;em&gt;내가 왜 오늘 삼성전자에 들어갔을까...&lt;/em&gt;&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;어제에 이어 오늘도 고용과 관련해 상당히 중요한 지표들이 발표되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 평균 시간당 임금 MoM 0.3% (-0.1%), YoY 3.9% (-0.2%)&lt;/li&gt;
&lt;li&gt;미국 6월 비농업고용지수 206K (-12K) 예상치 상회&lt;/li&gt;
&lt;li&gt;미국 6월 실업률 4.1% (+0.1%) 예상치 상회&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;전반적으로 고용시장의 둔화가 어제에 이어 또 나타났다. 비농업고용지수가 예상치를 상회하긴 했지만 그래도 이전에 비해 악화된 것은 사실이다.&lt;/p&gt;
&lt;p&gt;특히 실업률이 튀는 것은 가볍게 볼 일은 아닐 것 같다. 왠지 오르는 속도가 빨라졌다는 느낌도 든다.&lt;/p&gt;
&lt;p&gt;연준의 책무가 물가와 고용이기 때문에 점점 금리 인하의 명분이 쌓여가고 있다. 채권 금리들도 일제히 떨어지며 입을 맞추는 것 같다. 그 덕분인지 오늘 ATH를 찍는 빅테크 종목들이 제법 보인다. 물론 정확한 방향은 아직은 모르는 일이고 유독 빅테크 위주로만 오르고 있다는 점에서도 그렇게 긍정적인 것은 또 아닌 것 같기도 하다.&lt;/p&gt;
&lt;p&gt;국장에는 좋은 분위기만 전달 되었으면 좋겠는데 많이 불안해 보인다. 러셀2000도 하락하고 있고 AI 관련주들도 하락하는 모양이다. 미리 마음의 준비(?)를 하고 있자. &lt;em&gt;내가 왜 오늘 삼성전자에 들어갔을까...&lt;/em&gt;&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240705-00.html</guid>
      <pubDate>Fri, 05 Jul 2024 23:35:00 +0900</pubDate>
    </item>
    <item>
      <title>Git에서 작업 내역을 임시로 저장하고 복원하기</title>
      <link>https://seorenn.github.io/article/git-stash.html</link>
      <description>&lt;p&gt;Git 저장소로 관리하는 프로젝트 작업 중 원래 소스를 참조해야 해서 현재의 작업 내용을 잠깐 어딘가 보관해 두고 수정된 내역을 다시 원래대로 돌리고 싶을 때가 있다. 이럴 때는 stash 커맨드를 사용할 수 있는데 어떻게 사용하는지 대충 정리해 보자.&lt;/p&gt;
&lt;h2&gt;Git Stash&lt;/h2&gt;
&lt;p&gt;Git의 Stash 기능은 이름처럼 임시 영역에 무언가를 넣어두는(stash) 명령이다. 넣는 것은 '변경 사항' 뿐이기 때문에 이 명령을 실행하면 현재 저장소의 브랜치는 수정하기 전 상태로 돌아간다는 것이 특징이다. 그 외에 임시 영역은 브랜치와 무관하게 보관된다는 특징 또한 가지고 있다. &lt;/p&gt;
&lt;p&gt;당연하겠지만 Stash는 작업 중(dirty)인 내역만 임시 영역으로 옮기고, 커밋된 부분이나 저장소에 포함되지 않은(untracked) 파일은 옮기지 않는다. 따라서 커밋하기 전에 수정 전의 코드를 사용해야 할 일이 있을 때 유용하게 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;그 외에 여러 기능이 제공되지만 이 글에서는 기본적인 사용법과 개인적으로 종종 사용하는 방법에 대해서만 정리한다.&lt;/p&gt;
&lt;h2&gt;작업 내역을 임시 영역으로 옮기기&lt;/h2&gt;
&lt;p&gt;현재 작업 내역 중 커밋되지 않은 변경점들은 &lt;code&gt;stash&lt;/code&gt; 명령을 이용해 임시 영역으로 옮길 수 있다. 이러면 마치 농땡이(?)를 피운 양 현재 브랜치의 작업 내역이 싹 초기화된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-m&lt;/code&gt;으로 옵션으로 커밋과 비슷하게 메시지를 남길 수도 있으니 참고하자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash -m &amp;quot;is this correct way?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;특정 파일만 임시 영역에 옮기고 싶은 경우&lt;/h2&gt;
&lt;p&gt;Git 2.13 부터 &lt;code&gt;stash push&lt;/code&gt; 명령이 새롭게 생겼다. 이 명령을 이용하면 파일 단위로 임시 영역으로 변경점들을 옮길 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash push foo/bar/file
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;임시 영역 목록 보기&lt;/h2&gt;
&lt;p&gt;임시 영역에 보관된 내역들은 &lt;code&gt;stash list&lt;/code&gt; 커맨드로 대충 확인할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;임시 영역의 내용물 보기&lt;/h2&gt;
&lt;p&gt;임시 영역에 보관된 변경 사항이 어떤지 대충 확인할 때는 &lt;code&gt;show&lt;/code&gt; 커맨드를 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash show [stash_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;당연하겠지만 stash_nam을 생략하면 모든 사항이 표시된다.&lt;/p&gt;
&lt;h2&gt;임시 영역과 현재 브랜치와 비교하기&lt;/h2&gt;
&lt;p&gt;임시 영역의 들어간 내용들과 현재 브랜치와의 차이점(diff)을 보려면 &lt;code&gt;show&lt;/code&gt; 커맨드에 &lt;code&gt;-p&lt;/code&gt; 옵션을 붙여보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash show -p [stash_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;역시 stash_name 부분은 생략할 수 있다.&lt;/p&gt;
&lt;h2&gt;임시 영역의 변경사항을 현재 브랜치에 적용하기&lt;/h2&gt;
&lt;p&gt;볼 일(?)이 다 끝나고 임시 영역의 내용을 현재 브랜치로 다시 가져오려면 &lt;code&gt;pop&lt;/code&gt; 명령을 활용해보자. 이 경우 임시 영역의 내용은 사라진다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git pop [stash_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stash_name을 생략하면 모든 임시 영역의 변경 사항들이 그대로 적용된다. 당연하겠지만 커밋 되기 전의 상태를 의미한다.&lt;/p&gt;
&lt;h2&gt;임시 영역을 초기화하지 않고 적용하기&lt;/h2&gt;
&lt;p&gt;만약 임시 영역의 내용을 현재 브랜치에 적용할 때 임시 영역에서 지우지 않길 원한다면 &lt;code&gt;apply&lt;/code&gt; 커맨드를 활용해 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash apply [stash_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자주 쓸 일은 없겠지만 여러 브랜치에 비슷한 변경 사항을 적용해서 커밋하기 전에 시험해 볼 때는 유용할 수도 있다.&lt;/p&gt;
&lt;h2&gt;임시 영역의 변경사항 버리기&lt;/h2&gt;
&lt;p&gt;임시로 보관된 변경사항들을 지워버릴 때는 &lt;code&gt;drop&lt;/code&gt; 명령을 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash drop [stash_name]
&lt;/code&gt;&lt;/pre&gt;</description>
      <content:encoded>&lt;p&gt;Git 저장소로 관리하는 프로젝트 작업 중 원래 소스를 참조해야 해서 현재의 작업 내용을 잠깐 어딘가 보관해 두고 수정된 내역을 다시 원래대로 돌리고 싶을 때가 있다. 이럴 때는 stash 커맨드를 사용할 수 있는데 어떻게 사용하는지 대충 정리해 보자.&lt;/p&gt;
&lt;h2&gt;Git Stash&lt;/h2&gt;
&lt;p&gt;Git의 Stash 기능은 이름처럼 임시 영역에 무언가를 넣어두는(stash) 명령이다. 넣는 것은 '변경 사항' 뿐이기 때문에 이 명령을 실행하면 현재 저장소의 브랜치는 수정하기 전 상태로 돌아간다는 것이 특징이다. 그 외에 임시 영역은 브랜치와 무관하게 보관된다는 특징 또한 가지고 있다. &lt;/p&gt;
&lt;p&gt;당연하겠지만 Stash는 작업 중(dirty)인 내역만 임시 영역으로 옮기고, 커밋된 부분이나 저장소에 포함되지 않은(untracked) 파일은 옮기지 않는다. 따라서 커밋하기 전에 수정 전의 코드를 사용해야 할 일이 있을 때 유용하게 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;그 외에 여러 기능이 제공되지만 이 글에서는 기본적인 사용법과 개인적으로 종종 사용하는 방법에 대해서만 정리한다.&lt;/p&gt;
&lt;h2&gt;작업 내역을 임시 영역으로 옮기기&lt;/h2&gt;
&lt;p&gt;현재 작업 내역 중 커밋되지 않은 변경점들은 &lt;code&gt;stash&lt;/code&gt; 명령을 이용해 임시 영역으로 옮길 수 있다. 이러면 마치 농땡이(?)를 피운 양 현재 브랜치의 작업 내역이 싹 초기화된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-m&lt;/code&gt;으로 옵션으로 커밋과 비슷하게 메시지를 남길 수도 있으니 참고하자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash -m &amp;quot;is this correct way?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;특정 파일만 임시 영역에 옮기고 싶은 경우&lt;/h2&gt;
&lt;p&gt;Git 2.13 부터 &lt;code&gt;stash push&lt;/code&gt; 명령이 새롭게 생겼다. 이 명령을 이용하면 파일 단위로 임시 영역으로 변경점들을 옮길 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash push foo/bar/file
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;임시 영역 목록 보기&lt;/h2&gt;
&lt;p&gt;임시 영역에 보관된 내역들은 &lt;code&gt;stash list&lt;/code&gt; 커맨드로 대충 확인할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;임시 영역의 내용물 보기&lt;/h2&gt;
&lt;p&gt;임시 영역에 보관된 변경 사항이 어떤지 대충 확인할 때는 &lt;code&gt;show&lt;/code&gt; 커맨드를 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash show [stash_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;당연하겠지만 stash_nam을 생략하면 모든 사항이 표시된다.&lt;/p&gt;
&lt;h2&gt;임시 영역과 현재 브랜치와 비교하기&lt;/h2&gt;
&lt;p&gt;임시 영역의 들어간 내용들과 현재 브랜치와의 차이점(diff)을 보려면 &lt;code&gt;show&lt;/code&gt; 커맨드에 &lt;code&gt;-p&lt;/code&gt; 옵션을 붙여보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash show -p [stash_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;역시 stash_name 부분은 생략할 수 있다.&lt;/p&gt;
&lt;h2&gt;임시 영역의 변경사항을 현재 브랜치에 적용하기&lt;/h2&gt;
&lt;p&gt;볼 일(?)이 다 끝나고 임시 영역의 내용을 현재 브랜치로 다시 가져오려면 &lt;code&gt;pop&lt;/code&gt; 명령을 활용해보자. 이 경우 임시 영역의 내용은 사라진다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git pop [stash_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stash_name을 생략하면 모든 임시 영역의 변경 사항들이 그대로 적용된다. 당연하겠지만 커밋 되기 전의 상태를 의미한다.&lt;/p&gt;
&lt;h2&gt;임시 영역을 초기화하지 않고 적용하기&lt;/h2&gt;
&lt;p&gt;만약 임시 영역의 내용을 현재 브랜치에 적용할 때 임시 영역에서 지우지 않길 원한다면 &lt;code&gt;apply&lt;/code&gt; 커맨드를 활용해 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash apply [stash_name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자주 쓸 일은 없겠지만 여러 브랜치에 비슷한 변경 사항을 적용해서 커밋하기 전에 시험해 볼 때는 유용할 수도 있다.&lt;/p&gt;
&lt;h2&gt;임시 영역의 변경사항 버리기&lt;/h2&gt;
&lt;p&gt;임시로 보관된 변경사항들을 지워버릴 때는 &lt;code&gt;drop&lt;/code&gt; 명령을 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;git stash drop [stash_name]
&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/git-stash.html</guid>
      <pubDate>Fri, 05 Jul 2024 16:18:00 +0900</pubDate>
    </item>
    <item>
      <title>이제 미국도 정말 경기 침체를 걱정하는 단계인가?</title>
      <link>https://seorenn.github.io/log/20240704-00.html</link>
      <description>&lt;p&gt;육아에 지쳐 쓰러져 있는 동안 미국 노동시장과 관련된 정말 중요한 지표들이 나왔었나 보다. 적당히 정리해 보자.&lt;/p&gt;
&lt;p&gt;가장 먼저 전전일 발표된 JOLTs다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 5월 노동부 JOLTs: 8140M (+221M) 예상치 상회&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이를 보면 노동시장이 다시 회복하기 시작한 것처럼 보이지만 추세를 보면 하락세가 꺾인 것은 아니라서 반전이라고 보기엔 힘든 지표 같다. 이를 증명이나 하듯 전일 발표된 지표가 뭔가를 보여준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 ADP 비농업부문 고용 변화: 150K (-7K) 예상치 하회&lt;/li&gt;
&lt;li&gt;미국 연속 실업수당청구건수: 1858K (+26K) 예상치 상회&lt;/li&gt;
&lt;li&gt;미국 신규 실업수당청구건수: 238K (+4K) 예상치 상회&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ADP 지표나 실업수당으로 간접 유추해보면 노동시장이 둔화되고 있는 것처럼 보인다. JOLTs 지표를 하락 추세로 보는 게 합당하다고 뒷받침 하고 있다.&lt;/p&gt;
&lt;p&gt;그리고 또 충격의 지표가 하나 더 있다. 바로 그동안 강력하던 서비스 물가를 간접적으로 알려주던 서비스업 PMI다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 서비스 PMI: 55.3 (+0.5) 예상치 상회&lt;/li&gt;
&lt;li&gt;미국 6월 ISM 비제조업 PMI: 48.8 (-5) 예상치 하회&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;서비스업 PMI의 두 지표는 좀 상반되게 나왔지만, 영향력이 큰 ISM쪽 지표는 아예 위축세로 크게 하락한 모습을 보이며 좀 충격을 주는 듯하다. 물론 설문 조사로 만들어지는 지표기 때문에 객관성은 좀 떨어지겠지만 적어도 시장 분위기를 느끼기엔 더없이 좋은 지표기도 하다.&lt;/p&gt;
&lt;p&gt;안 그래도 여기에 GDP 예측치도 떨어지고 있고 뭔가가 느껴진다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;많은 화살표가 일제히 미국의 경기 침체 쪽을 가리키는 느낌이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이러면 적어도 주식시장에선 안 좋은 분위기가 느껴...져야 정상이겠지만 금리 인하 기대를 키우는 쪽으로 건드리며 오히려 좋은 분위기가 느껴지는 것 같기도 하다. 뭐... 침체는 그렇게 좋은 건 아니니 무작정 좋다고 보긴 무리겠지만 말이다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;육아에 지쳐 쓰러져 있는 동안 미국 노동시장과 관련된 정말 중요한 지표들이 나왔었나 보다. 적당히 정리해 보자.&lt;/p&gt;
&lt;p&gt;가장 먼저 전전일 발표된 JOLTs다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 5월 노동부 JOLTs: 8140M (+221M) 예상치 상회&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이를 보면 노동시장이 다시 회복하기 시작한 것처럼 보이지만 추세를 보면 하락세가 꺾인 것은 아니라서 반전이라고 보기엔 힘든 지표 같다. 이를 증명이나 하듯 전일 발표된 지표가 뭔가를 보여준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 ADP 비농업부문 고용 변화: 150K (-7K) 예상치 하회&lt;/li&gt;
&lt;li&gt;미국 연속 실업수당청구건수: 1858K (+26K) 예상치 상회&lt;/li&gt;
&lt;li&gt;미국 신규 실업수당청구건수: 238K (+4K) 예상치 상회&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ADP 지표나 실업수당으로 간접 유추해보면 노동시장이 둔화되고 있는 것처럼 보인다. JOLTs 지표를 하락 추세로 보는 게 합당하다고 뒷받침 하고 있다.&lt;/p&gt;
&lt;p&gt;그리고 또 충격의 지표가 하나 더 있다. 바로 그동안 강력하던 서비스 물가를 간접적으로 알려주던 서비스업 PMI다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미국 6월 서비스 PMI: 55.3 (+0.5) 예상치 상회&lt;/li&gt;
&lt;li&gt;미국 6월 ISM 비제조업 PMI: 48.8 (-5) 예상치 하회&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;서비스업 PMI의 두 지표는 좀 상반되게 나왔지만, 영향력이 큰 ISM쪽 지표는 아예 위축세로 크게 하락한 모습을 보이며 좀 충격을 주는 듯하다. 물론 설문 조사로 만들어지는 지표기 때문에 객관성은 좀 떨어지겠지만 적어도 시장 분위기를 느끼기엔 더없이 좋은 지표기도 하다.&lt;/p&gt;
&lt;p&gt;안 그래도 여기에 GDP 예측치도 떨어지고 있고 뭔가가 느껴진다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;많은 화살표가 일제히 미국의 경기 침체 쪽을 가리키는 느낌이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이러면 적어도 주식시장에선 안 좋은 분위기가 느껴...져야 정상이겠지만 금리 인하 기대를 키우는 쪽으로 건드리며 오히려 좋은 분위기가 느껴지는 것 같기도 하다. 뭐... 침체는 그렇게 좋은 건 아니니 무작정 좋다고 보긴 무리겠지만 말이다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240704-00.html</guid>
      <pubDate>Thu, 04 Jul 2024 11:54:00 +0900</pubDate>
    </item>
    <item>
      <title>Cargo로 빌드 시 no external crate 오류 해결하기</title>
      <link>https://seorenn.github.io/article/rust-no-external-crate.html</link>
      <description>&lt;p&gt;Cargo로 Rust 프로젝트를 빌드할 때 특정 패키지를 사용하려는 코드에서 'unresolved import' 혹은 'no external crate' 오류가 발생했을 때의 원인과 해결 방법을 알아보자.&lt;/p&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;특수한 상황 때문에 빌드 스크립트를 써야 할 때가 있었다. 이럴 때는 &lt;code&gt;build.rs&lt;/code&gt;라는 파일을 만들어 여기에 몇 가지 추가 빌드 스크립트를 작성할 수 있다. 그리고 이런 빌드 스크립트 작성에도 도움을 주는 여러 외부 패키지가 있다.&lt;/p&gt;
&lt;p&gt;어쨌든 다시 특수한 상황으로 빌드 스크립트를 작성해야 해서 빌드용으로 사용할 어떤 패키지 - 여기서는 임의로 somemod라고 이름 지은 패키지 - 를 의존성으로 추가했다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo add somemod
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 실제로 존재하지는 않는 패키지다. 어쨌든 이를 &lt;code&gt;build.rs&lt;/code&gt;에서 쓰겠다고 명시해 줬다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;// build.rs
use somemod;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 빌드를 시도해 보니 오류가 떴다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo build
   Compiling myproject v0.1.0 (/foo/bar/project/myproject)
error[E0432]: unresolved import `somemod`
 --&amp;gt; build.rs:1:5
  |
1 | use somemod;
  |     ^^^^^ no external crate `somemod`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;대략 두 가지 메시지가 뜬다. 하나는 'unresolved import'이고 다른 하나는 'no external crate' 오류다. 의미상으로 보면 어차피 같은 오류라고 봐도 될 것 같다.&lt;/p&gt;
&lt;h2&gt;해결하기&lt;/h2&gt;
&lt;p&gt;이 오류 때문에 좀 삽질을 했었는데 '빌드 의존성은 런타임 의존성과는 별도'라는 점을 모르고 있었다는 점이었다. 위의 경우 별도의 명시 없이 somemod라는 모듈을 add 명령으로 의존성으로 추가했더니 해당 패키지는 아래와 같이 &lt;code&gt;Cargo.toml&lt;/code&gt;에 일반 의존성으로 기입되어 있었다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[dependencies]
somemod = &amp;quot;1.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그런데 예시로 든 somemod 패키지는 빌드할 때 필요한 의존성이다. 따라서 오류를 해결하려면 이 패키지를 다음과 같이 빌드 의존성(Build Dependencies) 쪽으로 옮겨서 확실하게 명시해 주면 될 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[build-dependencies]
somemod = &amp;quot;1.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;build-dependencies&lt;/code&gt; 섹션은 없으면 그냥 만들면 된다.&lt;/p&gt;
&lt;p&gt;이후 &lt;code&gt;cargo build&lt;/code&gt;를 실행시키니 별 문제 없이 잘 실행되었다.&lt;/p&gt;
&lt;p&gt;오늘도 이렇게 삽질을 하며 한 가지 사실을 배워간다. 빌드 의존성 문제는 어떤 언어든 어떤 프레임워크든 늘 겪는 문제인데 왜 이렇게 익숙해지지 않는지 모르겠다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;Cargo로 Rust 프로젝트를 빌드할 때 특정 패키지를 사용하려는 코드에서 'unresolved import' 혹은 'no external crate' 오류가 발생했을 때의 원인과 해결 방법을 알아보자.&lt;/p&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;특수한 상황 때문에 빌드 스크립트를 써야 할 때가 있었다. 이럴 때는 &lt;code&gt;build.rs&lt;/code&gt;라는 파일을 만들어 여기에 몇 가지 추가 빌드 스크립트를 작성할 수 있다. 그리고 이런 빌드 스크립트 작성에도 도움을 주는 여러 외부 패키지가 있다.&lt;/p&gt;
&lt;p&gt;어쨌든 다시 특수한 상황으로 빌드 스크립트를 작성해야 해서 빌드용으로 사용할 어떤 패키지 - 여기서는 임의로 somemod라고 이름 지은 패키지 - 를 의존성으로 추가했다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo add somemod
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 실제로 존재하지는 않는 패키지다. 어쨌든 이를 &lt;code&gt;build.rs&lt;/code&gt;에서 쓰겠다고 명시해 줬다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;// build.rs
use somemod;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 빌드를 시도해 보니 오류가 떴다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo build
   Compiling myproject v0.1.0 (/foo/bar/project/myproject)
error[E0432]: unresolved import `somemod`
 --&amp;gt; build.rs:1:5
  |
1 | use somemod;
  |     ^^^^^ no external crate `somemod`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;대략 두 가지 메시지가 뜬다. 하나는 'unresolved import'이고 다른 하나는 'no external crate' 오류다. 의미상으로 보면 어차피 같은 오류라고 봐도 될 것 같다.&lt;/p&gt;
&lt;h2&gt;해결하기&lt;/h2&gt;
&lt;p&gt;이 오류 때문에 좀 삽질을 했었는데 '빌드 의존성은 런타임 의존성과는 별도'라는 점을 모르고 있었다는 점이었다. 위의 경우 별도의 명시 없이 somemod라는 모듈을 add 명령으로 의존성으로 추가했더니 해당 패키지는 아래와 같이 &lt;code&gt;Cargo.toml&lt;/code&gt;에 일반 의존성으로 기입되어 있었다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[dependencies]
somemod = &amp;quot;1.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그런데 예시로 든 somemod 패키지는 빌드할 때 필요한 의존성이다. 따라서 오류를 해결하려면 이 패키지를 다음과 같이 빌드 의존성(Build Dependencies) 쪽으로 옮겨서 확실하게 명시해 주면 될 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[build-dependencies]
somemod = &amp;quot;1.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;build-dependencies&lt;/code&gt; 섹션은 없으면 그냥 만들면 된다.&lt;/p&gt;
&lt;p&gt;이후 &lt;code&gt;cargo build&lt;/code&gt;를 실행시키니 별 문제 없이 잘 실행되었다.&lt;/p&gt;
&lt;p&gt;오늘도 이렇게 삽질을 하며 한 가지 사실을 배워간다. 빌드 의존성 문제는 어떤 언어든 어떤 프레임워크든 늘 겪는 문제인데 왜 이렇게 익숙해지지 않는지 모르겠다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/rust-no-external-crate.html</guid>
      <pubDate>Tue, 02 Jul 2024 23:41:00 +0900</pubDate>
    </item>
    <item>
      <title>macOS에서 한영전환키를 Emacs에서도 사용하기 (Hammerspoon)</title>
      <link>https://seorenn.github.io/article/macos-emacs-korean-inputmethod-hotkey-hammerspoon.html</link>
      <description>&lt;blockquote&gt;
&lt;p&gt;이 글의 해법은 어느 정도 시간이 지나면 먹통이 되는 문제가 있어 다른 방법을 연구 중입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;과거에는 좀 달랐지만 언제부턴가 macOS에서 한영전환키를 누르며 이 키 입력이 Emacs에 닿지 않게 되었다. 그래서 Emacs 내장 한글 입력기로 전환하기 위해서는 &lt;code&gt;C-\&lt;/code&gt; 등 다른 단축키를 이용해야 했다. 하지만 헷갈려서 내장 입력기 전환은 거의 사용하지 않았고 macOS 자체 입력기를 쓰는 것도 그다지 무리는 없어서 쓰고는 있었다.&lt;/p&gt;
&lt;p&gt;그런데 최근 macOS의 한글입력기 문제인지 아니면 Emacs 29 최신 버전의 문제인지 아니면 Evil과의 환상 조합 오작동인지 하여간 한글 입력이 조합 도중 씹히거나 사라졌다가 나중에 다시 나타나는 등 요상한 문제를 겪기 시작했다.&lt;/p&gt;
&lt;p&gt;결국 근본적인 해결이 필요할 것 같아 방법을 찾아보다 기존에 종종 사용하던 Hammerspoon을 통해 해결할 수 있을 것 같아 약간의 삽질을 하다 겨우 성공하였다.&lt;/p&gt;
&lt;h2&gt;문제 해결하기&lt;/h2&gt;
&lt;p&gt;이 방법은 'Emacs를 쓸 때는 시스템의 한영전환키를 씹어버리고 Emacs 내장입력기 전환 키로 바꿔서 던지는 식'으로 동작하는 Hammerspoon용 LUA 코드로 구현했다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lua"&gt;local englishIMID = &amp;quot;com.apple.keylayout.ABC&amp;quot;

function setEnglishInputMethod()
    local source = hs.keycodes.currentSourceID()
    if not (source == englishIMID) then
        hs.keycodes.currentSourceID(englishIMID)
    end
end

hs.eventtap.new({hs.eventtap.event.types.keyDown, hs.eventtap.event.types.systemDefined}, function(event)
    local type = event:getType()
    local flags = event:getFlags()
    local keycode = event:getKeyCode()
    local app = hs.application.frontmostApplication()
    if type == hs.eventtap.event.types.keyDown and app:bundleID() == &amp;quot;org.gnu.Emacs&amp;quot; then
        if flags.shift and keycode == hs.keycodes.map.space then
            setEnglishInputMethod()
            -- remap to C-\
            hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, true):post()
            hs.eventtap.event.newKeyEvent(&amp;quot;\\&amp;quot;, true):post()
            hs.eventtap.event.newKeyEvent(&amp;quot;\\&amp;quot;, false):post()
            hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, false):post()
            return true
        else
            return false
        end
    else
        return false
    end
end):start()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bundle ID나 단축키 이름만 잘 바꾸면 어떤 앱이든 원하는 대로 단축키를 바꿀 수 있다. 그저 키 바꿔치기를 하는 경우에는 &lt;code&gt;return&lt;/code&gt; 값에 주의하면 된다. &lt;code&gt;true&lt;/code&gt;를 반환하면 기존에 입력된 키 스트로크를 무시시켜 버리기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setEnglishInputMethod()&lt;/code&gt; 함수는 주제에는 조금 벗어나 보이겠지만 중요한 문제를 예방하기 위해 사용한다. 예를 들어 macOS의 입력기가 한국어인 상태로 Emacs에 진입했다간 영문모드로 전환할 수 없는 불상사가 생기기 때문이 이를 막기 위해 시스템 입력기를 영어로 바꾸는 코드다. 만약 영문 입력기를 별도로 설치한 다른 것을 쓴다면 해당 입력기 ID로 고쳐주자.&lt;/p&gt;</description>
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글의 해법은 어느 정도 시간이 지나면 먹통이 되는 문제가 있어 다른 방법을 연구 중입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;과거에는 좀 달랐지만 언제부턴가 macOS에서 한영전환키를 누르며 이 키 입력이 Emacs에 닿지 않게 되었다. 그래서 Emacs 내장 한글 입력기로 전환하기 위해서는 &lt;code&gt;C-\&lt;/code&gt; 등 다른 단축키를 이용해야 했다. 하지만 헷갈려서 내장 입력기 전환은 거의 사용하지 않았고 macOS 자체 입력기를 쓰는 것도 그다지 무리는 없어서 쓰고는 있었다.&lt;/p&gt;
&lt;p&gt;그런데 최근 macOS의 한글입력기 문제인지 아니면 Emacs 29 최신 버전의 문제인지 아니면 Evil과의 환상 조합 오작동인지 하여간 한글 입력이 조합 도중 씹히거나 사라졌다가 나중에 다시 나타나는 등 요상한 문제를 겪기 시작했다.&lt;/p&gt;
&lt;p&gt;결국 근본적인 해결이 필요할 것 같아 방법을 찾아보다 기존에 종종 사용하던 Hammerspoon을 통해 해결할 수 있을 것 같아 약간의 삽질을 하다 겨우 성공하였다.&lt;/p&gt;
&lt;h2&gt;문제 해결하기&lt;/h2&gt;
&lt;p&gt;이 방법은 'Emacs를 쓸 때는 시스템의 한영전환키를 씹어버리고 Emacs 내장입력기 전환 키로 바꿔서 던지는 식'으로 동작하는 Hammerspoon용 LUA 코드로 구현했다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lua"&gt;local englishIMID = &amp;quot;com.apple.keylayout.ABC&amp;quot;

function setEnglishInputMethod()
    local source = hs.keycodes.currentSourceID()
    if not (source == englishIMID) then
        hs.keycodes.currentSourceID(englishIMID)
    end
end

hs.eventtap.new({hs.eventtap.event.types.keyDown, hs.eventtap.event.types.systemDefined}, function(event)
    local type = event:getType()
    local flags = event:getFlags()
    local keycode = event:getKeyCode()
    local app = hs.application.frontmostApplication()
    if type == hs.eventtap.event.types.keyDown and app:bundleID() == &amp;quot;org.gnu.Emacs&amp;quot; then
        if flags.shift and keycode == hs.keycodes.map.space then
            setEnglishInputMethod()
            -- remap to C-\
            hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, true):post()
            hs.eventtap.event.newKeyEvent(&amp;quot;\\&amp;quot;, true):post()
            hs.eventtap.event.newKeyEvent(&amp;quot;\\&amp;quot;, false):post()
            hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, false):post()
            return true
        else
            return false
        end
    else
        return false
    end
end):start()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bundle ID나 단축키 이름만 잘 바꾸면 어떤 앱이든 원하는 대로 단축키를 바꿀 수 있다. 그저 키 바꿔치기를 하는 경우에는 &lt;code&gt;return&lt;/code&gt; 값에 주의하면 된다. &lt;code&gt;true&lt;/code&gt;를 반환하면 기존에 입력된 키 스트로크를 무시시켜 버리기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setEnglishInputMethod()&lt;/code&gt; 함수는 주제에는 조금 벗어나 보이겠지만 중요한 문제를 예방하기 위해 사용한다. 예를 들어 macOS의 입력기가 한국어인 상태로 Emacs에 진입했다간 영문모드로 전환할 수 없는 불상사가 생기기 때문이 이를 막기 위해 시스템 입력기를 영어로 바꾸는 코드다. 만약 영문 입력기를 별도로 설치한 다른 것을 쓴다면 해당 입력기 ID로 고쳐주자.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/macos-emacs-korean-inputmethod-hotkey-hammerspoon.html</guid>
      <pubDate>Mon, 01 Jul 2024 23:32:00 +0900</pubDate>
    </item>
    <item>
      <title>AI 산업의 미래</title>
      <link>https://seorenn.github.io/article/future-of-ai-industry.html</link>
      <description>&lt;p&gt;AI에 대한 관심과 투자가 한참인 지금, 과연 AI 산업의 미래는 밝기만 할까? 투자자 입장에서 그리고 엔지니어 입장에서 규제와 산업에 가해질 압력과 그 미래에 대해 상상해보자. 일부 근거는 사설 등을 기반으로 하지만 일부는 뇌피셜 이라는 점을 참고하자.&lt;/p&gt;
&lt;h2&gt;부작용이 생길 수 있는 이슈들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;제대로 지켜지지 않는 저작권&lt;/strong&gt;&lt;br/&gt;
지금도 크게 이슈가 되고 있는 부분으로 무단 학습 및 그 자료를 바탕으로 한 추론에서 저작권이 무시되고 있다는 점이다. 대기업이면 모르겠지만 중소기업으로까지 대상을 확대하면 규제가 아니고서는 제대로 지켜지긴 힘든 것이 현실이다. 개인적으로 가장 규제가 강하게 걸리리라 생각되는 부분이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI 하드웨어 독점&lt;/strong&gt;&lt;br/&gt;
현재는 Nvidia 독점인 상태인데, 이 점도 추후 반독점법의 영향을 받을 수 있을까? 물론 후발주자들의 페이스에 따라 영향은 달라질 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI 플랫폼 독점&lt;/strong&gt;&lt;br/&gt;
Nvidia가 하드웨어와 동시에 Nvidia는 CUDA 같은 플랫폼 역시도 독점 중인 상황인라 역시 반독점법의 영향에 관해 생각해야 할 것 같다. 이런 개발용 플랫폼은 후발 주자가 잘 따라와도 쉽게 교체하기 힘든 부분이기도 하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;전성비&lt;/strong&gt;&lt;br/&gt;
AI 서비스 운영을 위한 서버 인프라의 전기 소모량은 천문학적인 수준인데 이를 해결할 좋은 방법이 있을까? 전기 소모를 줄이거나 혹은 친환경발전의 비중을 크게 높여야 할 것이다. 물론 대규모 투자가 필요한 분야지만 제대로 극복을 못하면 규제의 대상이 될 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;개인정보 유출 및 프라이버시 침해&lt;/strong&gt;&lt;br/&gt;
민감한 개인정보가 사생활 정보를 어떻게 걸러낼 것인가 혹은 이에 관한 규제가 도입될 것인가? 지금도 벌어지고 있는 프라이버시 침해는 결국 규제가 아니면 후순위로 밀릴 주제일 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;비리의 도구&lt;/strong&gt;&lt;br/&gt;
편향된 학습 자료 혹은 추론 유도 등 AI를 이용한 비리나 범죄 가능성도 생각해 보자. 특히 AI의 신뢰도가 높아진다면 더더욱 AI로 만들어진 자료를 맹신하게 될 터라 범죄의 표적이 될 가능성도 높다고 보인다.&lt;/p&gt;
&lt;h2&gt;현실은 어떨까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://n.news.naver.com/article/025/0003287118" target="_blank"&gt;"수십억 달러 벌금 낼 수도"…세계 첫 AI 규제법, 유럽 초안 통과📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.etnews.com/20230623000193" target="_blank"&gt;AI규율 국제적 논의 본격화…개인정보위, 주요 정책방향 제시📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/297787" target="_blank"&gt;‘AI’와 관련된 잘못된 생각📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/297781" target="_blank"&gt;윈도우 코파일럿··· 아직은 혼란한 AI 비서📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/297991" target="_blank"&gt;AI 규제에 동조하는 마이크로소프트의 속내📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/298669" target="_blank"&gt;미 코미디언 사라 실버맨, 오픈AI와 메타에 저작권 침해 소송 제기📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://news.einfomax.co.kr/news/articleView.html?idxno=4274101" target="_blank"&gt;바 연준 금융당국 부의장 "AI, 불법 대출 관행 부추길 위험"📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/301939" target="_blank"&gt;높아지는 AI 규제 요청의 목소리··· “규제 없으면 솔루션 업체 아닌 기업이 책임질지도”📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/302215" target="_blank"&gt;영국, AI를 장기적 보안 위협으로 공식화📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/302239" target="_blank"&gt;허용과 권장? 금지와 모니터링?··· 4인의 CIO가 말하는 '셰도우 AI와 씨름하기'📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.khan.co.kr/national/national-general/article/202308311635001" target="_blank"&gt;온신협, “AI의 뉴스 무단 사용은 저작권 침해”📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.axios.com/2023/09/21/chatgpt-lawsuit-openai-writers" target="_blank"&gt;George R.R. Martin, John Grisham and other writers sue over ChatGPT📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/308569" target="_blank"&gt;어설픈 기사로 조롱거리 된 AI 기자 外··· 'AI 재난' 9선📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seorenn.tistory.com/536" target="_blank"&gt;생성형 AI로 매출 증대?📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/311551" target="_blank"&gt;내 저작물을 지켜라··· 생성형 AI에 '독 푸는' 도구의 등장📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/312226" target="_blank"&gt;EU 이어 미국도 AI 규제 본격화··· 바이든 ‘AI 행정 명령’에 대한 업계 평가는?📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infostockdaily.co.kr/news/articleView.html?idxno=196623" target="_blank"&gt;오픈AI(OpenAI)와 마이크로소프트(MSFT) 상대로 저작권 침해 집단 소송📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/323224" target="_blank"&gt;오픈AI의 논리는 결국 ‘복사, 절도, 붙여넣기’📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v.daum.net/v/20240307134553826" target="_blank"&gt;주요 4개 AI 모델 중 GPT-4, 저작권 침해 최악📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.etnews.com/20240311000237" target="_blank"&gt;엔비디아도 저작권 소송… 작가들 “AI 모델 학습에 무단 이용”📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/329335" target="_blank"&gt;유럽의회, 세계 첫 AI 규제법 승인··· 기업에 미치는 영향은?📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.einfomax.co.kr/news/articleView.html?idxno=4315303" target="_blank"&gt;"데이터 무단 사용"…오픈AI, 저작권 소송 잇따라📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/344152" target="_blank"&gt;“AI 답변에 광고 붙이고 수수료 지급할 것” 퍼플렉시티, 콘텐츠 제작자 위한 수익 공유 프로그램 공개📎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;p&gt;AI에 대한 관심과 투자가 한참인 지금, 과연 AI 산업의 미래는 밝기만 할까? 투자자 입장에서 그리고 엔지니어 입장에서 규제와 산업에 가해질 압력과 그 미래에 대해 상상해보자. 일부 근거는 사설 등을 기반으로 하지만 일부는 뇌피셜 이라는 점을 참고하자.&lt;/p&gt;
&lt;h2&gt;부작용이 생길 수 있는 이슈들&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;제대로 지켜지지 않는 저작권&lt;/strong&gt;&lt;br/&gt;
지금도 크게 이슈가 되고 있는 부분으로 무단 학습 및 그 자료를 바탕으로 한 추론에서 저작권이 무시되고 있다는 점이다. 대기업이면 모르겠지만 중소기업으로까지 대상을 확대하면 규제가 아니고서는 제대로 지켜지긴 힘든 것이 현실이다. 개인적으로 가장 규제가 강하게 걸리리라 생각되는 부분이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI 하드웨어 독점&lt;/strong&gt;&lt;br/&gt;
현재는 Nvidia 독점인 상태인데, 이 점도 추후 반독점법의 영향을 받을 수 있을까? 물론 후발주자들의 페이스에 따라 영향은 달라질 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI 플랫폼 독점&lt;/strong&gt;&lt;br/&gt;
Nvidia가 하드웨어와 동시에 Nvidia는 CUDA 같은 플랫폼 역시도 독점 중인 상황인라 역시 반독점법의 영향에 관해 생각해야 할 것 같다. 이런 개발용 플랫폼은 후발 주자가 잘 따라와도 쉽게 교체하기 힘든 부분이기도 하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;전성비&lt;/strong&gt;&lt;br/&gt;
AI 서비스 운영을 위한 서버 인프라의 전기 소모량은 천문학적인 수준인데 이를 해결할 좋은 방법이 있을까? 전기 소모를 줄이거나 혹은 친환경발전의 비중을 크게 높여야 할 것이다. 물론 대규모 투자가 필요한 분야지만 제대로 극복을 못하면 규제의 대상이 될 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;개인정보 유출 및 프라이버시 침해&lt;/strong&gt;&lt;br/&gt;
민감한 개인정보가 사생활 정보를 어떻게 걸러낼 것인가 혹은 이에 관한 규제가 도입될 것인가? 지금도 벌어지고 있는 프라이버시 침해는 결국 규제가 아니면 후순위로 밀릴 주제일 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;비리의 도구&lt;/strong&gt;&lt;br/&gt;
편향된 학습 자료 혹은 추론 유도 등 AI를 이용한 비리나 범죄 가능성도 생각해 보자. 특히 AI의 신뢰도가 높아진다면 더더욱 AI로 만들어진 자료를 맹신하게 될 터라 범죄의 표적이 될 가능성도 높다고 보인다.&lt;/p&gt;
&lt;h2&gt;현실은 어떨까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://n.news.naver.com/article/025/0003287118" target="_blank"&gt;"수십억 달러 벌금 낼 수도"…세계 첫 AI 규제법, 유럽 초안 통과📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.etnews.com/20230623000193" target="_blank"&gt;AI규율 국제적 논의 본격화…개인정보위, 주요 정책방향 제시📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/297787" target="_blank"&gt;‘AI’와 관련된 잘못된 생각📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/297781" target="_blank"&gt;윈도우 코파일럿··· 아직은 혼란한 AI 비서📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/297991" target="_blank"&gt;AI 규제에 동조하는 마이크로소프트의 속내📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/298669" target="_blank"&gt;미 코미디언 사라 실버맨, 오픈AI와 메타에 저작권 침해 소송 제기📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://news.einfomax.co.kr/news/articleView.html?idxno=4274101" target="_blank"&gt;바 연준 금융당국 부의장 "AI, 불법 대출 관행 부추길 위험"📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/301939" target="_blank"&gt;높아지는 AI 규제 요청의 목소리··· “규제 없으면 솔루션 업체 아닌 기업이 책임질지도”📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/302215" target="_blank"&gt;영국, AI를 장기적 보안 위협으로 공식화📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/302239" target="_blank"&gt;허용과 권장? 금지와 모니터링?··· 4인의 CIO가 말하는 '셰도우 AI와 씨름하기'📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.khan.co.kr/national/national-general/article/202308311635001" target="_blank"&gt;온신협, “AI의 뉴스 무단 사용은 저작권 침해”📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.axios.com/2023/09/21/chatgpt-lawsuit-openai-writers" target="_blank"&gt;George R.R. Martin, John Grisham and other writers sue over ChatGPT📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/308569" target="_blank"&gt;어설픈 기사로 조롱거리 된 AI 기자 外··· 'AI 재난' 9선📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seorenn.tistory.com/536" target="_blank"&gt;생성형 AI로 매출 증대?📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/311551" target="_blank"&gt;내 저작물을 지켜라··· 생성형 AI에 '독 푸는' 도구의 등장📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/312226" target="_blank"&gt;EU 이어 미국도 AI 규제 본격화··· 바이든 ‘AI 행정 명령’에 대한 업계 평가는?📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infostockdaily.co.kr/news/articleView.html?idxno=196623" target="_blank"&gt;오픈AI(OpenAI)와 마이크로소프트(MSFT) 상대로 저작권 침해 집단 소송📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/323224" target="_blank"&gt;오픈AI의 논리는 결국 ‘복사, 절도, 붙여넣기’📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v.daum.net/v/20240307134553826" target="_blank"&gt;주요 4개 AI 모델 중 GPT-4, 저작권 침해 최악📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.etnews.com/20240311000237" target="_blank"&gt;엔비디아도 저작권 소송… 작가들 “AI 모델 학습에 무단 이용”📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/329335" target="_blank"&gt;유럽의회, 세계 첫 AI 규제법 승인··· 기업에 미치는 영향은?📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.einfomax.co.kr/news/articleView.html?idxno=4315303" target="_blank"&gt;"데이터 무단 사용"…오픈AI, 저작권 소송 잇따라📎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ciokorea.com/news/344152" target="_blank"&gt;“AI 답변에 광고 붙이고 수수료 지급할 것” 퍼플렉시티, 콘텐츠 제작자 위한 수익 공유 프로그램 공개📎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/future-of-ai-industry.html</guid>
      <pubDate>Mon, 01 Jul 2024 15:12:00 +0900</pubDate>
    </item>
    <item>
      <title>한 주간의 애플 소식 모음 24-06-30</title>
      <link>https://seorenn.github.io/log/20240630-00.html</link>
      <description>&lt;h2&gt;개발자 베타 릴리즈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15 (Sequoia) beta 2: 아이폰 미러링 지원 추가, 헤드폰 조정 기능 추가, 맥앱스토어 앱 설치 빈 공간 요구 개선 등&lt;/li&gt;
&lt;li&gt;iOS 18 beta 2: 아이폰 미러링 지원, SharePlay 지원 추가, 메시지 RCS 토글 추가, 비밀번호 앱 개선, 지도 검색 개선 등&lt;/li&gt;
&lt;li&gt;iPadOS 18 beta 2: EU DMA 지원 추가 등&lt;/li&gt;
&lt;li&gt;visionOS 2 beta 2: Bora Bora 환경 추가, 새로운 제스처 추가, 키보드 폐쇄 등&lt;/li&gt;
&lt;li&gt;watchOS 11 beta 2: Vitals 앱 추가, Fitness 앱 개선, Smart Stack 기능 개선 등&lt;/li&gt;
&lt;li&gt;tvOS 18 beta 2: 대화 및 자막 개선, InSight 기능 추가&lt;/li&gt;
&lt;li&gt;Safari Technology Preview 197&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플의 AI 파트너십 대상 후보에 구글과 OpenAI에 이어 메타도 포함된 것으로 알려졌다. 하지만 곧 애플에 의해 거부되었다는 루머도 전해졌다.&lt;/li&gt;
&lt;li&gt;EU는 결국 애플이 DMA를 위반했다며 조사를 시작한 듯하다. 특히 사이드로딩이나 대체 앱스토어의 수수료 부과 문제를 크게 문제 삼는 듯하다.&lt;/li&gt;
&lt;li&gt;애플이 아이폰 생산 공정 자동화를 통해 인력을 절반으로 줄이는 방안을 추진 중이라 한다.&lt;/li&gt;
&lt;li&gt;애플의 비접촉 결제 서비스인 Tap to Pay가 독일에도 진출한다.&lt;/li&gt;
&lt;li&gt;애플이 대만에 데이터센터를 구축한다고 한다. 투자 금액은 4조 3천억 원 이상이 될 것으로 보인다. &lt;em&gt;지진과 중국은 괜찮을까?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;애플은 이제 유럽에서도 자가 수리 진단 서비스를 시작했다.&lt;/li&gt;
&lt;li&gt;헝가리에서 이상한 요금이 청구되는 등 애플페이가 무작위로 오작동하는 사례가 보고되었다.&lt;/li&gt;
&lt;li&gt;비전프로가 중국, 홍콩, 일본, 싱가포르에 출시되었다. 호주, 캐나다, 프랑스, 독일, 영국 등에선 비전프로의 사전 주문이 개시되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;루머들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플이 아이폰 배터리 교체를 좀 더 쉽게 할 수 있는 방법을 개발 중이라는 보고서가 나왔다. 우선 대상 모델은 아이폰 16인 것 같다.&lt;/li&gt;
&lt;li&gt;iOS 19는 벌써 개발이 시작 되었는데 Luck이라는 코드네임을 가지는 것으로 보인다. 비슷하게 macOS 16은 Cheer, watchOS 12는 Nepali, visionOS 3는 Discovery라는 코드네임을 가지는 것으로 보인다. 물론 코드네임은 실 사용에는 별 의미가 없다.&lt;/li&gt;
&lt;li&gt;카메라가 탑재된 에어팟 발패 가능성에 대한 소문이 있다. 2026년을 목표로 한다는 듯하다. 카메라는 적외선 카메라로 에어팟 사용성이나 공간감 개선을 위한 센서 역할을 하게 될 것 같은 느낌이다.&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;h2&gt;개발자 베타 릴리즈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS 15 (Sequoia) beta 2: 아이폰 미러링 지원 추가, 헤드폰 조정 기능 추가, 맥앱스토어 앱 설치 빈 공간 요구 개선 등&lt;/li&gt;
&lt;li&gt;iOS 18 beta 2: 아이폰 미러링 지원, SharePlay 지원 추가, 메시지 RCS 토글 추가, 비밀번호 앱 개선, 지도 검색 개선 등&lt;/li&gt;
&lt;li&gt;iPadOS 18 beta 2: EU DMA 지원 추가 등&lt;/li&gt;
&lt;li&gt;visionOS 2 beta 2: Bora Bora 환경 추가, 새로운 제스처 추가, 키보드 폐쇄 등&lt;/li&gt;
&lt;li&gt;watchOS 11 beta 2: Vitals 앱 추가, Fitness 앱 개선, Smart Stack 기능 개선 등&lt;/li&gt;
&lt;li&gt;tvOS 18 beta 2: 대화 및 자막 개선, InSight 기능 추가&lt;/li&gt;
&lt;li&gt;Safari Technology Preview 197&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;일반적인 소식들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플의 AI 파트너십 대상 후보에 구글과 OpenAI에 이어 메타도 포함된 것으로 알려졌다. 하지만 곧 애플에 의해 거부되었다는 루머도 전해졌다.&lt;/li&gt;
&lt;li&gt;EU는 결국 애플이 DMA를 위반했다며 조사를 시작한 듯하다. 특히 사이드로딩이나 대체 앱스토어의 수수료 부과 문제를 크게 문제 삼는 듯하다.&lt;/li&gt;
&lt;li&gt;애플이 아이폰 생산 공정 자동화를 통해 인력을 절반으로 줄이는 방안을 추진 중이라 한다.&lt;/li&gt;
&lt;li&gt;애플의 비접촉 결제 서비스인 Tap to Pay가 독일에도 진출한다.&lt;/li&gt;
&lt;li&gt;애플이 대만에 데이터센터를 구축한다고 한다. 투자 금액은 4조 3천억 원 이상이 될 것으로 보인다. &lt;em&gt;지진과 중국은 괜찮을까?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;애플은 이제 유럽에서도 자가 수리 진단 서비스를 시작했다.&lt;/li&gt;
&lt;li&gt;헝가리에서 이상한 요금이 청구되는 등 애플페이가 무작위로 오작동하는 사례가 보고되었다.&lt;/li&gt;
&lt;li&gt;비전프로가 중국, 홍콩, 일본, 싱가포르에 출시되었다. 호주, 캐나다, 프랑스, 독일, 영국 등에선 비전프로의 사전 주문이 개시되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;루머들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플이 아이폰 배터리 교체를 좀 더 쉽게 할 수 있는 방법을 개발 중이라는 보고서가 나왔다. 우선 대상 모델은 아이폰 16인 것 같다.&lt;/li&gt;
&lt;li&gt;iOS 19는 벌써 개발이 시작 되었는데 Luck이라는 코드네임을 가지는 것으로 보인다. 비슷하게 macOS 16은 Cheer, watchOS 12는 Nepali, visionOS 3는 Discovery라는 코드네임을 가지는 것으로 보인다. 물론 코드네임은 실 사용에는 별 의미가 없다.&lt;/li&gt;
&lt;li&gt;카메라가 탑재된 에어팟 발패 가능성에 대한 소문이 있다. 2026년을 목표로 한다는 듯하다. 카메라는 적외선 카메라로 에어팟 사용성이나 공간감 개선을 위한 센서 역할을 하게 될 것 같은 느낌이다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240630-00.html</guid>
      <pubDate>Sun, 30 Jun 2024 21:58:00 +0900</pubDate>
    </item>
    <item>
      <title>Emacs Lisp에서 샤프 작은따옴표(#') 기호의 의미</title>
      <link>https://seorenn.github.io/article/emacs-lisp-sharp-quote-sign.md.html</link>
      <description>&lt;p&gt;Emacs Lisp 코드에서 샤프(&lt;code&gt;#&lt;/code&gt;, sharpsign)와 작은따옴표(&lt;code&gt;'&lt;/code&gt;, single-quote)를 붙인 기호가 종종 쓰이는데 무슨 의미인지 대충 알아보자.&lt;/p&gt;
&lt;h2&gt;많이 쓰이는 예&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#'&lt;/code&gt; 기호는 보통 함수 핸들러를 전달할 때 많이 보인다. 아래의 예는 개인적으로 사용하는 설정 코드에서의 예인데 Doom Emacs 전용 코드도 일부 포함되어 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-local-cache))
(add-hook 'kill-emacs-hook #'my-exit-function)

;; Doom Emacs config.el
(add-hook! 'markdown-mode-hook #'my-text-styles)
(map! &amp;quot;C-c a l&amp;quot; #'my-miracle-function)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;#'&lt;/code&gt;가 붙어있는 심볼들이 모두 함수일 것 같은 기분이라면 바로 정답이다.&lt;/p&gt;
&lt;h2&gt;Function Abbreviation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#'&lt;/code&gt;로 샤프와 작은따옴표를 붙여 쓰면 Function Quote 즉 함수 인용이라는 기능이 된다. 다른 말로 Function Abbreviation이라다 표현하기도 한다. 다른 언어에선 콜백 혹은 핸들러 정도의 의미와 비슷하다. 예를 들자면 이런 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(defun do-what (f)
  (funcall f &amp;quot;This is the what!&amp;quot;))

(do-what #'message)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 예에서 &lt;code&gt;do-what&lt;/code&gt;이라는 함수의 첫번째 인자로 함수를 전달하기 위해 &lt;code&gt;#'&lt;/code&gt;가 함수 이름 앞에 붙어있다. 이렇게 함수를 어딘가 전달해야 할 때 &lt;code&gt;#'&lt;/code&gt;가 종종 사용된다.&lt;/p&gt;
&lt;h2&gt;그래서 무슨 차이일까?&lt;/h2&gt;
&lt;p&gt;사실 위 모든 예제에서 &lt;code&gt;#'&lt;/code&gt;을 그냥 &lt;code&gt;'&lt;/code&gt;으로 바꿔도 아무 문제 없이 동작한다. 함수 인용이든 인용이든 둘 다 인용이니 말이다.&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;code&gt;#'&lt;/code&gt;는 도대체 왜 쓰는 걸까?&lt;/p&gt;
&lt;p&gt;개인적인 추측이지만 &lt;strong&gt;명시적인 표현&lt;/strong&gt; 때문에 쓴다고 생각된다. 즉 여기에는 반드시 함수 인용이 들어와야 할 자리이고 그래서 함수를 인용해서 넘긴다는 의미로 &lt;code&gt;#'&lt;/code&gt;을 명확하게 표기한다고 생각한다. &lt;/p&gt;
&lt;p&gt;다르게 말해서 &lt;code&gt;#'&lt;/code&gt;를 표시한 자리에 함수가 아닌 다른 심볼이나 리스트 등을 넣으면 안 된다는 말이 된다. 실제로 여기에 함수가 아닌 것을 넣으면 호출 시점에서 에러가 발생한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(funcall #'(1 2 3) &amp;quot;parameter&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;함수가 와야 할 자리에 리스트가 들어가 있으니 "Invalid Function"이라는 오류가 발생한다.&lt;/p&gt;
&lt;p&gt;결국 &lt;code&gt;#'&lt;/code&gt;는 가독성을 좋게 만들기 위한 Lisp 만의 특수한 꾸밈 요소라고 생각된다. 물론 다른 언어에만 익숙한 사람이 보면 &lt;code&gt;'&lt;/code&gt;든 &lt;code&gt;#'&lt;/code&gt;든 암호 같은 건 마찬가지 겠지만 말이다.&lt;/p&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-single-quote.html"&gt;Emacs Lisp에서 작은따옴표의 의미&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-funcall-and-apply.html"&gt;Emacs Lisp에서 funcall과 apply의 차이&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;p&gt;Emacs Lisp 코드에서 샤프(&lt;code&gt;#&lt;/code&gt;, sharpsign)와 작은따옴표(&lt;code&gt;'&lt;/code&gt;, single-quote)를 붙인 기호가 종종 쓰이는데 무슨 의미인지 대충 알아보자.&lt;/p&gt;
&lt;h2&gt;많이 쓰이는 예&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#'&lt;/code&gt; 기호는 보통 함수 핸들러를 전달할 때 많이 보인다. 아래의 예는 개인적으로 사용하는 설정 코드에서의 예인데 Doom Emacs 전용 코드도 일부 포함되어 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-local-cache))
(add-hook 'kill-emacs-hook #'my-exit-function)

;; Doom Emacs config.el
(add-hook! 'markdown-mode-hook #'my-text-styles)
(map! &amp;quot;C-c a l&amp;quot; #'my-miracle-function)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;#'&lt;/code&gt;가 붙어있는 심볼들이 모두 함수일 것 같은 기분이라면 바로 정답이다.&lt;/p&gt;
&lt;h2&gt;Function Abbreviation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#'&lt;/code&gt;로 샤프와 작은따옴표를 붙여 쓰면 Function Quote 즉 함수 인용이라는 기능이 된다. 다른 말로 Function Abbreviation이라다 표현하기도 한다. 다른 언어에선 콜백 혹은 핸들러 정도의 의미와 비슷하다. 예를 들자면 이런 식이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(defun do-what (f)
  (funcall f &amp;quot;This is the what!&amp;quot;))

(do-what #'message)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 예에서 &lt;code&gt;do-what&lt;/code&gt;이라는 함수의 첫번째 인자로 함수를 전달하기 위해 &lt;code&gt;#'&lt;/code&gt;가 함수 이름 앞에 붙어있다. 이렇게 함수를 어딘가 전달해야 할 때 &lt;code&gt;#'&lt;/code&gt;가 종종 사용된다.&lt;/p&gt;
&lt;h2&gt;그래서 무슨 차이일까?&lt;/h2&gt;
&lt;p&gt;사실 위 모든 예제에서 &lt;code&gt;#'&lt;/code&gt;을 그냥 &lt;code&gt;'&lt;/code&gt;으로 바꿔도 아무 문제 없이 동작한다. 함수 인용이든 인용이든 둘 다 인용이니 말이다.&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;code&gt;#'&lt;/code&gt;는 도대체 왜 쓰는 걸까?&lt;/p&gt;
&lt;p&gt;개인적인 추측이지만 &lt;strong&gt;명시적인 표현&lt;/strong&gt; 때문에 쓴다고 생각된다. 즉 여기에는 반드시 함수 인용이 들어와야 할 자리이고 그래서 함수를 인용해서 넘긴다는 의미로 &lt;code&gt;#'&lt;/code&gt;을 명확하게 표기한다고 생각한다. &lt;/p&gt;
&lt;p&gt;다르게 말해서 &lt;code&gt;#'&lt;/code&gt;를 표시한 자리에 함수가 아닌 다른 심볼이나 리스트 등을 넣으면 안 된다는 말이 된다. 실제로 여기에 함수가 아닌 것을 넣으면 호출 시점에서 에러가 발생한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(funcall #'(1 2 3) &amp;quot;parameter&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;함수가 와야 할 자리에 리스트가 들어가 있으니 "Invalid Function"이라는 오류가 발생한다.&lt;/p&gt;
&lt;p&gt;결국 &lt;code&gt;#'&lt;/code&gt;는 가독성을 좋게 만들기 위한 Lisp 만의 특수한 꾸밈 요소라고 생각된다. 물론 다른 언어에만 익숙한 사람이 보면 &lt;code&gt;'&lt;/code&gt;든 &lt;code&gt;#'&lt;/code&gt;든 암호 같은 건 마찬가지 겠지만 말이다.&lt;/p&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-single-quote.html"&gt;Emacs Lisp에서 작은따옴표의 의미&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-funcall-and-apply.html"&gt;Emacs Lisp에서 funcall과 apply의 차이&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/emacs-lisp-sharp-quote-sign.md.html</guid>
      <pubDate>Sat, 29 Jun 2024 15:44:00 +0900</pubDate>
    </item>
    <item>
      <title>미국 5월 PCE도 잘 나온 듯</title>
      <link>https://seorenn.github.io/log/20240628-00.html</link>
      <description>&lt;p&gt;오늘은 대명절(?)인 PCE가 발표되는 날이다. 물론 미국이고 5월달 지표다. 대충 요렇게 나왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;헤드라인 PCE MoM 0% (-0.3%), YoY 2.6% (-0.1%)&lt;/li&gt;
&lt;li&gt;근원 PCE MoM 0.1% (-0.2%), YoY 2.6% (-0.2%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;전부 예상에 부합했다. 심지어 근원 PCE MoM의 전달 수치가 상향 조정되면서 더 극적인 연출이 이뤄진 느낌이다. 물론 완전히 0은 아니고 반올림이 이뤄지면서 0으로 표시된 것 뿐이겠지만 말이다.&lt;/p&gt;
&lt;p&gt;이와중에 개인지출이나 개인소득도 전달 대비 더 늘어나서 미묘하면서도 좋은 분위기를 만들어 줄 것 같은 느낌적인 느낌이다.&lt;/p&gt;
&lt;p&gt;현재로써는 주식시장 선물시장도 나쁘지 않은 반응이 나타나는 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="FedWatch" src="../upload/202406282329-f3e07644.png" /&gt;
&lt;em&gt;FedWatch&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;일단 7월이나 9월 인하 확률이 살짝 높아진 것 같은 느낌이 드는데 이전 수치를 저장을 안 해놨더니 확실하진 않다. &lt;/p&gt;
&lt;p&gt;어쨌든 좋은 느낌이다. 연준에게도 딱히 나쁜 느낌은 아닐 것 같기도 하다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;오늘은 대명절(?)인 PCE가 발표되는 날이다. 물론 미국이고 5월달 지표다. 대충 요렇게 나왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;헤드라인 PCE MoM 0% (-0.3%), YoY 2.6% (-0.1%)&lt;/li&gt;
&lt;li&gt;근원 PCE MoM 0.1% (-0.2%), YoY 2.6% (-0.2%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;전부 예상에 부합했다. 심지어 근원 PCE MoM의 전달 수치가 상향 조정되면서 더 극적인 연출이 이뤄진 느낌이다. 물론 완전히 0은 아니고 반올림이 이뤄지면서 0으로 표시된 것 뿐이겠지만 말이다.&lt;/p&gt;
&lt;p&gt;이와중에 개인지출이나 개인소득도 전달 대비 더 늘어나서 미묘하면서도 좋은 분위기를 만들어 줄 것 같은 느낌적인 느낌이다.&lt;/p&gt;
&lt;p&gt;현재로써는 주식시장 선물시장도 나쁘지 않은 반응이 나타나는 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="FedWatch" src="../upload/202406282329-f3e07644.png" /&gt;
&lt;em&gt;FedWatch&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;일단 7월이나 9월 인하 확률이 살짝 높아진 것 같은 느낌이 드는데 이전 수치를 저장을 안 해놨더니 확실하진 않다. &lt;/p&gt;
&lt;p&gt;어쨌든 좋은 느낌이다. 연준에게도 딱히 나쁜 느낌은 아닐 것 같기도 하다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240628-00.html</guid>
      <pubDate>Fri, 28 Jun 2024 23:32:00 +0900</pubDate>
    </item>
    <item>
      <title>Emacs Lisp에서 funcall과 apply의 차이</title>
      <link>https://seorenn.github.io/article/emacs-lisp-funcall-and-apply.html</link>
      <description>&lt;p&gt;Emacs Lisp에서 함수를 매개변수로 받아서 자유롭게 호출하기 위해 &lt;code&gt;funcall&lt;/code&gt;과 &lt;code&gt;apply&lt;/code&gt;가 쓰이는데 이 둘이 어떻게 다른지 간단히 정리해 보자. &lt;/p&gt;
&lt;p&gt;이 둘은 사실 용도는 동일하고 그저 사용법만 다르다고 봐도 될 것 같다.&lt;/p&gt;
&lt;h2&gt;funcall&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;funcall&lt;/code&gt;은 첫 매개변수로 입력된 함수를 나머지 매개변수를 이용해 호출시키고 결과를 반환하는 함수다. 예를 들자면 아래와 같이 호출할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(funcall #'+ 1 2 3)
;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드는 &lt;code&gt;(+ 1 2 3)&lt;/code&gt;을 호출하는 것과 동일하다.&lt;/p&gt;
&lt;h2&gt;apply&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;apply&lt;/code&gt;도 첫 매개변수로 입력된 함수를 호출하는데 여기에 전달될 매개변수를 리스트로 전달 받는다는 차이가 있다. 예를 들자면 아래와 같이 호출할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(apply #'+ '(1 2 3))
;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 코드도 &lt;code&gt;(+ 1 2 3)&lt;/code&gt;을 호출하는 것과 동일하다.&lt;/p&gt;
&lt;h2&gt;정리&lt;/h2&gt;
&lt;p&gt;즉 &lt;code&gt;funcall&lt;/code&gt;과 &lt;code&gt;apply&lt;/code&gt;의 결정적 차이는 매개변수(parameters)를 매개변수 리스트로 넘길 것이냐 아니면 별도의 순수 리스트 인스턴스로 넘길 것이냐 정도로 정리할 수 있을 것 같다.&lt;/p&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-single-quote.html"&gt;Emacs Lisp에서 작은따옴표의 의미&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-sharp-quote-sign.md.html"&gt;Emacs Lisp에서 샤프 작은따옴표(#') 기호의 의미&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded>&lt;p&gt;Emacs Lisp에서 함수를 매개변수로 받아서 자유롭게 호출하기 위해 &lt;code&gt;funcall&lt;/code&gt;과 &lt;code&gt;apply&lt;/code&gt;가 쓰이는데 이 둘이 어떻게 다른지 간단히 정리해 보자. &lt;/p&gt;
&lt;p&gt;이 둘은 사실 용도는 동일하고 그저 사용법만 다르다고 봐도 될 것 같다.&lt;/p&gt;
&lt;h2&gt;funcall&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;funcall&lt;/code&gt;은 첫 매개변수로 입력된 함수를 나머지 매개변수를 이용해 호출시키고 결과를 반환하는 함수다. 예를 들자면 아래와 같이 호출할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(funcall #'+ 1 2 3)
;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드는 &lt;code&gt;(+ 1 2 3)&lt;/code&gt;을 호출하는 것과 동일하다.&lt;/p&gt;
&lt;h2&gt;apply&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;apply&lt;/code&gt;도 첫 매개변수로 입력된 함수를 호출하는데 여기에 전달될 매개변수를 리스트로 전달 받는다는 차이가 있다. 예를 들자면 아래와 같이 호출할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(apply #'+ '(1 2 3))
;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 코드도 &lt;code&gt;(+ 1 2 3)&lt;/code&gt;을 호출하는 것과 동일하다.&lt;/p&gt;
&lt;h2&gt;정리&lt;/h2&gt;
&lt;p&gt;즉 &lt;code&gt;funcall&lt;/code&gt;과 &lt;code&gt;apply&lt;/code&gt;의 결정적 차이는 매개변수(parameters)를 매개변수 리스트로 넘길 것이냐 아니면 별도의 순수 리스트 인스턴스로 넘길 것이냐 정도로 정리할 수 있을 것 같다.&lt;/p&gt;
&lt;h2&gt;관련된 글들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-single-quote.html"&gt;Emacs Lisp에서 작은따옴표의 의미&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="../article/emacs-lisp-sharp-quote-sign.md.html"&gt;Emacs Lisp에서 샤프 작은따옴표(#') 기호의 의미&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/article/emacs-lisp-funcall-and-apply.html</guid>
      <pubDate>Fri, 28 Jun 2024 15:44:00 +0900</pubDate>
    </item>
    <item>
      <title>의존성 실타래 풀다가 화병 나겠네</title>
      <link>https://seorenn.github.io/log/20240627-00.html</link>
      <description>&lt;p&gt;&lt;img alt="불어터진 자장면 코드" src="../upload/202406271528-56066a1e.jpg" /&gt;
&lt;em&gt;파스타 코드 보다는 불어터진 자장면 코드가 더 어울릴 듯 (태경 김/Pixabay)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;한 회사의 오래된 프로젝트가 너무 오래된 SDK를 참조하고 있는데 계속 놔두면 자른다(?)고 해서 이걸 업그레이드 하려고 여럿 건드려 보고 있는 중이다.&lt;/p&gt;
&lt;p&gt;그런데 이 과정에서 큰 지뢰를 밟아버렸다. 사용하던 의존성이 구버전 SDK와 엮여 있던 것이 많아서였다. 그래도 이왕 밟은 거 죽기는 싫으니 지뢰를 하나씩 해체해 나간다.&lt;/p&gt;
&lt;p&gt;우선은 SDK 버전을 올린 후 부족한 부분을 따라가 본다. 의존성들의 버전을 하나씩 올려보면서 문제가 해결되는지 확인해본다. 문제는 이 과정에서 연달아서 버전이 안 맞아서 꼬이는 현상들이 하나 둘 계속 얽혀져 뽑혀나온다.&lt;/p&gt;
&lt;p&gt;불행히도 지뢰를 해체해 나가던 도중 거기에 연결된 또다른 폭탄을 하나 발견한다. 겨우 의존성 문제를 풀어가나 싶더니 거기서 누군가 버전업이 안 되던 패키지를 직접 뜯어고친 비공식 저장소의 의존성이 튀어나왔다.&lt;/p&gt;
&lt;p&gt;여기에 얽힌 의존성의 버전 꼬임을 또 하나하나 해결해 간다. 의존성 버전 체크는 한 번에 하나씩 밖에 안 되기 때문에 지속적으로 체크하고 수정하고를 반복해 나가야 했다. 심각하게 스트레스를 받았다. 그래도 어떻게 해결을 하긴 했댜.&lt;/p&gt;
&lt;p&gt;이제 다 해결 되었을까 싶었지만 불행히도 지뢰에 또다른 폭탄이 연결된 것을 발견한다. 그런데 이번에 발견된 폭탄에는 워낙 옛날에 만들어서 어떻게 해체해야 할지 알 수 없는 부품이 하나 연결되어 있었다. 2년이나 넘게 방치된 패키지였다.&lt;/p&gt;
&lt;p&gt;어쩔 수 없이 그 부품을 복제해서 직접 뜯어고쳐야 되게 생겼다. 하지만 그 부품 안에는 또 오래되어서 관리가 안 되는 부품이 또 들어있었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;아 모르겠다. 하기 싫다. 살려줘. 사람 살려.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;과거 어떤 회사 면접에서 '써드파티 의존성을 늘리는 것을 경계하는 편'이라고 이야기했다가 좀 둘러서 까인 적이 있었다. 그때 내가 잘못된 것일까 라고 생각하며 조금씩 써드파티 패키지에의 의존을 조금씩 늘려가보고 있기는 하다.&lt;/p&gt;
&lt;p&gt;하지만 이런 지뢰를 밟아 보면 '빨리 만들 수 있다고 써드파티 의존성을 늘려가는 게 과연 정답일까?'라고 좀 심각하게 고민해 봐야 할 것 같다. 특히 그 프로젝트가 내가 참여하지 않더라도 오히려 더 고민해 보라고 권하고 싶다. 유지보수라는 것도 상당히 중요한 일인데 의존성 옹호론자들은 너무 안일한 것이 아닐까.&lt;/p&gt;
&lt;p&gt;물론 지속적으로 관리되어온 프로젝트는 별 지장 없이 여전히 잘 관리될 수는 있다. 내가 처음부터 지금까지 계속 관리하는 코드들은 별 문제가 없다. 써드파티 패키지를 안 쓰는 것도 아님에도 말이다. SDK든 개발툴이든 뭐든 최신버전으로 바로 올려서 문제가 보이면 바로 수정하고 있으니 말이다.&lt;/p&gt;
&lt;p&gt;하지만 내가 처음부터 끝까지 지속적으로 꾸준히 관리되어 올 수 있는 일은 극수소일 뿐일 것이다.&lt;/p&gt;
&lt;p&gt;그러니까 하고 싶은 말은 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;불가피한 경우를 제외하곤 써드파티 의존성은 자제하는 편이 정신건강에 더 나을 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정도일 것 같다.&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;&lt;img alt="불어터진 자장면 코드" src="../upload/202406271528-56066a1e.jpg" /&gt;
&lt;em&gt;파스타 코드 보다는 불어터진 자장면 코드가 더 어울릴 듯 (태경 김/Pixabay)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;한 회사의 오래된 프로젝트가 너무 오래된 SDK를 참조하고 있는데 계속 놔두면 자른다(?)고 해서 이걸 업그레이드 하려고 여럿 건드려 보고 있는 중이다.&lt;/p&gt;
&lt;p&gt;그런데 이 과정에서 큰 지뢰를 밟아버렸다. 사용하던 의존성이 구버전 SDK와 엮여 있던 것이 많아서였다. 그래도 이왕 밟은 거 죽기는 싫으니 지뢰를 하나씩 해체해 나간다.&lt;/p&gt;
&lt;p&gt;우선은 SDK 버전을 올린 후 부족한 부분을 따라가 본다. 의존성들의 버전을 하나씩 올려보면서 문제가 해결되는지 확인해본다. 문제는 이 과정에서 연달아서 버전이 안 맞아서 꼬이는 현상들이 하나 둘 계속 얽혀져 뽑혀나온다.&lt;/p&gt;
&lt;p&gt;불행히도 지뢰를 해체해 나가던 도중 거기에 연결된 또다른 폭탄을 하나 발견한다. 겨우 의존성 문제를 풀어가나 싶더니 거기서 누군가 버전업이 안 되던 패키지를 직접 뜯어고친 비공식 저장소의 의존성이 튀어나왔다.&lt;/p&gt;
&lt;p&gt;여기에 얽힌 의존성의 버전 꼬임을 또 하나하나 해결해 간다. 의존성 버전 체크는 한 번에 하나씩 밖에 안 되기 때문에 지속적으로 체크하고 수정하고를 반복해 나가야 했다. 심각하게 스트레스를 받았다. 그래도 어떻게 해결을 하긴 했댜.&lt;/p&gt;
&lt;p&gt;이제 다 해결 되었을까 싶었지만 불행히도 지뢰에 또다른 폭탄이 연결된 것을 발견한다. 그런데 이번에 발견된 폭탄에는 워낙 옛날에 만들어서 어떻게 해체해야 할지 알 수 없는 부품이 하나 연결되어 있었다. 2년이나 넘게 방치된 패키지였다.&lt;/p&gt;
&lt;p&gt;어쩔 수 없이 그 부품을 복제해서 직접 뜯어고쳐야 되게 생겼다. 하지만 그 부품 안에는 또 오래되어서 관리가 안 되는 부품이 또 들어있었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;아 모르겠다. 하기 싫다. 살려줘. 사람 살려.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;과거 어떤 회사 면접에서 '써드파티 의존성을 늘리는 것을 경계하는 편'이라고 이야기했다가 좀 둘러서 까인 적이 있었다. 그때 내가 잘못된 것일까 라고 생각하며 조금씩 써드파티 패키지에의 의존을 조금씩 늘려가보고 있기는 하다.&lt;/p&gt;
&lt;p&gt;하지만 이런 지뢰를 밟아 보면 '빨리 만들 수 있다고 써드파티 의존성을 늘려가는 게 과연 정답일까?'라고 좀 심각하게 고민해 봐야 할 것 같다. 특히 그 프로젝트가 내가 참여하지 않더라도 오히려 더 고민해 보라고 권하고 싶다. 유지보수라는 것도 상당히 중요한 일인데 의존성 옹호론자들은 너무 안일한 것이 아닐까.&lt;/p&gt;
&lt;p&gt;물론 지속적으로 관리되어온 프로젝트는 별 지장 없이 여전히 잘 관리될 수는 있다. 내가 처음부터 지금까지 계속 관리하는 코드들은 별 문제가 없다. 써드파티 패키지를 안 쓰는 것도 아님에도 말이다. SDK든 개발툴이든 뭐든 최신버전으로 바로 올려서 문제가 보이면 바로 수정하고 있으니 말이다.&lt;/p&gt;
&lt;p&gt;하지만 내가 처음부터 끝까지 지속적으로 꾸준히 관리되어 올 수 있는 일은 극수소일 뿐일 것이다.&lt;/p&gt;
&lt;p&gt;그러니까 하고 싶은 말은 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;불가피한 경우를 제외하곤 써드파티 의존성은 자제하는 편이 정신건강에 더 나을 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정도일 것 같다.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">https://seorenn.github.io/log/20240627-00.html</guid>
      <pubDate>Thu, 27 Jun 2024 15:29:00 +0900</pubDate>
    </item>
  </channel>
</rss>
